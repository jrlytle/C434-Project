// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/SlateCorePrivatePCH.h"
#include "SlateCore.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeSlateCore() {}
	void UFontBulkData::StaticRegisterNativesUFontBulkData()
	{
	}
	IMPLEMENT_CLASS(UFontBulkData, 1935887920);
static class UEnum* EFontHinting_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EFontHinting();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EFontHinting, Z_Construct_UPackage_SlateCore(), TEXT("EFontHinting"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EFontHinting(EFontHinting_StaticEnum, TEXT("/Script/SlateCore"));
class UScriptStruct* FCompositeFont::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeFont();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FCompositeFont_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FCompositeFont, Z_Construct_UPackage_SlateCore(), TEXT("CompositeFont"), sizeof(FCompositeFont), Get_Z_Construct_UScriptStruct_FCompositeFont_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FCompositeFont(FCompositeFont::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFCompositeFont
{
	FScriptStruct_SlateCore_StaticRegisterNativesFCompositeFont()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("CompositeFont")),new UScriptStruct::TCppStructOps<FCompositeFont>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFCompositeFont;
class UScriptStruct* FCompositeSubFont::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeSubFont();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FCompositeSubFont_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FCompositeSubFont, Z_Construct_UPackage_SlateCore(), TEXT("CompositeSubFont"), sizeof(FCompositeSubFont), Get_Z_Construct_UScriptStruct_FCompositeSubFont_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FCompositeSubFont(FCompositeSubFont::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFCompositeSubFont
{
	FScriptStruct_SlateCore_StaticRegisterNativesFCompositeSubFont()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("CompositeSubFont")),new UScriptStruct::TCppStructOps<FCompositeSubFont>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFCompositeSubFont;
class UScriptStruct* FTypeface::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTypeface();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FTypeface_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTypeface, Z_Construct_UPackage_SlateCore(), TEXT("Typeface"), sizeof(FTypeface), Get_Z_Construct_UScriptStruct_FTypeface_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTypeface(FTypeface::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFTypeface
{
	FScriptStruct_SlateCore_StaticRegisterNativesFTypeface()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("Typeface")),new UScriptStruct::TCppStructOps<FTypeface>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFTypeface;
class UScriptStruct* FTypefaceEntry::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTypefaceEntry();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FTypefaceEntry_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTypefaceEntry, Z_Construct_UPackage_SlateCore(), TEXT("TypefaceEntry"), sizeof(FTypefaceEntry), Get_Z_Construct_UScriptStruct_FTypefaceEntry_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTypefaceEntry(FTypefaceEntry::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFTypefaceEntry
{
	FScriptStruct_SlateCore_StaticRegisterNativesFTypefaceEntry()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TypefaceEntry")),new UScriptStruct::TCppStructOps<FTypefaceEntry>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFTypefaceEntry;
class UScriptStruct* FFontData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontData();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FFontData_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FFontData, Z_Construct_UPackage_SlateCore(), TEXT("FontData"), sizeof(FFontData), Get_Z_Construct_UScriptStruct_FFontData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FFontData(FFontData::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFFontData
{
	FScriptStruct_SlateCore_StaticRegisterNativesFFontData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("FontData")),new UScriptStruct::TCppStructOps<FFontData>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFFontData;
	void UFontProviderInterface::StaticRegisterNativesUFontProviderInterface()
	{
	}
	IMPLEMENT_CLASS(UFontProviderInterface, 2892800376);
class UScriptStruct* FSlateSound::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateSound();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FSlateSound_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSlateSound, Z_Construct_UPackage_SlateCore(), TEXT("SlateSound"), sizeof(FSlateSound), Get_Z_Construct_UScriptStruct_FSlateSound_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSlateSound(FSlateSound::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFSlateSound
{
	FScriptStruct_SlateCore_StaticRegisterNativesFSlateSound()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SlateSound")),new UScriptStruct::TCppStructOps<FSlateSound>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFSlateSound;
static class UEnum* ESelectInfo_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESelectInfo();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_ESelectInfo, Z_Construct_UPackage_SlateCore(), TEXT("ESelectInfo"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESelectInfo(ESelectInfo_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* ETextCommit_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ETextCommit();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_ETextCommit, Z_Construct_UPackage_SlateCore(), TEXT("ETextCommit"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETextCommit(ETextCommit_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* EScrollDirection_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EScrollDirection();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EScrollDirection, Z_Construct_UPackage_SlateCore(), TEXT("EScrollDirection"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EScrollDirection(EScrollDirection_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* EOrientation_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EOrientation();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EOrientation, Z_Construct_UPackage_SlateCore(), TEXT("EOrientation"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EOrientation(EOrientation_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* EMenuPlacement_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EMenuPlacement();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EMenuPlacement, Z_Construct_UPackage_SlateCore(), TEXT("EMenuPlacement"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EMenuPlacement(EMenuPlacement_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* EVerticalAlignment_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EVerticalAlignment();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EVerticalAlignment, Z_Construct_UPackage_SlateCore(), TEXT("EVerticalAlignment"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EVerticalAlignment(EVerticalAlignment_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* EHorizontalAlignment_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EHorizontalAlignment();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EHorizontalAlignment, Z_Construct_UPackage_SlateCore(), TEXT("EHorizontalAlignment"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EHorizontalAlignment(EHorizontalAlignment_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* EUINavigation_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EUINavigation();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EUINavigation, Z_Construct_UPackage_SlateCore(), TEXT("EUINavigation"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EUINavigation(EUINavigation_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* EButtonPressMethod_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonPressMethod();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EButtonPressMethod, Z_Construct_UPackage_SlateCore(), TEXT("EButtonPressMethod"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EButtonPressMethod(EButtonPressMethod_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* EButtonTouchMethod_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonTouchMethod();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EButtonTouchMethod, Z_Construct_UPackage_SlateCore(), TEXT("EButtonTouchMethod"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EButtonTouchMethod(EButtonTouchMethod_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* EButtonClickMethod_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonClickMethod();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EButtonClickMethod, Z_Construct_UPackage_SlateCore(), TEXT("EButtonClickMethod"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EButtonClickMethod(EButtonClickMethod_StaticEnum, TEXT("/Script/SlateCore"));
class UScriptStruct* FMargin::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FMargin();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FMargin_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FMargin, Z_Construct_UPackage_SlateCore(), TEXT("Margin"), sizeof(FMargin), Get_Z_Construct_UScriptStruct_FMargin_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FMargin(FMargin::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFMargin
{
	FScriptStruct_SlateCore_StaticRegisterNativesFMargin()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("Margin")),new UScriptStruct::TCppStructOps<FMargin>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFMargin;
static class UEnum* ESlateColorStylingMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateColorStylingMode();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_ESlateColorStylingMode, Z_Construct_UPackage_SlateCore(), TEXT("ESlateColorStylingMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESlateColorStylingMode(ESlateColorStylingMode_StaticEnum, TEXT("/Script/SlateCore"));
class UScriptStruct* FSlateColor::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateColor();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FSlateColor_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSlateColor, Z_Construct_UPackage_SlateCore(), TEXT("SlateColor"), sizeof(FSlateColor), Get_Z_Construct_UScriptStruct_FSlateColor_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSlateColor(FSlateColor::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFSlateColor
{
	FScriptStruct_SlateCore_StaticRegisterNativesFSlateColor()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SlateColor")),new UScriptStruct::TCppStructOps<FSlateColor>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFSlateColor;
static class UEnum* ESlateBrushImageType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushImageType();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_ESlateBrushImageType, Z_Construct_UPackage_SlateCore(), TEXT("ESlateBrushImageType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESlateBrushImageType(ESlateBrushImageType_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* ESlateBrushMirrorType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushMirrorType();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_ESlateBrushMirrorType, Z_Construct_UPackage_SlateCore(), TEXT("ESlateBrushMirrorType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESlateBrushMirrorType(ESlateBrushMirrorType_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* ESlateBrushTileType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushTileType();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_ESlateBrushTileType, Z_Construct_UPackage_SlateCore(), TEXT("ESlateBrushTileType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESlateBrushTileType(ESlateBrushTileType_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* ESlateBrushDrawType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushDrawType();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_ESlateBrushDrawType, Z_Construct_UPackage_SlateCore(), TEXT("ESlateBrushDrawType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESlateBrushDrawType(ESlateBrushDrawType_StaticEnum, TEXT("/Script/SlateCore"));
class UScriptStruct* FSlateBrush::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateBrush();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FSlateBrush_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSlateBrush, Z_Construct_UPackage_SlateCore(), TEXT("SlateBrush"), sizeof(FSlateBrush), Get_Z_Construct_UScriptStruct_FSlateBrush_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSlateBrush(FSlateBrush::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFSlateBrush
{
	FScriptStruct_SlateCore_StaticRegisterNativesFSlateBrush()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SlateBrush")),new UScriptStruct::TCppStructOps<FSlateBrush>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFSlateBrush;
class UScriptStruct* FSlateWidgetStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateWidgetStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FSlateWidgetStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSlateWidgetStyle, Z_Construct_UPackage_SlateCore(), TEXT("SlateWidgetStyle"), sizeof(FSlateWidgetStyle), Get_Z_Construct_UScriptStruct_FSlateWidgetStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSlateWidgetStyle(FSlateWidgetStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFSlateWidgetStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFSlateWidgetStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SlateWidgetStyle")),new UScriptStruct::TCppStructOps<FSlateWidgetStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFSlateWidgetStyle;
class UScriptStruct* FSlateFontInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateFontInfo();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FSlateFontInfo_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSlateFontInfo, Z_Construct_UPackage_SlateCore(), TEXT("SlateFontInfo"), sizeof(FSlateFontInfo), Get_Z_Construct_UScriptStruct_FSlateFontInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSlateFontInfo(FSlateFontInfo::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFSlateFontInfo
{
	FScriptStruct_SlateCore_StaticRegisterNativesFSlateFontInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SlateFontInfo")),new UScriptStruct::TCppStructOps<FSlateFontInfo>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFSlateFontInfo;
static class UEnum* ECheckBoxState_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ECheckBoxState();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_ECheckBoxState, Z_Construct_UPackage_SlateCore(), TEXT("ECheckBoxState"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ECheckBoxState(ECheckBoxState_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* ESlateCheckBoxType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateCheckBoxType();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_ESlateCheckBoxType, Z_Construct_UPackage_SlateCore(), TEXT("ESlateCheckBoxType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESlateCheckBoxType(ESlateCheckBoxType_StaticEnum, TEXT("/Script/SlateCore"));
static class UEnum* EConsumeMouseWheel_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EConsumeMouseWheel();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EConsumeMouseWheel, Z_Construct_UPackage_SlateCore(), TEXT("EConsumeMouseWheel"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EConsumeMouseWheel(EConsumeMouseWheel_StaticEnum, TEXT("/Script/SlateCore"));
class UScriptStruct* FWindowStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FWindowStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FWindowStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FWindowStyle, Z_Construct_UPackage_SlateCore(), TEXT("WindowStyle"), sizeof(FWindowStyle), Get_Z_Construct_UScriptStruct_FWindowStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FWindowStyle(FWindowStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFWindowStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFWindowStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("WindowStyle")),new UScriptStruct::TCppStructOps<FWindowStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFWindowStyle;
class UScriptStruct* FScrollBorderStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBorderStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FScrollBorderStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FScrollBorderStyle, Z_Construct_UPackage_SlateCore(), TEXT("ScrollBorderStyle"), sizeof(FScrollBorderStyle), Get_Z_Construct_UScriptStruct_FScrollBorderStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FScrollBorderStyle(FScrollBorderStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFScrollBorderStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFScrollBorderStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ScrollBorderStyle")),new UScriptStruct::TCppStructOps<FScrollBorderStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFScrollBorderStyle;
class UScriptStruct* FScrollBoxStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBoxStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FScrollBoxStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FScrollBoxStyle, Z_Construct_UPackage_SlateCore(), TEXT("ScrollBoxStyle"), sizeof(FScrollBoxStyle), Get_Z_Construct_UScriptStruct_FScrollBoxStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FScrollBoxStyle(FScrollBoxStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFScrollBoxStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFScrollBoxStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ScrollBoxStyle")),new UScriptStruct::TCppStructOps<FScrollBoxStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFScrollBoxStyle;
class UScriptStruct* FDockTabStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FDockTabStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FDockTabStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDockTabStyle, Z_Construct_UPackage_SlateCore(), TEXT("DockTabStyle"), sizeof(FDockTabStyle), Get_Z_Construct_UScriptStruct_FDockTabStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDockTabStyle(FDockTabStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFDockTabStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFDockTabStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DockTabStyle")),new UScriptStruct::TCppStructOps<FDockTabStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFDockTabStyle;
class UScriptStruct* FHeaderRowStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FHeaderRowStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FHeaderRowStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FHeaderRowStyle, Z_Construct_UPackage_SlateCore(), TEXT("HeaderRowStyle"), sizeof(FHeaderRowStyle), Get_Z_Construct_UScriptStruct_FHeaderRowStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FHeaderRowStyle(FHeaderRowStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFHeaderRowStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFHeaderRowStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("HeaderRowStyle")),new UScriptStruct::TCppStructOps<FHeaderRowStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFHeaderRowStyle;
class UScriptStruct* FTableColumnHeaderStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableColumnHeaderStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FTableColumnHeaderStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTableColumnHeaderStyle, Z_Construct_UPackage_SlateCore(), TEXT("TableColumnHeaderStyle"), sizeof(FTableColumnHeaderStyle), Get_Z_Construct_UScriptStruct_FTableColumnHeaderStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTableColumnHeaderStyle(FTableColumnHeaderStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFTableColumnHeaderStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFTableColumnHeaderStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TableColumnHeaderStyle")),new UScriptStruct::TCppStructOps<FTableColumnHeaderStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFTableColumnHeaderStyle;
class UScriptStruct* FTableRowStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableRowStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FTableRowStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTableRowStyle, Z_Construct_UPackage_SlateCore(), TEXT("TableRowStyle"), sizeof(FTableRowStyle), Get_Z_Construct_UScriptStruct_FTableRowStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTableRowStyle(FTableRowStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFTableRowStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFTableRowStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TableRowStyle")),new UScriptStruct::TCppStructOps<FTableRowStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFTableRowStyle;
class UScriptStruct* FSplitterStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSplitterStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FSplitterStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSplitterStyle, Z_Construct_UPackage_SlateCore(), TEXT("SplitterStyle"), sizeof(FSplitterStyle), Get_Z_Construct_UScriptStruct_FSplitterStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSplitterStyle(FSplitterStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFSplitterStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFSplitterStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SplitterStyle")),new UScriptStruct::TCppStructOps<FSplitterStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFSplitterStyle;
class UScriptStruct* FSpinBoxStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSpinBoxStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FSpinBoxStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSpinBoxStyle, Z_Construct_UPackage_SlateCore(), TEXT("SpinBoxStyle"), sizeof(FSpinBoxStyle), Get_Z_Construct_UScriptStruct_FSpinBoxStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSpinBoxStyle(FSpinBoxStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFSpinBoxStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFSpinBoxStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SpinBoxStyle")),new UScriptStruct::TCppStructOps<FSpinBoxStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFSpinBoxStyle;
class UScriptStruct* FInlineTextImageStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInlineTextImageStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FInlineTextImageStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FInlineTextImageStyle, Z_Construct_UPackage_SlateCore(), TEXT("InlineTextImageStyle"), sizeof(FInlineTextImageStyle), Get_Z_Construct_UScriptStruct_FInlineTextImageStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FInlineTextImageStyle(FInlineTextImageStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFInlineTextImageStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFInlineTextImageStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("InlineTextImageStyle")),new UScriptStruct::TCppStructOps<FInlineTextImageStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFInlineTextImageStyle;
class UScriptStruct* FVolumeControlStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FVolumeControlStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FVolumeControlStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FVolumeControlStyle, Z_Construct_UPackage_SlateCore(), TEXT("VolumeControlStyle"), sizeof(FVolumeControlStyle), Get_Z_Construct_UScriptStruct_FVolumeControlStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FVolumeControlStyle(FVolumeControlStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFVolumeControlStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFVolumeControlStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("VolumeControlStyle")),new UScriptStruct::TCppStructOps<FVolumeControlStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFVolumeControlStyle;
class UScriptStruct* FSliderStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSliderStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FSliderStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSliderStyle, Z_Construct_UPackage_SlateCore(), TEXT("SliderStyle"), sizeof(FSliderStyle), Get_Z_Construct_UScriptStruct_FSliderStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSliderStyle(FSliderStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFSliderStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFSliderStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SliderStyle")),new UScriptStruct::TCppStructOps<FSliderStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFSliderStyle;
class UScriptStruct* FSearchBoxStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSearchBoxStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FSearchBoxStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSearchBoxStyle, Z_Construct_UPackage_SlateCore(), TEXT("SearchBoxStyle"), sizeof(FSearchBoxStyle), Get_Z_Construct_UScriptStruct_FSearchBoxStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSearchBoxStyle(FSearchBoxStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFSearchBoxStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFSearchBoxStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SearchBoxStyle")),new UScriptStruct::TCppStructOps<FSearchBoxStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFSearchBoxStyle;
class UScriptStruct* FExpandableAreaStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpandableAreaStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FExpandableAreaStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FExpandableAreaStyle, Z_Construct_UPackage_SlateCore(), TEXT("ExpandableAreaStyle"), sizeof(FExpandableAreaStyle), Get_Z_Construct_UScriptStruct_FExpandableAreaStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FExpandableAreaStyle(FExpandableAreaStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFExpandableAreaStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFExpandableAreaStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ExpandableAreaStyle")),new UScriptStruct::TCppStructOps<FExpandableAreaStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFExpandableAreaStyle;
class UScriptStruct* FProgressBarStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FProgressBarStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FProgressBarStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FProgressBarStyle, Z_Construct_UPackage_SlateCore(), TEXT("ProgressBarStyle"), sizeof(FProgressBarStyle), Get_Z_Construct_UScriptStruct_FProgressBarStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FProgressBarStyle(FProgressBarStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFProgressBarStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFProgressBarStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ProgressBarStyle")),new UScriptStruct::TCppStructOps<FProgressBarStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFProgressBarStyle;
class UScriptStruct* FInlineEditableTextBlockStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInlineEditableTextBlockStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FInlineEditableTextBlockStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FInlineEditableTextBlockStyle, Z_Construct_UPackage_SlateCore(), TEXT("InlineEditableTextBlockStyle"), sizeof(FInlineEditableTextBlockStyle), Get_Z_Construct_UScriptStruct_FInlineEditableTextBlockStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FInlineEditableTextBlockStyle(FInlineEditableTextBlockStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFInlineEditableTextBlockStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFInlineEditableTextBlockStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("InlineEditableTextBlockStyle")),new UScriptStruct::TCppStructOps<FInlineEditableTextBlockStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFInlineEditableTextBlockStyle;
class UScriptStruct* FEditableTextBoxStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextBoxStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FEditableTextBoxStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FEditableTextBoxStyle, Z_Construct_UPackage_SlateCore(), TEXT("EditableTextBoxStyle"), sizeof(FEditableTextBoxStyle), Get_Z_Construct_UScriptStruct_FEditableTextBoxStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FEditableTextBoxStyle(FEditableTextBoxStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFEditableTextBoxStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFEditableTextBoxStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("EditableTextBoxStyle")),new UScriptStruct::TCppStructOps<FEditableTextBoxStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFEditableTextBoxStyle;
class UScriptStruct* FScrollBarStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBarStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FScrollBarStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FScrollBarStyle, Z_Construct_UPackage_SlateCore(), TEXT("ScrollBarStyle"), sizeof(FScrollBarStyle), Get_Z_Construct_UScriptStruct_FScrollBarStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FScrollBarStyle(FScrollBarStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFScrollBarStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFScrollBarStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ScrollBarStyle")),new UScriptStruct::TCppStructOps<FScrollBarStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFScrollBarStyle;
class UScriptStruct* FEditableTextStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FEditableTextStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FEditableTextStyle, Z_Construct_UPackage_SlateCore(), TEXT("EditableTextStyle"), sizeof(FEditableTextStyle), Get_Z_Construct_UScriptStruct_FEditableTextStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FEditableTextStyle(FEditableTextStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFEditableTextStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFEditableTextStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("EditableTextStyle")),new UScriptStruct::TCppStructOps<FEditableTextStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFEditableTextStyle;
class UScriptStruct* FHyperlinkStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FHyperlinkStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FHyperlinkStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FHyperlinkStyle, Z_Construct_UPackage_SlateCore(), TEXT("HyperlinkStyle"), sizeof(FHyperlinkStyle), Get_Z_Construct_UScriptStruct_FHyperlinkStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FHyperlinkStyle(FHyperlinkStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFHyperlinkStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFHyperlinkStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("HyperlinkStyle")),new UScriptStruct::TCppStructOps<FHyperlinkStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFHyperlinkStyle;
class UScriptStruct* FComboBoxStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FComboBoxStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FComboBoxStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FComboBoxStyle, Z_Construct_UPackage_SlateCore(), TEXT("ComboBoxStyle"), sizeof(FComboBoxStyle), Get_Z_Construct_UScriptStruct_FComboBoxStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FComboBoxStyle(FComboBoxStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFComboBoxStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFComboBoxStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ComboBoxStyle")),new UScriptStruct::TCppStructOps<FComboBoxStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFComboBoxStyle;
class UScriptStruct* FComboButtonStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FComboButtonStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FComboButtonStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FComboButtonStyle, Z_Construct_UPackage_SlateCore(), TEXT("ComboButtonStyle"), sizeof(FComboButtonStyle), Get_Z_Construct_UScriptStruct_FComboButtonStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FComboButtonStyle(FComboButtonStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFComboButtonStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFComboButtonStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ComboButtonStyle")),new UScriptStruct::TCppStructOps<FComboButtonStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFComboButtonStyle;
class UScriptStruct* FButtonStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FButtonStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FButtonStyle, Z_Construct_UPackage_SlateCore(), TEXT("ButtonStyle"), sizeof(FButtonStyle), Get_Z_Construct_UScriptStruct_FButtonStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FButtonStyle(FButtonStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFButtonStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFButtonStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ButtonStyle")),new UScriptStruct::TCppStructOps<FButtonStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFButtonStyle;
class UScriptStruct* FTextBlockStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextBlockStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FTextBlockStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTextBlockStyle, Z_Construct_UPackage_SlateCore(), TEXT("TextBlockStyle"), sizeof(FTextBlockStyle), Get_Z_Construct_UScriptStruct_FTextBlockStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTextBlockStyle(FTextBlockStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFTextBlockStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFTextBlockStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TextBlockStyle")),new UScriptStruct::TCppStructOps<FTextBlockStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFTextBlockStyle;
class UScriptStruct* FCheckBoxStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCheckBoxStyle();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FCheckBoxStyle_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FCheckBoxStyle, Z_Construct_UPackage_SlateCore(), TEXT("CheckBoxStyle"), sizeof(FCheckBoxStyle), Get_Z_Construct_UScriptStruct_FCheckBoxStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FCheckBoxStyle(FCheckBoxStyle::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFCheckBoxStyle
{
	FScriptStruct_SlateCore_StaticRegisterNativesFCheckBoxStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("CheckBoxStyle")),new UScriptStruct::TCppStructOps<FCheckBoxStyle>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFCheckBoxStyle;
	void USlateTypes::StaticRegisterNativesUSlateTypes()
	{
	}
	IMPLEMENT_CLASS(USlateTypes, 997243422);
	void USlateWidgetStyleContainerInterface::StaticRegisterNativesUSlateWidgetStyleContainerInterface()
	{
	}
	IMPLEMENT_CLASS(USlateWidgetStyleContainerInterface, 3403714639);
	void USlateWidgetStyleContainerBase::StaticRegisterNativesUSlateWidgetStyleContainerBase()
	{
	}
	IMPLEMENT_CLASS(USlateWidgetStyleContainerBase, 923336298);
	void USlateWidgetStyleAsset::StaticRegisterNativesUSlateWidgetStyleAsset()
	{
	}
	IMPLEMENT_CLASS(USlateWidgetStyleAsset, 2000491127);
static class UEnum* EFocusCause_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EFocusCause();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EFocusCause, Z_Construct_UPackage_SlateCore(), TEXT("EFocusCause"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EFocusCause(EFocusCause_StaticEnum, TEXT("/Script/SlateCore"));
class UScriptStruct* FNavigationEvent::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationEvent();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FNavigationEvent_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FNavigationEvent, Z_Construct_UPackage_SlateCore(), TEXT("NavigationEvent"), sizeof(FNavigationEvent), Get_Z_Construct_UScriptStruct_FNavigationEvent_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FNavigationEvent(FNavigationEvent::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFNavigationEvent
{
	FScriptStruct_SlateCore_StaticRegisterNativesFNavigationEvent()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("NavigationEvent")),new UScriptStruct::TCppStructOps<FNavigationEvent>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFNavigationEvent;
class UScriptStruct* FMotionEvent::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FMotionEvent();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FMotionEvent_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FMotionEvent, Z_Construct_UPackage_SlateCore(), TEXT("MotionEvent"), sizeof(FMotionEvent), Get_Z_Construct_UScriptStruct_FMotionEvent_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FMotionEvent(FMotionEvent::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFMotionEvent
{
	FScriptStruct_SlateCore_StaticRegisterNativesFMotionEvent()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("MotionEvent")),new UScriptStruct::TCppStructOps<FMotionEvent>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFMotionEvent;
class UScriptStruct* FControllerEvent::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FControllerEvent();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FControllerEvent_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FControllerEvent, Z_Construct_UPackage_SlateCore(), TEXT("ControllerEvent"), sizeof(FControllerEvent), Get_Z_Construct_UScriptStruct_FControllerEvent_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FControllerEvent(FControllerEvent::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFControllerEvent
{
	FScriptStruct_SlateCore_StaticRegisterNativesFControllerEvent()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ControllerEvent")),new UScriptStruct::TCppStructOps<FControllerEvent>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFControllerEvent;
class UScriptStruct* FPointerEvent::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerEvent();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FPointerEvent_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FPointerEvent, Z_Construct_UPackage_SlateCore(), TEXT("PointerEvent"), sizeof(FPointerEvent), Get_Z_Construct_UScriptStruct_FPointerEvent_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FPointerEvent(FPointerEvent::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFPointerEvent
{
	FScriptStruct_SlateCore_StaticRegisterNativesFPointerEvent()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("PointerEvent")),new UScriptStruct::TCppStructOps<FPointerEvent>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFPointerEvent;
class UScriptStruct* FCharacterEvent::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCharacterEvent();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FCharacterEvent_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FCharacterEvent, Z_Construct_UPackage_SlateCore(), TEXT("CharacterEvent"), sizeof(FCharacterEvent), Get_Z_Construct_UScriptStruct_FCharacterEvent_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FCharacterEvent(FCharacterEvent::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFCharacterEvent
{
	FScriptStruct_SlateCore_StaticRegisterNativesFCharacterEvent()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("CharacterEvent")),new UScriptStruct::TCppStructOps<FCharacterEvent>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFCharacterEvent;
class UScriptStruct* FAnalogInputEvent::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnalogInputEvent();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FAnalogInputEvent_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnalogInputEvent, Z_Construct_UPackage_SlateCore(), TEXT("AnalogInputEvent"), sizeof(FAnalogInputEvent), Get_Z_Construct_UScriptStruct_FAnalogInputEvent_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnalogInputEvent(FAnalogInputEvent::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFAnalogInputEvent
{
	FScriptStruct_SlateCore_StaticRegisterNativesFAnalogInputEvent()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnalogInputEvent")),new UScriptStruct::TCppStructOps<FAnalogInputEvent>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFAnalogInputEvent;
class UScriptStruct* FKeyEvent::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FKeyEvent_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FKeyEvent, Z_Construct_UPackage_SlateCore(), TEXT("KeyEvent"), sizeof(FKeyEvent), Get_Z_Construct_UScriptStruct_FKeyEvent_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FKeyEvent(FKeyEvent::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFKeyEvent
{
	FScriptStruct_SlateCore_StaticRegisterNativesFKeyEvent()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("KeyEvent")),new UScriptStruct::TCppStructOps<FKeyEvent>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFKeyEvent;
class UScriptStruct* FInputEvent::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputEvent();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FInputEvent_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FInputEvent, Z_Construct_UPackage_SlateCore(), TEXT("InputEvent"), sizeof(FInputEvent), Get_Z_Construct_UScriptStruct_FInputEvent_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FInputEvent(FInputEvent::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFInputEvent
{
	FScriptStruct_SlateCore_StaticRegisterNativesFInputEvent()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("InputEvent")),new UScriptStruct::TCppStructOps<FInputEvent>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFInputEvent;
class UScriptStruct* FFocusEvent::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FFocusEvent();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FFocusEvent_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FFocusEvent, Z_Construct_UPackage_SlateCore(), TEXT("FocusEvent"), sizeof(FFocusEvent), Get_Z_Construct_UScriptStruct_FFocusEvent_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FFocusEvent(FFocusEvent::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFFocusEvent
{
	FScriptStruct_SlateCore_StaticRegisterNativesFFocusEvent()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("FocusEvent")),new UScriptStruct::TCppStructOps<FFocusEvent>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFFocusEvent;
static class UEnum* EUINavigationRule_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EUINavigationRule();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticEnum(Z_Construct_UEnum_SlateCore_EUINavigationRule, Z_Construct_UPackage_SlateCore(), TEXT("EUINavigationRule"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EUINavigationRule(EUINavigationRule_StaticEnum, TEXT("/Script/SlateCore"));
class UScriptStruct* FGeometry::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FGeometry();
		extern SLATECORE_API uint32 Get_Z_Construct_UScriptStruct_FGeometry_CRC();
		extern SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGeometry, Z_Construct_UPackage_SlateCore(), TEXT("Geometry"), sizeof(FGeometry), Get_Z_Construct_UScriptStruct_FGeometry_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGeometry(FGeometry::StaticStruct, TEXT("/Script/SlateCore"));
static struct FScriptStruct_SlateCore_StaticRegisterNativesFGeometry
{
	FScriptStruct_SlateCore_StaticRegisterNativesFGeometry()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("Geometry")),new UScriptStruct::TCppStructOps<FGeometry>);
	}
} ScriptStruct_SlateCore_StaticRegisterNativesFGeometry;
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FInt32Range();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FBox2D();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();

	SLATECORE_API class UClass* Z_Construct_UClass_UFontBulkData_NoRegister();
	SLATECORE_API class UClass* Z_Construct_UClass_UFontBulkData();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EFontHinting();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeFont();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCompositeSubFont();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTypeface();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTypefaceEntry();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FFontData();
	SLATECORE_API class UClass* Z_Construct_UClass_UFontProviderInterface_NoRegister();
	SLATECORE_API class UClass* Z_Construct_UClass_UFontProviderInterface();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateSound();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESelectInfo();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ETextCommit();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EScrollDirection();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EOrientation();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EMenuPlacement();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EVerticalAlignment();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EHorizontalAlignment();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EUINavigation();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonPressMethod();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonTouchMethod();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonClickMethod();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FMargin();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateColorStylingMode();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateColor();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushImageType();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushMirrorType();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushTileType();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushDrawType();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateBrush();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateWidgetStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateFontInfo();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ECheckBoxState();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESlateCheckBoxType();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EConsumeMouseWheel();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FWindowStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBorderStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FDockTabStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FHeaderRowStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableColumnHeaderStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTableRowStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSplitterStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSpinBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInlineTextImageStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FVolumeControlStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSliderStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSearchBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FExpandableAreaStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FProgressBarStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInlineEditableTextBlockStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBarStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FHyperlinkStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FComboBoxStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FComboButtonStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextBlockStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCheckBoxStyle();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateTypes_NoRegister();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateTypes();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleContainerInterface_NoRegister();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleContainerInterface();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleContainerBase_NoRegister();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleContainerBase();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleAsset();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EFocusCause();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FMotionEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FControllerEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCharacterEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnalogInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FFocusEvent();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EUINavigationRule();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FGeometry();
	SLATECORE_API class UPackage* Z_Construct_UPackage_SlateCore();
	UClass* Z_Construct_UClass_UFontBulkData_NoRegister()
	{
		return UFontBulkData::StaticClass();
	}
	UClass* Z_Construct_UClass_UFontBulkData()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_SlateCore();
			OuterClass = UFontBulkData::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Fonts/FontBulkData.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/FontBulkData.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFontBulkData(Z_Construct_UClass_UFontBulkData, TEXT("UFontBulkData"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFontBulkData);
	UEnum* Z_Construct_UEnum_SlateCore_EFontHinting()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EFontHinting_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EFontHinting"), 0, Get_Z_Construct_UEnum_SlateCore_EFontHinting_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFontHinting"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFontHinting::Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFontHinting::Auto")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFontHinting::AutoLight")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFontHinting::Monochrome")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFontHinting::None")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFontHinting::EFontHinting_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Auto.ToolTip"), TEXT("Force the use of an automatic hinting algorithm."));
			MetaData->SetValue(ReturnEnum, TEXT("AutoLight.ToolTip"), TEXT("Force the use of an automatic light hinting algorithm, optimized for non-monochrome displays."));
			MetaData->SetValue(ReturnEnum, TEXT("Default.ToolTip"), TEXT("Use the default hinting specified in the font."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Monochrome.ToolTip"), TEXT("Force the use of an automatic hinting algorithm optimized for monochrome displays."));
			MetaData->SetValue(ReturnEnum, TEXT("None.ToolTip"), TEXT("Do not use hinting."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EFontHinting_CRC() { return 1885856707U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCompositeFont()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FCompositeFont_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CompositeFont"), sizeof(FCompositeFont), Get_Z_Construct_UScriptStruct_FCompositeFont_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CompositeFont"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCompositeFont>, EStructFlags(0x00000201));
			UProperty* NewProp_SubTypefaces = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SubTypefaces"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(SubTypefaces, FCompositeFont), 0x0000000000000005);
			UProperty* NewProp_SubTypefaces_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SubTypefaces, TEXT("SubTypefaces"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FCompositeSubFont());
			UProperty* NewProp_DefaultTypeface = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultTypeface"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultTypeface, FCompositeFont), 0x0000000000000005, Z_Construct_UScriptStruct_FTypeface());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_SubTypefaces, TEXT("Category"), TEXT("RuntimeFont"));
			MetaData->SetValue(NewProp_SubTypefaces, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_SubTypefaces, TEXT("ToolTip"), TEXT("Sub-typefaces to use for a specific set of characters"));
			MetaData->SetValue(NewProp_DefaultTypeface, TEXT("Category"), TEXT("RuntimeFont"));
			MetaData->SetValue(NewProp_DefaultTypeface, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_DefaultTypeface, TEXT("ToolTip"), TEXT("The default typeface that will be used when not overridden by a sub-typeface"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCompositeFont_CRC() { return 2561085166U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCompositeSubFont()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FCompositeSubFont_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CompositeSubFont"), sizeof(FCompositeSubFont), Get_Z_Construct_UScriptStruct_FCompositeSubFont_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CompositeSubFont"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FCompositeSubFont>, EStructFlags(0x00000201));
#if WITH_EDITORONLY_DATA
			UProperty* NewProp_EditorName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EditorName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(EditorName, FCompositeSubFont), 0x0000000800000000);
#endif // WITH_EDITORONLY_DATA
			UProperty* NewProp_ScalingFactor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScalingFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ScalingFactor, FCompositeSubFont), 0x0000000000000005);
			UProperty* NewProp_CharacterRanges = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CharacterRanges"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(CharacterRanges, FCompositeSubFont), 0x0000000000000005);
			UProperty* NewProp_CharacterRanges_Inner = new(EC_InternalUseOnlyConstructor, NewProp_CharacterRanges, TEXT("CharacterRanges"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FInt32Range());
			UProperty* NewProp_Typeface = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Typeface"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Typeface, FCompositeSubFont), 0x0000000000000005, Z_Construct_UScriptStruct_FTypeface());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_EditorName, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_EditorName, TEXT("ToolTip"), TEXT("Name of this sub-font. Only used by the editor UI as a convenience to let you state the purpose of the font family."));
			MetaData->SetValue(NewProp_ScalingFactor, TEXT("Category"), TEXT("Font"));
			MetaData->SetValue(NewProp_ScalingFactor, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_ScalingFactor, TEXT("ToolTip"), TEXT("Amount to scale this sub-font so that it better matches the size of the default font"));
			MetaData->SetValue(NewProp_CharacterRanges, TEXT("Category"), TEXT("Font"));
			MetaData->SetValue(NewProp_CharacterRanges, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_CharacterRanges, TEXT("ToolTip"), TEXT("Array of character ranges for which this sub-font should be used"));
			MetaData->SetValue(NewProp_Typeface, TEXT("Category"), TEXT("Font"));
			MetaData->SetValue(NewProp_Typeface, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_Typeface, TEXT("ToolTip"), TEXT("Typeface data for this sub-font"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCompositeSubFont_CRC() { return 1853939800U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTypeface()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FTypeface_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("Typeface"), sizeof(FTypeface), Get_Z_Construct_UScriptStruct_FTypeface_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Typeface"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTypeface>, EStructFlags(0x00000201));
			UProperty* NewProp_Fonts = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Fonts"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Fonts, FTypeface), 0x0000000000000005);
			UProperty* NewProp_Fonts_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Fonts, TEXT("Fonts"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTypefaceEntry());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Definition for a typeface (a family of fonts)"));
			MetaData->SetValue(NewProp_Fonts, TEXT("Category"), TEXT("Font"));
			MetaData->SetValue(NewProp_Fonts, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_Fonts, TEXT("ToolTip"), TEXT("The fonts contained within this family"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTypeface_CRC() { return 1189060184U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTypefaceEntry()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FTypefaceEntry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TypefaceEntry"), sizeof(FTypefaceEntry), Get_Z_Construct_UScriptStruct_FTypefaceEntry_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TypefaceEntry"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTypefaceEntry>, EStructFlags(0x00000201));
			UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font, FTypefaceEntry), 0x0000000000000005, Z_Construct_UScriptStruct_FFontData());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FTypefaceEntry), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A single entry in a typeface"));
			MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Font"));
			MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Raw font data for this font"));
			MetaData->SetValue(NewProp_Name, TEXT("Category"), TEXT("Font"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ToolTip"), TEXT("Name used to identify this font within its typeface"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTypefaceEntry_CRC() { return 3487931856U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFontData()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FFontData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FontData"), sizeof(FFontData), Get_Z_Construct_UScriptStruct_FFontData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FontData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFontData>, EStructFlags(0x00000201));
			UProperty* NewProp_FontData = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FontData"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FontData_DEPRECATED, FFontData), 0x0000000020000000);
			UProperty* NewProp_FontData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FontData, TEXT("FontData"), RF_Public|RF_Transient|RF_Native) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000020000000);
			UProperty* NewProp_Hinting = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Hinting"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Hinting, FFontData), 0x0000000000000005, Z_Construct_UEnum_SlateCore_EFontHinting());
			UProperty* NewProp_BulkDataPtr = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BulkDataPtr"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BulkDataPtr, FFontData), 0x0000000000000000, Z_Construct_UClass_UFontBulkData_NoRegister());
			UProperty* NewProp_FontFilename = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FontFilename"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(FontFilename, FFontData), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Payload data describing an individual font in a typeface."));
			MetaData->SetValue(NewProp_FontData, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_FontData, TEXT("ToolTip"), TEXT("The data associated with the font - this should always be filled in providing the source font filename is valid"));
			MetaData->SetValue(NewProp_Hinting, TEXT("Category"), TEXT("Font"));
			MetaData->SetValue(NewProp_Hinting, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_Hinting, TEXT("ToolTip"), TEXT("The hinting algorithm to use with the font"));
			MetaData->SetValue(NewProp_BulkDataPtr, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_BulkDataPtr, TEXT("ToolTip"), TEXT("The data associated with the font"));
			MetaData->SetValue(NewProp_FontFilename, TEXT("Category"), TEXT("Font"));
			MetaData->SetValue(NewProp_FontFilename, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/CompositeFont.h"));
			MetaData->SetValue(NewProp_FontFilename, TEXT("ToolTip"), TEXT("The filename of the font to use - this may not always exist on disk, as we may have previously loaded and cached the font data inside an asset"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFontData_CRC() { return 1843906685U; }
	UClass* Z_Construct_UClass_UFontProviderInterface_NoRegister()
	{
		return UFontProviderInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UFontProviderInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_SlateCore();
			OuterClass = UFontProviderInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20084081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFontProviderInterface(Z_Construct_UClass_UFontProviderInterface, TEXT("UFontProviderInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFontProviderInterface);
	UScriptStruct* Z_Construct_UScriptStruct_FSlateSound()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FSlateSound_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SlateSound"), sizeof(FSlateSound), Get_Z_Construct_UScriptStruct_FSlateSound_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlateSound"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSlateSound>, EStructFlags(0x00000201));
			UProperty* NewProp_ResourceObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResourceObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ResourceObject, FSlateSound), 0x0000080000000005, Z_Construct_UClass_UObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Sound/SlateSound.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An intermediary to make UBaseSound available for Slate to play sounds"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("AllowedClasses"), TEXT("SoundBase"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("DisplayName"), TEXT("Sound"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("ModuleRelativePath"), TEXT("Public/Sound/SlateSound.h"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("ToolTip"), TEXT("Pointer to the USoundBase. Holding onto it as a UObject because USoundBase is not available in Slate core.\nEdited via FSlateSoundStructCustomization to ensure you can only set USoundBase assets on it."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSlateSound_CRC() { return 754355043U; }
	UEnum* Z_Construct_UEnum_SlateCore_ESelectInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_ESelectInfo_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESelectInfo"), 0, Get_Z_Construct_UEnum_SlateCore_ESelectInfo_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESelectInfo"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESelectInfo::OnKeyPress")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESelectInfo::OnNavigation")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESelectInfo::OnMouseClick")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESelectInfo::Direct")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESelectInfo::ESelectInfo_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Direct.ToolTip"), TEXT("Selection was directly set in code"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("OnKeyPress.ToolTip"), TEXT("User selected via a key press"));
			MetaData->SetValue(ReturnEnum, TEXT("OnMouseClick.ToolTip"), TEXT("User selected by clicking on the item"));
			MetaData->SetValue(ReturnEnum, TEXT("OnNavigation.ToolTip"), TEXT("User selected by navigating to the item"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Additional information about a selection event"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_ESelectInfo_CRC() { return 1214836284U; }
	UEnum* Z_Construct_UEnum_SlateCore_ETextCommit()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_ETextCommit_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETextCommit"), 0, Get_Z_Construct_UEnum_SlateCore_ETextCommit_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextCommit"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextCommit::Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextCommit::OnEnter")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextCommit::OnUserMovedFocus")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextCommit::OnCleared")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETextCommit::ETextCommit_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Default.ToolTip"), TEXT("Losing focus or similar event caused implicit commit"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("OnCleared.ToolTip"), TEXT("Keyboard focus was explicitly cleared via the escape key or other similar action"));
			MetaData->SetValue(ReturnEnum, TEXT("OnEnter.ToolTip"), TEXT("User committed via the enter key"));
			MetaData->SetValue(ReturnEnum, TEXT("OnUserMovedFocus.ToolTip"), TEXT("User committed via tabbing away or moving focus explicitly away"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Additional information about a text committal"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_ETextCommit_CRC() { return 3571905397U; }
	UEnum* Z_Construct_UEnum_SlateCore_EScrollDirection()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EScrollDirection_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EScrollDirection"), 0, Get_Z_Construct_UEnum_SlateCore_EScrollDirection_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EScrollDirection"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Scroll_Down")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Scroll_Up")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Scroll_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll_Down.DisplayName"), TEXT("Down"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll_Down.ToolTip"), TEXT("Scroll down."));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll_Up.DisplayName"), TEXT("Up"));
			MetaData->SetValue(ReturnEnum, TEXT("Scroll_Up.ToolTip"), TEXT("Scroll up."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates scroll directions."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EScrollDirection_CRC() { return 1622203273U; }
	UEnum* Z_Construct_UEnum_SlateCore_EOrientation()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EOrientation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EOrientation"), 0, Get_Z_Construct_UEnum_SlateCore_EOrientation_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EOrientation"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Orient_Horizontal")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Orient_Vertical")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Orient_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Orient_Horizontal.DisplayName"), TEXT("Horizontal"));
			MetaData->SetValue(ReturnEnum, TEXT("Orient_Horizontal.ToolTip"), TEXT("Orient horizontally, i.e. left to right."));
			MetaData->SetValue(ReturnEnum, TEXT("Orient_Vertical.DisplayName"), TEXT("Vertical"));
			MetaData->SetValue(ReturnEnum, TEXT("Orient_Vertical.ToolTip"), TEXT("Orient vertically, i.e. top to bottom."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates widget orientations."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EOrientation_CRC() { return 2277117788U; }
	UEnum* Z_Construct_UEnum_SlateCore_EMenuPlacement()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EMenuPlacement_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EMenuPlacement"), 0, Get_Z_Construct_UEnum_SlateCore_EMenuPlacement_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMenuPlacement"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MenuPlacement_BelowAnchor")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MenuPlacement_CenteredBelowAnchor")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MenuPlacement_ComboBox")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MenuPlacement_ComboBoxRight")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MenuPlacement_MenuRight")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MenuPlacement_AboveAnchor")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MenuPlacement_CenteredAboveAnchor")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MenuPlacement_MenuLeft")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MenuPlacement_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_AboveAnchor.DisplayName"), TEXT("Above"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_AboveAnchor.ToolTip"), TEXT("Place the menu immediately above the anchor, no transition effect"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_BelowAnchor.DisplayName"), TEXT("Below"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_BelowAnchor.ToolTip"), TEXT("Place the menu immediately below the anchor"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_CenteredAboveAnchor.DisplayName"), TEXT("Centered Above"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_CenteredAboveAnchor.ToolTip"), TEXT("Place the menu immediately centered above the anchor, no transition effect"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_CenteredBelowAnchor.DisplayName"), TEXT("Centered Below"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_CenteredBelowAnchor.ToolTip"), TEXT("Place the menu immediately centered below the anchor"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_ComboBox.DisplayName"), TEXT("Combo Box"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_ComboBox.ToolTip"), TEXT("Place the menu immediately below the anchor and match is width to the anchor's content"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_ComboBoxRight.DisplayName"), TEXT("Combo Box Right"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_ComboBoxRight.ToolTip"), TEXT("Place the menu immediately below the anchor and match is width to the anchor's content. If the width overflows, align with the right edge of the anchor."));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_MenuLeft.DisplayName"), TEXT("Left"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_MenuLeft.ToolTip"), TEXT("Place the menu to the left of the anchor"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_MenuRight.DisplayName"), TEXT("Right"));
			MetaData->SetValue(ReturnEnum, TEXT("MenuPlacement_MenuRight.ToolTip"), TEXT("Place the menu to the right of the anchor"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates possible placements for pop-up menus."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EMenuPlacement_CRC() { return 3408368579U; }
	UEnum* Z_Construct_UEnum_SlateCore_EVerticalAlignment()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EVerticalAlignment_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EVerticalAlignment"), 0, Get_Z_Construct_UEnum_SlateCore_EVerticalAlignment_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VAlign_Fill")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VAlign_Top")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VAlign_Center")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VAlign_Bottom")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("VAlign_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates vertical alignment options, i.e. for widget slots."));
			MetaData->SetValue(ReturnEnum, TEXT("VAlign_Bottom.DisplayName"), TEXT("Bottom"));
			MetaData->SetValue(ReturnEnum, TEXT("VAlign_Bottom.ToolTip"), TEXT("Bottom-align."));
			MetaData->SetValue(ReturnEnum, TEXT("VAlign_Center.DisplayName"), TEXT("Center"));
			MetaData->SetValue(ReturnEnum, TEXT("VAlign_Center.ToolTip"), TEXT("Center-align."));
			MetaData->SetValue(ReturnEnum, TEXT("VAlign_Fill.DisplayName"), TEXT("Fill"));
			MetaData->SetValue(ReturnEnum, TEXT("VAlign_Fill.ToolTip"), TEXT("Fill the entire height."));
			MetaData->SetValue(ReturnEnum, TEXT("VAlign_Top.DisplayName"), TEXT("Top"));
			MetaData->SetValue(ReturnEnum, TEXT("VAlign_Top.ToolTip"), TEXT("Top-align."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EVerticalAlignment_CRC() { return 2203853841U; }
	UEnum* Z_Construct_UEnum_SlateCore_EHorizontalAlignment()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EHorizontalAlignment_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EHorizontalAlignment"), 0, Get_Z_Construct_UEnum_SlateCore_EHorizontalAlignment_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HAlign_Fill")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HAlign_Left")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HAlign_Center")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HAlign_Right")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("HAlign_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("HAlign_Center.DisplayName"), TEXT("Center"));
			MetaData->SetValue(ReturnEnum, TEXT("HAlign_Center.ToolTip"), TEXT("Center-align."));
			MetaData->SetValue(ReturnEnum, TEXT("HAlign_Fill.DisplayName"), TEXT("Fill"));
			MetaData->SetValue(ReturnEnum, TEXT("HAlign_Fill.ToolTip"), TEXT("Fill the entire width."));
			MetaData->SetValue(ReturnEnum, TEXT("HAlign_Left.DisplayName"), TEXT("Left"));
			MetaData->SetValue(ReturnEnum, TEXT("HAlign_Left.ToolTip"), TEXT("Left-align."));
			MetaData->SetValue(ReturnEnum, TEXT("HAlign_Right.DisplayName"), TEXT("Right"));
			MetaData->SetValue(ReturnEnum, TEXT("HAlign_Right.ToolTip"), TEXT("Right-align."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates horizontal alignment options, i.e. for widget slots."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EHorizontalAlignment_CRC() { return 204202352U; }
	UEnum* Z_Construct_UEnum_SlateCore_EUINavigation()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EUINavigation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EUINavigation"), 0, Get_Z_Construct_UEnum_SlateCore_EUINavigation_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EUINavigation"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigation::Left")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigation::Right")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigation::Up")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigation::Down")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigation::Next")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigation::Previous")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigation::Num")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigation::Invalid")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigation::EUINavigation_MAX")), 8));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Invalid.ToolTip"), TEXT("Denotes an invalid navigation, more important used to denote no specified navigation"));
			MetaData->SetValue(ReturnEnum, TEXT("Left.ToolTip"), TEXT("Four cardinal directions"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Next.ToolTip"), TEXT("Conceptual next and previous"));
			MetaData->SetValue(ReturnEnum, TEXT("Num.ToolTip"), TEXT("Number of navigation types"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Navigation context for event"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EUINavigation_CRC() { return 2505321561U; }
	UEnum* Z_Construct_UEnum_SlateCore_EButtonPressMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EButtonPressMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EButtonPressMethod"), 0, Get_Z_Construct_UEnum_SlateCore_EButtonPressMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EButtonPressMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonPressMethod::DownAndUp")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonPressMethod::ButtonPress")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonPressMethod::ButtonRelease")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonPressMethod::EButtonPressMethod_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ButtonPress.ToolTip"), TEXT("Click will be triggered immediately on button press."));
			MetaData->SetValue(ReturnEnum, TEXT("ButtonRelease.ToolTip"), TEXT("Click will always be triggered when a button release occurs on the focused button,\neven if the button wasn't pressed while focused."));
			MetaData->SetValue(ReturnEnum, TEXT("DownAndUp.ToolTip"), TEXT("User must press the button, then release while the button has focus to trigger the click.\nThis is the most common type of button."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates different methods that a button can be triggered with keyboard/controller. Normally, DownAndUp is appropriate."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EButtonPressMethod_CRC() { return 770003072U; }
	UEnum* Z_Construct_UEnum_SlateCore_EButtonTouchMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EButtonTouchMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EButtonTouchMethod"), 0, Get_Z_Construct_UEnum_SlateCore_EButtonTouchMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EButtonTouchMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonTouchMethod::DownAndUp")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonTouchMethod::PreciseTap")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonTouchMethod::EButtonTouchMethod_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("DownAndUp.ToolTip"), TEXT("Most buttons behave this way."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PreciseTap.ToolTip"), TEXT("Inside a list, buttons can only be clicked with precise tap.\nMoving the pointer will scroll the list."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Ways in which touch interactions trigger a \"Clicked\" event."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EButtonTouchMethod_CRC() { return 2886022152U; }
	UEnum* Z_Construct_UEnum_SlateCore_EButtonClickMethod()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EButtonClickMethod_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EButtonClickMethod"), 0, Get_Z_Construct_UEnum_SlateCore_EButtonClickMethod_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EButtonClickMethod"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonClickMethod::DownAndUp")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonClickMethod::MouseDown")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonClickMethod::MouseUp")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonClickMethod::PreciseClick")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EButtonClickMethod::EButtonClickMethod_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("DownAndUp.ToolTip"), TEXT("User must press the button, then release while over the button to trigger the click.\nThis is the most common type of button."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Types/SlateEnums.h"));
			MetaData->SetValue(ReturnEnum, TEXT("MouseDown.ToolTip"), TEXT("Click will be triggered immediately on mouse down, and mouse will not be captured."));
			MetaData->SetValue(ReturnEnum, TEXT("MouseUp.ToolTip"), TEXT("Click will always be triggered when mouse button is released over the button,\neven if the button wasn't pressed down over it."));
			MetaData->SetValue(ReturnEnum, TEXT("PreciseClick.ToolTip"), TEXT("Inside a list, buttons can only be clicked with precise tap.\nMoving the pointer will scroll the list, also allows drag-droppable buttons."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates different methods that a button click can be triggered. Normally, DownAndUp is appropriate."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EButtonClickMethod_CRC() { return 1447958787U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMargin()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FMargin_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("Margin"), sizeof(FMargin), Get_Z_Construct_UScriptStruct_FMargin_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Margin"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FMargin>, EStructFlags(0x00000001));
			UProperty* NewProp_Bottom = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Bottom"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Bottom, FMargin), 0x0000000000000005);
			UProperty* NewProp_Right = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Right"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Right, FMargin), 0x0000000000000005);
			UProperty* NewProp_Top = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Top"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Top, FMargin), 0x0000000000000005);
			UProperty* NewProp_Left = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Left"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Left, FMargin), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Layout/Margin.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Describes the space around a Widget."));
			MetaData->SetValue(NewProp_Bottom, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Bottom, TEXT("ModuleRelativePath"), TEXT("Public/Layout/Margin.h"));
			MetaData->SetValue(NewProp_Bottom, TEXT("ToolTip"), TEXT("Holds the margin to the bottom."));
			MetaData->SetValue(NewProp_Right, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Right, TEXT("ModuleRelativePath"), TEXT("Public/Layout/Margin.h"));
			MetaData->SetValue(NewProp_Right, TEXT("ToolTip"), TEXT("Holds the margin to the right."));
			MetaData->SetValue(NewProp_Top, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Top, TEXT("ModuleRelativePath"), TEXT("Public/Layout/Margin.h"));
			MetaData->SetValue(NewProp_Top, TEXT("ToolTip"), TEXT("Holds the margin to the top."));
			MetaData->SetValue(NewProp_Left, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Left, TEXT("ModuleRelativePath"), TEXT("Public/Layout/Margin.h"));
			MetaData->SetValue(NewProp_Left, TEXT("ToolTip"), TEXT("Holds the margin to the left."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMargin_CRC() { return 3416022813U; }
	UEnum* Z_Construct_UEnum_SlateCore_ESlateColorStylingMode()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_ESlateColorStylingMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESlateColorStylingMode"), 0, Get_Z_Construct_UEnum_SlateCore_ESlateColorStylingMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESlateColorStylingMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateColorStylingMode::UseColor_Specified")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateColorStylingMode::UseColor_Specified_Link")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateColorStylingMode::UseColor_Foreground")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateColorStylingMode::UseColor_Foreground_Subdued")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateColorStylingMode::UseColor_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateColor.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates types of color values that can be held by Slate color.\n\nShould we use the specified color? If not, then which color from the style should we use."));
			MetaData->SetValue(ReturnEnum, TEXT("UseColor_Foreground.DisplayName"), TEXT("Foreground Color"));
			MetaData->SetValue(ReturnEnum, TEXT("UseColor_Foreground.ToolTip"), TEXT("Use the widget's foreground color."));
			MetaData->SetValue(ReturnEnum, TEXT("UseColor_Foreground_Subdued.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("UseColor_Foreground_Subdued.ToolTip"), TEXT("Use the widget's subdued color."));
			MetaData->SetValue(ReturnEnum, TEXT("UseColor_Specified.DisplayName"), TEXT("Specified Color"));
			MetaData->SetValue(ReturnEnum, TEXT("UseColor_Specified.ToolTip"), TEXT("Color value is stored in this Slate color."));
			MetaData->SetValue(ReturnEnum, TEXT("UseColor_Specified_Link.Hidden"), TEXT(""));
			MetaData->SetValue(ReturnEnum, TEXT("UseColor_Specified_Link.ToolTip"), TEXT("Color value is stored in the linked color."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_ESlateColorStylingMode_CRC() { return 2028702456U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSlateColor()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FSlateColor_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SlateColor"), sizeof(FSlateColor), Get_Z_Construct_UScriptStruct_FSlateColor_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlateColor"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSlateColor>, EStructFlags(0x00000201));
			UProperty* NewProp_ColorUseRule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColorUseRule"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ColorUseRule, FSlateColor), 0x0000080000000005, Z_Construct_UEnum_SlateCore_ESlateColorStylingMode());
			UProperty* NewProp_SpecifiedColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SpecifiedColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SpecifiedColor, FSlateColor), 0x0000080000000005, Z_Construct_UScriptStruct_FLinearColor());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateColor.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A Slate color can be a directly specified value, or the color can be pulled from a WidgetStyle."));
			MetaData->SetValue(NewProp_ColorUseRule, TEXT("Category"), TEXT("Color"));
			MetaData->SetValue(NewProp_ColorUseRule, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateColor.h"));
			MetaData->SetValue(NewProp_ColorUseRule, TEXT("ToolTip"), TEXT("The rule for which color to pick."));
			MetaData->SetValue(NewProp_SpecifiedColor, TEXT("Category"), TEXT("Color"));
			MetaData->SetValue(NewProp_SpecifiedColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateColor.h"));
			MetaData->SetValue(NewProp_SpecifiedColor, TEXT("ToolTip"), TEXT("The current specified color; only meaningful when ColorToUse == UseColor_Specified."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSlateColor_CRC() { return 3185911825U; }
	UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushImageType()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_ESlateBrushImageType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESlateBrushImageType"), 0, Get_Z_Construct_UEnum_SlateCore_ESlateBrushImageType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESlateBrushImageType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushImageType::NoImage")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushImageType::FullColor")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushImageType::Linear")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushImageType::ESlateBrushImageType_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("FullColor.ToolTip"), TEXT("The image to be loaded is in full color."));
			MetaData->SetValue(ReturnEnum, TEXT("Linear.ToolTip"), TEXT("The image is a special texture in linear space (usually a rendering resource such as a lookup table)."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NoImage.ToolTip"), TEXT("No image is loaded.  Color only brushes, transparent brushes etc."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates brush image types."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_ESlateBrushImageType_CRC() { return 2283468225U; }
	UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushMirrorType()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_ESlateBrushMirrorType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESlateBrushMirrorType"), 0, Get_Z_Construct_UEnum_SlateCore_ESlateBrushMirrorType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESlateBrushMirrorType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushMirrorType::NoMirror")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushMirrorType::Horizontal")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushMirrorType::Vertical")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushMirrorType::Both")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushMirrorType::ESlateBrushMirrorType_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Both.ToolTip"), TEXT("Mirror in both directions."));
			MetaData->SetValue(ReturnEnum, TEXT("Horizontal.ToolTip"), TEXT("Mirror the image horizontally."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NoMirror.ToolTip"), TEXT("Don't mirror anything, just draw the texture as it is."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Possible options for mirroring the brush image"));
			MetaData->SetValue(ReturnEnum, TEXT("Vertical.ToolTip"), TEXT("Mirror the image vertically."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_ESlateBrushMirrorType_CRC() { return 996832135U; }
	UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushTileType()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_ESlateBrushTileType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESlateBrushTileType"), 0, Get_Z_Construct_UEnum_SlateCore_ESlateBrushTileType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESlateBrushTileType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushTileType::NoTile")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushTileType::Horizontal")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushTileType::Vertical")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushTileType::Both")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushTileType::ESlateBrushTileType_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Both.ToolTip"), TEXT("Tile in both directions"));
			MetaData->SetValue(ReturnEnum, TEXT("Horizontal.ToolTip"), TEXT("Tile the image horizontally"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NoTile.ToolTip"), TEXT("Just stretch"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates tiling options for image drawing."));
			MetaData->SetValue(ReturnEnum, TEXT("Vertical.ToolTip"), TEXT("Tile the image vertically"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_ESlateBrushTileType_CRC() { return 138430112U; }
	UEnum* Z_Construct_UEnum_SlateCore_ESlateBrushDrawType()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_ESlateBrushDrawType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESlateBrushDrawType"), 0, Get_Z_Construct_UEnum_SlateCore_ESlateBrushDrawType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESlateBrushDrawType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushDrawType::NoDrawType")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushDrawType::Box")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushDrawType::Border")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushDrawType::Image")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateBrushDrawType::ESlateBrushDrawType_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Border.ToolTip"), TEXT("Draw a 3x3 border where the sides tile and the middle is empty"));
			MetaData->SetValue(ReturnEnum, TEXT("Box.ToolTip"), TEXT("Draw a 3x3 box, where the sides and the middle stretch based on the Margin"));
			MetaData->SetValue(ReturnEnum, TEXT("Image.ToolTip"), TEXT("Draw an image; margin is ignored"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(ReturnEnum, TEXT("NoDrawType.DisplayName"), TEXT("None"));
			MetaData->SetValue(ReturnEnum, TEXT("NoDrawType.ToolTip"), TEXT("Don't do anything"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates ways in which an image can be drawn."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_ESlateBrushDrawType_CRC() { return 3484123506U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSlateBrush()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FSlateBrush_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SlateBrush"), sizeof(FSlateBrush), Get_Z_Construct_UScriptStruct_FSlateBrush_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlateBrush"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSlateBrush>, EStructFlags(0x00000201));
			UProperty* NewProp_UVRegion = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UVRegion"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UVRegion, FSlateBrush), 0x0000080000000000, Z_Construct_UScriptStruct_FBox2D());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasUObject_DEPRECATED, FSlateBrush, bool);
			UProperty* NewProp_bHasUObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bHasUObject"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasUObject_DEPRECATED, FSlateBrush), 0x0000080020000000, CPP_BOOL_PROPERTY_BITMASK(bHasUObject_DEPRECATED, FSlateBrush), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsDynamicallyLoaded, FSlateBrush, bool);
			UProperty* NewProp_bIsDynamicallyLoaded = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsDynamicallyLoaded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsDynamicallyLoaded, FSlateBrush), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bIsDynamicallyLoaded, FSlateBrush), sizeof(bool), true);
			UProperty* NewProp_ResourceName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResourceName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(ResourceName, FSlateBrush), 0x0000080000000000);
			UProperty* NewProp_ResourceObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ResourceObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ResourceObject, FSlateBrush), 0x0000080000000005, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ImageType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImageType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ImageType, FSlateBrush), 0x0000000000000000, Z_Construct_UEnum_SlateCore_ESlateBrushImageType());
			UProperty* NewProp_Mirroring = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mirroring"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Mirroring, FSlateBrush), 0x0000000000000005, Z_Construct_UEnum_SlateCore_ESlateBrushMirrorType());
			UProperty* NewProp_Tiling = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Tiling"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Tiling, FSlateBrush), 0x0000000000000005, Z_Construct_UEnum_SlateCore_ESlateBrushTileType());
			UProperty* NewProp_TintColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TintColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TintColor, FSlateBrush), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Tint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tint_DEPRECATED, FSlateBrush), 0x0000000020000000, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Margin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Margin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Margin, FSlateBrush), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_DrawAs = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DrawAs"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DrawAs, FSlateBrush), 0x0000000000000005, Z_Construct_UEnum_SlateCore_ESlateBrushDrawType());
			UProperty* NewProp_ImageSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImageSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ImageSize, FSlateBrush), 0x0000000000000005, Z_Construct_UScriptStruct_FVector2D());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("An brush which contains information about how to draw a Slate element"));
			MetaData->SetValue(NewProp_UVRegion, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_UVRegion, TEXT("ToolTip"), TEXT("Optional UV region for an image\nWhen valid - overrides UV region specified in resource proxy"));
			MetaData->SetValue(NewProp_bHasUObject, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_bHasUObject, TEXT("ToolTip"), TEXT("Whether or not the brush has a UTexture resource"));
			MetaData->SetValue(NewProp_bIsDynamicallyLoaded, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_bIsDynamicallyLoaded, TEXT("ToolTip"), TEXT("Whether or not the brush path is a path to a UObject"));
			MetaData->SetValue(NewProp_ResourceName, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_ResourceName, TEXT("ToolTip"), TEXT("The name of the rendering resource to use"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("AllowedClasses"), TEXT("Texture2D,MaterialInterface"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("Category"), TEXT("Brush"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("DisplayName"), TEXT("Image"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("DisplayThumbnail"), TEXT("true"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_ResourceObject, TEXT("ToolTip"), TEXT("The image to render for this brush, can be a UTexture2D or Material."));
			MetaData->SetValue(NewProp_ImageType, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_ImageType, TEXT("ToolTip"), TEXT("The type of image"));
			MetaData->SetValue(NewProp_Mirroring, TEXT("Category"), TEXT("Brush"));
			MetaData->SetValue(NewProp_Mirroring, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_Mirroring, TEXT("ToolTip"), TEXT("How to mirror the image in Image mode.  This is normally only used for dynamic image brushes where the source texture\n          comes from a hardware device such as a web camera."));
			MetaData->SetValue(NewProp_Tiling, TEXT("Category"), TEXT("Brush"));
			MetaData->SetValue(NewProp_Tiling, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_Tiling, TEXT("ToolTip"), TEXT("How to tile the image in Image mode"));
			MetaData->SetValue(NewProp_TintColor, TEXT("Category"), TEXT("Brush"));
			MetaData->SetValue(NewProp_TintColor, TEXT("DisplayName"), TEXT("Tint"));
			MetaData->SetValue(NewProp_TintColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_TintColor, TEXT("sRGB"), TEXT("true"));
			MetaData->SetValue(NewProp_TintColor, TEXT("ToolTip"), TEXT("Tinting applied to the image."));
			MetaData->SetValue(NewProp_Tint, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_Tint, TEXT("ToolTip"), TEXT("Tinting applied to the image."));
			MetaData->SetValue(NewProp_Margin, TEXT("Category"), TEXT("Brush"));
			MetaData->SetValue(NewProp_Margin, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_Margin, TEXT("ToolTip"), TEXT("The margin to use in Box and Border modes"));
			MetaData->SetValue(NewProp_Margin, TEXT("UVSpace"), TEXT("true"));
			MetaData->SetValue(NewProp_DrawAs, TEXT("Category"), TEXT("Brush"));
			MetaData->SetValue(NewProp_DrawAs, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_DrawAs, TEXT("ToolTip"), TEXT("How to draw the image"));
			MetaData->SetValue(NewProp_ImageSize, TEXT("Category"), TEXT("Brush"));
			MetaData->SetValue(NewProp_ImageSize, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateBrush.h"));
			MetaData->SetValue(NewProp_ImageSize, TEXT("ToolTip"), TEXT("Size of the resource in Slate Units"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSlateBrush_CRC() { return 1717106916U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSlateWidgetStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FSlateWidgetStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SlateWidgetStyle"), sizeof(FSlateWidgetStyle), Get_Z_Construct_UScriptStruct_FSlateWidgetStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlateWidgetStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSlateWidgetStyle>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateWidgetStyle.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Base structure for widget styles."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSlateWidgetStyle_CRC() { return 491344456U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSlateFontInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FSlateFontInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SlateFontInfo"), sizeof(FSlateFontInfo), Get_Z_Construct_UScriptStruct_FSlateFontInfo_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlateFontInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSlateFontInfo>, EStructFlags(0x00000201));
			UProperty* NewProp_Hinting = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Hinting"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Hinting_DEPRECATED, FSlateFontInfo), 0x0000000020000000, Z_Construct_UEnum_SlateCore_EFontHinting());
			UProperty* NewProp_FontName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FontName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FontName_DEPRECATED, FSlateFontInfo), 0x0000000020000000);
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Size"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Size, FSlateFontInfo), 0x0000000000000005);
			UProperty* NewProp_TypefaceFontName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TypefaceFontName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TypefaceFontName, FSlateFontInfo), 0x0000000000000005);
			UProperty* NewProp_FontMaterial = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FontMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FontMaterial, FSlateFontInfo), 0x0000000000000005, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_FontObject = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FontObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FontObject, FSlateFontInfo), 0x0000000000000005, Z_Construct_UClass_UObject_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/SlateFontInfo.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A representation of a font in Slate."));
			MetaData->SetValue(NewProp_Hinting, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/SlateFontInfo.h"));
			MetaData->SetValue(NewProp_Hinting, TEXT("ToolTip"), TEXT("The hinting algorithm to use with the font"));
			MetaData->SetValue(NewProp_FontName, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/SlateFontInfo.h"));
			MetaData->SetValue(NewProp_FontName, TEXT("ToolTip"), TEXT("The name of the font"));
			MetaData->SetValue(NewProp_Size, TEXT("Category"), TEXT("SlateStyleRules"));
			MetaData->SetValue(NewProp_Size, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/SlateFontInfo.h"));
			MetaData->SetValue(NewProp_Size, TEXT("ToolTip"), TEXT("The size of the font"));
			MetaData->SetValue(NewProp_TypefaceFontName, TEXT("Category"), TEXT("SlateStyleRules"));
			MetaData->SetValue(NewProp_TypefaceFontName, TEXT("DisplayName"), TEXT("Font"));
			MetaData->SetValue(NewProp_TypefaceFontName, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/SlateFontInfo.h"));
			MetaData->SetValue(NewProp_TypefaceFontName, TEXT("ToolTip"), TEXT("The name of the font to use from the default typeface (None will use the first entry)"));
			MetaData->SetValue(NewProp_FontMaterial, TEXT("AllowedClasses"), TEXT("MaterialInterface"));
			MetaData->SetValue(NewProp_FontMaterial, TEXT("Category"), TEXT("SlateStyleRules"));
			MetaData->SetValue(NewProp_FontMaterial, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/SlateFontInfo.h"));
			MetaData->SetValue(NewProp_FontMaterial, TEXT("ToolTip"), TEXT("The material to use when rendering this font"));
			MetaData->SetValue(NewProp_FontObject, TEXT("AllowedClasses"), TEXT("Font"));
			MetaData->SetValue(NewProp_FontObject, TEXT("Category"), TEXT("SlateStyleRules"));
			MetaData->SetValue(NewProp_FontObject, TEXT("DisplayName"), TEXT("Font Family"));
			MetaData->SetValue(NewProp_FontObject, TEXT("ModuleRelativePath"), TEXT("Public/Fonts/SlateFontInfo.h"));
			MetaData->SetValue(NewProp_FontObject, TEXT("ToolTip"), TEXT("The font object (valid when used from UMG or a Slate widget style asset)"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSlateFontInfo_CRC() { return 925335409U; }
	UEnum* Z_Construct_UEnum_SlateCore_ECheckBoxState()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_ECheckBoxState_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ECheckBoxState"), 0, Get_Z_Construct_UEnum_SlateCore_ECheckBoxState_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECheckBoxState"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECheckBoxState::Unchecked")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECheckBoxState::Checked")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECheckBoxState::Undetermined")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECheckBoxState::ECheckBoxState_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Checked.ToolTip"), TEXT("Checked"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Current state of the check box"));
			MetaData->SetValue(ReturnEnum, TEXT("Unchecked.ToolTip"), TEXT("Unchecked"));
			MetaData->SetValue(ReturnEnum, TEXT("Undetermined.ToolTip"), TEXT("Neither checked nor unchecked"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_ECheckBoxState_CRC() { return 2492069344U; }
	UEnum* Z_Construct_UEnum_SlateCore_ESlateCheckBoxType()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_ESlateCheckBoxType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESlateCheckBoxType"), 0, Get_Z_Construct_UEnum_SlateCore_ESlateCheckBoxType_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESlateCheckBoxType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateCheckBoxType::CheckBox")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateCheckBoxType::ToggleButton")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateCheckBoxType::ESlateCheckBoxType_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CheckBox.ToolTip"), TEXT("Traditional check box with check button and label (or other content)"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToggleButton.ToolTip"), TEXT("Toggle button.  You provide button content (such as an image), and the user can press to toggle it."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Type of check box"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_ESlateCheckBoxType_CRC() { return 950475445U; }
	UEnum* Z_Construct_UEnum_SlateCore_EConsumeMouseWheel()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EConsumeMouseWheel_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EConsumeMouseWheel"), 0, Get_Z_Construct_UEnum_SlateCore_EConsumeMouseWheel_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EConsumeMouseWheel"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EConsumeMouseWheel::WhenScrollingPossible")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EConsumeMouseWheel::Always")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EConsumeMouseWheel::EConsumeMouseWheel_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Always.ToolTip"), TEXT("Always consume mouse wheel event even if we don't scroll at all."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Used to determine how we should handle mouse wheel input events when someone scrolls."));
			MetaData->SetValue(ReturnEnum, TEXT("WhenScrollingPossible.ToolTip"), TEXT("Only consume the mouse wheel event when we actually scroll some amount."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EConsumeMouseWheel_CRC() { return 531312960U; }
	UScriptStruct* Z_Construct_UScriptStruct_FWindowStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FWindowStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("WindowStyle"), sizeof(FWindowStyle), Get_Z_Construct_UScriptStruct_FWindowStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WindowStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FWindowStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_ChildBackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ChildBackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ChildBackgroundBrush, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundBrush, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BorderBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BorderBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BorderBrush, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_OutlineColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutlineColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutlineColor, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_OutlineBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OutlineBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OutlineBrush, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_FlashTitleBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FlashTitleBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FlashTitleBrush, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_InactiveTitleBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InactiveTitleBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InactiveTitleBrush, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ActiveTitleBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveTitleBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveTitleBrush, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_TitleTextStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TitleTextStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TitleTextStyle, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FTextBlockStyle());
			UProperty* NewProp_CloseButtonStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CloseButtonStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CloseButtonStyle, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FButtonStyle());
			UProperty* NewProp_RestoreButtonStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RestoreButtonStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RestoreButtonStyle, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FButtonStyle());
			UProperty* NewProp_MaximizeButtonStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaximizeButtonStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaximizeButtonStyle, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FButtonStyle());
			UProperty* NewProp_MinimizeButtonStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinimizeButtonStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MinimizeButtonStyle, FWindowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FButtonStyle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SWindow"));
			MetaData->SetValue(NewProp_ChildBackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ChildBackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ChildBackgroundBrush, TEXT("ToolTip"), TEXT("Brush used to draw the background of child windows"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("ToolTip"), TEXT("Brush used to draw the window background"));
			MetaData->SetValue(NewProp_BorderBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BorderBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BorderBrush, TEXT("ToolTip"), TEXT("Brush used to draw the window border"));
			MetaData->SetValue(NewProp_OutlineColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_OutlineColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_OutlineColor, TEXT("ToolTip"), TEXT("Color used to draw the window outline"));
			MetaData->SetValue(NewProp_OutlineBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_OutlineBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_OutlineBrush, TEXT("ToolTip"), TEXT("Brush used to draw the window outline"));
			MetaData->SetValue(NewProp_FlashTitleBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_FlashTitleBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_FlashTitleBrush, TEXT("ToolTip"), TEXT("Brush used to draw the window title area when the window is flashing"));
			MetaData->SetValue(NewProp_InactiveTitleBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_InactiveTitleBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_InactiveTitleBrush, TEXT("ToolTip"), TEXT("Brush used to draw the window title area when the window is inactive"));
			MetaData->SetValue(NewProp_ActiveTitleBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ActiveTitleBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ActiveTitleBrush, TEXT("ToolTip"), TEXT("Brush used to draw the window title area when the window is active"));
			MetaData->SetValue(NewProp_TitleTextStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TitleTextStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_TitleTextStyle, TEXT("ToolTip"), TEXT("Style used to draw the window title text"));
			MetaData->SetValue(NewProp_CloseButtonStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_CloseButtonStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_CloseButtonStyle, TEXT("ToolTip"), TEXT("Style used to draw the window close button"));
			MetaData->SetValue(NewProp_RestoreButtonStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_RestoreButtonStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_RestoreButtonStyle, TEXT("ToolTip"), TEXT("Style used to draw the window restore button"));
			MetaData->SetValue(NewProp_MaximizeButtonStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_MaximizeButtonStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_MaximizeButtonStyle, TEXT("ToolTip"), TEXT("Style used to draw the window maximize button"));
			MetaData->SetValue(NewProp_MinimizeButtonStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_MinimizeButtonStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_MinimizeButtonStyle, TEXT("ToolTip"), TEXT("Style used to draw the window minimize button"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWindowStyle_CRC() { return 1820973030U; }
	UScriptStruct* Z_Construct_UScriptStruct_FScrollBorderStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FScrollBorderStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ScrollBorderStyle"), sizeof(FScrollBorderStyle), Get_Z_Construct_UScriptStruct_FScrollBorderStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScrollBorderStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FScrollBorderStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_BottomShadowBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BottomShadowBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BottomShadowBrush, FScrollBorderStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_TopShadowBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TopShadowBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TopShadowBrush, FScrollBorderStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an FScrollBorderStyle"));
			MetaData->SetValue(NewProp_BottomShadowBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BottomShadowBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BottomShadowBrush, TEXT("ToolTip"), TEXT("Brush used to draw the bottom shadow of a scrollborder"));
			MetaData->SetValue(NewProp_TopShadowBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TopShadowBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_TopShadowBrush, TEXT("ToolTip"), TEXT("Brush used to draw the top shadow of a scrollborder"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FScrollBorderStyle_CRC() { return 2655983170U; }
	UScriptStruct* Z_Construct_UScriptStruct_FScrollBoxStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FScrollBoxStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ScrollBoxStyle"), sizeof(FScrollBoxStyle), Get_Z_Construct_UScriptStruct_FScrollBoxStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScrollBoxStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FScrollBoxStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_RightShadowBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RightShadowBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RightShadowBrush, FScrollBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_LeftShadowBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LeftShadowBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LeftShadowBrush, FScrollBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BottomShadowBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BottomShadowBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BottomShadowBrush, FScrollBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_TopShadowBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TopShadowBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TopShadowBrush, FScrollBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SScrollBox"));
			MetaData->SetValue(NewProp_RightShadowBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_RightShadowBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_RightShadowBrush, TEXT("ToolTip"), TEXT("Brush used to draw the right shadow of a scrollbox"));
			MetaData->SetValue(NewProp_LeftShadowBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_LeftShadowBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_LeftShadowBrush, TEXT("ToolTip"), TEXT("Brush used to draw the left shadow of a scrollbox"));
			MetaData->SetValue(NewProp_BottomShadowBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BottomShadowBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BottomShadowBrush, TEXT("ToolTip"), TEXT("Brush used to draw the bottom shadow of a scrollbox"));
			MetaData->SetValue(NewProp_TopShadowBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TopShadowBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_TopShadowBrush, TEXT("ToolTip"), TEXT("Brush used to draw the top shadow of a scrollbox"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FScrollBoxStyle_CRC() { return 539621860U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDockTabStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FDockTabStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DockTabStyle"), sizeof(FDockTabStyle), Get_Z_Construct_UScriptStruct_FDockTabStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DockTabStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FDockTabStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_FlashColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FlashColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FlashColor, FDockTabStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_OverlapWidth = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OverlapWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(OverlapWidth, FDockTabStyle), 0x0000000000000001);
			UProperty* NewProp_TabPadding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TabPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TabPadding, FDockTabStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_TabWellBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TabWellBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TabWellBrush, FDockTabStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ContentAreaBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ContentAreaBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ContentAreaBrush, FDockTabStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HoveredBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HoveredBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HoveredBrush, FDockTabStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ForegroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForegroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForegroundBrush, FDockTabStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ColorOverlayBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColorOverlayBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorOverlayBrush, FDockTabStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ActiveBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveBrush, FDockTabStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_NormalBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalBrush, FDockTabStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_CloseButtonStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CloseButtonStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CloseButtonStyle, FDockTabStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FButtonStyle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SDockTab"));
			MetaData->SetValue(NewProp_FlashColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_FlashColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_FlashColor, TEXT("ToolTip"), TEXT("Color used when flashing this tab"));
			MetaData->SetValue(NewProp_OverlapWidth, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_OverlapWidth, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_OverlapWidth, TEXT("ToolTip"), TEXT("The width that this tab will overlap with side-by-side tabs"));
			MetaData->SetValue(NewProp_TabPadding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TabPadding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_TabPadding, TEXT("ToolTip"), TEXT("Padding used around this tab"));
			MetaData->SetValue(NewProp_TabWellBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TabWellBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_TabWellBrush, TEXT("ToolTip"), TEXT("Brush used by the SDockingTabStack to draw the content associated with this tab; Documents, Apps, and Tool Panels have different backgrounds"));
			MetaData->SetValue(NewProp_ContentAreaBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ContentAreaBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ContentAreaBrush, TEXT("ToolTip"), TEXT("Brush used by the SDockingTabStack to draw the content associated with this tab; Documents, Apps, and Tool Panels have different backgrounds"));
			MetaData->SetValue(NewProp_HoveredBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HoveredBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HoveredBrush, TEXT("ToolTip"), TEXT("Brush used when this tab is hovered over"));
			MetaData->SetValue(NewProp_ForegroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ForegroundBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ForegroundBrush, TEXT("ToolTip"), TEXT("Brush used when this tab is in the foreground"));
			MetaData->SetValue(NewProp_ColorOverlayBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ColorOverlayBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ColorOverlayBrush, TEXT("ToolTip"), TEXT("Brush used to overlay a given color onto this tab"));
			MetaData->SetValue(NewProp_ActiveBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ActiveBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ActiveBrush, TEXT("ToolTip"), TEXT("Brush used when this tab is in its active state"));
			MetaData->SetValue(NewProp_NormalBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_NormalBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_NormalBrush, TEXT("ToolTip"), TEXT("Brush used when this tab is in its normal state"));
			MetaData->SetValue(NewProp_CloseButtonStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_CloseButtonStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_CloseButtonStyle, TEXT("ToolTip"), TEXT("Style used for the close button"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDockTabStyle_CRC() { return 2593990432U; }
	UScriptStruct* Z_Construct_UScriptStruct_FHeaderRowStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FHeaderRowStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("HeaderRowStyle"), sizeof(FHeaderRowStyle), Get_Z_Construct_UScriptStruct_FHeaderRowStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HeaderRowStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FHeaderRowStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor, FHeaderRowStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_BackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundBrush, FHeaderRowStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ColumnSplitterStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColumnSplitterStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColumnSplitterStyle, FHeaderRowStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSplitterStyle());
			UProperty* NewProp_LastColumnStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LastColumnStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LastColumnStyle, FHeaderRowStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FTableColumnHeaderStyle());
			UProperty* NewProp_ColumnStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColumnStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColumnStyle, FHeaderRowStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FTableColumnHeaderStyle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SHeaderRow"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("Color used to draw the header row foreground"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("ToolTip"), TEXT("Brush used to draw the header row background"));
			MetaData->SetValue(NewProp_ColumnSplitterStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ColumnSplitterStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ColumnSplitterStyle, TEXT("ToolTip"), TEXT("Style of the splitter used between the columns"));
			MetaData->SetValue(NewProp_LastColumnStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_LastColumnStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_LastColumnStyle, TEXT("ToolTip"), TEXT("Style of the last header row column"));
			MetaData->SetValue(NewProp_ColumnStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ColumnStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ColumnStyle, TEXT("ToolTip"), TEXT("Style of the normal header row columns"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FHeaderRowStyle_CRC() { return 1987676824U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTableColumnHeaderStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FTableColumnHeaderStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TableColumnHeaderStyle"), sizeof(FTableColumnHeaderStyle), Get_Z_Construct_UScriptStruct_FTableColumnHeaderStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TableColumnHeaderStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FTableColumnHeaderStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_MenuDropdownHoveredBorderBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MenuDropdownHoveredBorderBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MenuDropdownHoveredBorderBrush, FTableColumnHeaderStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_MenuDropdownNormalBorderBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MenuDropdownNormalBorderBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MenuDropdownNormalBorderBrush, FTableColumnHeaderStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_MenuDropdownImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MenuDropdownImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MenuDropdownImage, FTableColumnHeaderStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HoveredBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HoveredBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HoveredBrush, FTableColumnHeaderStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_NormalBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalBrush, FTableColumnHeaderStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_SortSecondaryDescendingImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SortSecondaryDescendingImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SortSecondaryDescendingImage, FTableColumnHeaderStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_SortSecondaryAscendingImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SortSecondaryAscendingImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SortSecondaryAscendingImage, FTableColumnHeaderStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_SortPrimaryDescendingImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SortPrimaryDescendingImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SortPrimaryDescendingImage, FTableColumnHeaderStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_SortPrimaryAscendingImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SortPrimaryAscendingImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SortPrimaryAscendingImage, FTableColumnHeaderStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an STableColumnHeader"));
			MetaData->SetValue(NewProp_MenuDropdownHoveredBorderBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_MenuDropdownHoveredBorderBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_MenuDropdownHoveredBorderBrush, TEXT("ToolTip"), TEXT("Brush used to draw the menu drop-down border in its hovered state"));
			MetaData->SetValue(NewProp_MenuDropdownNormalBorderBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_MenuDropdownNormalBorderBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_MenuDropdownNormalBorderBrush, TEXT("ToolTip"), TEXT("Brush used to draw the menu drop-down border in its normal state"));
			MetaData->SetValue(NewProp_MenuDropdownImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_MenuDropdownImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_MenuDropdownImage, TEXT("ToolTip"), TEXT("Image used for the menu drop-down button"));
			MetaData->SetValue(NewProp_HoveredBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HoveredBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HoveredBrush, TEXT("ToolTip"), TEXT("Brush used to draw the header in its hovered state"));
			MetaData->SetValue(NewProp_NormalBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_NormalBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_NormalBrush, TEXT("ToolTip"), TEXT("Brush used to draw the header in its normal state"));
			MetaData->SetValue(NewProp_SortSecondaryDescendingImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_SortSecondaryDescendingImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_SortSecondaryDescendingImage, TEXT("ToolTip"), TEXT("Image used when a column is secondarily sorted in descending order"));
			MetaData->SetValue(NewProp_SortSecondaryAscendingImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_SortSecondaryAscendingImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_SortSecondaryAscendingImage, TEXT("ToolTip"), TEXT("Image used when a column is secondarily sorted in ascending order"));
			MetaData->SetValue(NewProp_SortPrimaryDescendingImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_SortPrimaryDescendingImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_SortPrimaryDescendingImage, TEXT("ToolTip"), TEXT("Image used when a column is primarily sorted in descending order"));
			MetaData->SetValue(NewProp_SortPrimaryAscendingImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_SortPrimaryAscendingImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_SortPrimaryAscendingImage, TEXT("ToolTip"), TEXT("Image used when a column is primarily sorted in ascending order"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTableColumnHeaderStyle_CRC() { return 2728130945U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTableRowStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FTableRowStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TableRowStyle"), sizeof(FTableRowStyle), Get_Z_Construct_UScriptStruct_FTableRowStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TableRowStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FTableRowStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_DropIndicator_Below = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DropIndicator_Below"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DropIndicator_Below, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_DropIndicator_Onto = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DropIndicator_Onto"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DropIndicator_Onto, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_DropIndicator_Above = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DropIndicator_Above"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DropIndicator_Above, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_SelectedTextColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SelectedTextColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SelectedTextColor, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_TextColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextColor, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_OddRowBackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OddRowBackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OddRowBackgroundBrush, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_OddRowBackgroundHoveredBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OddRowBackgroundHoveredBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OddRowBackgroundHoveredBrush, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_EvenRowBackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EvenRowBackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EvenRowBackgroundBrush, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_EvenRowBackgroundHoveredBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EvenRowBackgroundHoveredBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EvenRowBackgroundHoveredBrush, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_InactiveBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InactiveBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InactiveBrush, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_InactiveHoveredBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InactiveHoveredBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InactiveHoveredBrush, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ActiveBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveBrush, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ActiveHoveredBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveHoveredBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveHoveredBrush, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_SelectorFocusedBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SelectorFocusedBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SelectorFocusedBrush, FTableRowStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an STableRow"));
			MetaData->SetValue(NewProp_DropIndicator_Below, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_DropIndicator_Below, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_DropIndicator_Below, TEXT("ToolTip"), TEXT("Brush used to provide feedback that a user can drop below the hovered row."));
			MetaData->SetValue(NewProp_DropIndicator_Onto, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_DropIndicator_Onto, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_DropIndicator_Onto, TEXT("ToolTip"), TEXT("Brush used to provide feedback that a user can drop onto the hovered row."));
			MetaData->SetValue(NewProp_DropIndicator_Above, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_DropIndicator_Above, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_DropIndicator_Above, TEXT("ToolTip"), TEXT("Brush used to provide feedback that a user can drop above the hovered row."));
			MetaData->SetValue(NewProp_SelectedTextColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_SelectedTextColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_SelectedTextColor, TEXT("ToolTip"), TEXT("Text color used for the selected row"));
			MetaData->SetValue(NewProp_TextColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TextColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_TextColor, TEXT("ToolTip"), TEXT("Text color used for all rows"));
			MetaData->SetValue(NewProp_OddRowBackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_OddRowBackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_OddRowBackgroundBrush, TEXT("ToolTip"), TEXT("Brush to used when an odd row is in its normal state"));
			MetaData->SetValue(NewProp_OddRowBackgroundHoveredBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_OddRowBackgroundHoveredBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_OddRowBackgroundHoveredBrush, TEXT("ToolTip"), TEXT("Brush used when an odd row is hovered"));
			MetaData->SetValue(NewProp_EvenRowBackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_EvenRowBackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_EvenRowBackgroundBrush, TEXT("ToolTip"), TEXT("Brush used when an even row is in its normal state"));
			MetaData->SetValue(NewProp_EvenRowBackgroundHoveredBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_EvenRowBackgroundHoveredBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_EvenRowBackgroundHoveredBrush, TEXT("ToolTip"), TEXT("Brush used when an even row is hovered"));
			MetaData->SetValue(NewProp_InactiveBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_InactiveBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_InactiveBrush, TEXT("ToolTip"), TEXT("Brush used when a selected row is inactive"));
			MetaData->SetValue(NewProp_InactiveHoveredBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_InactiveHoveredBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_InactiveHoveredBrush, TEXT("ToolTip"), TEXT("Brush used when an selected row is inactive and hovered"));
			MetaData->SetValue(NewProp_ActiveBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ActiveBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ActiveBrush, TEXT("ToolTip"), TEXT("Brush used when a selected row is active"));
			MetaData->SetValue(NewProp_ActiveHoveredBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ActiveHoveredBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ActiveHoveredBrush, TEXT("ToolTip"), TEXT("Brush used when a selected row is active and hovered"));
			MetaData->SetValue(NewProp_SelectorFocusedBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_SelectorFocusedBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_SelectorFocusedBrush, TEXT("ToolTip"), TEXT("Brush used as a selector when a row is focused"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTableRowStyle_CRC() { return 4283331964U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSplitterStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FSplitterStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SplitterStyle"), sizeof(FSplitterStyle), Get_Z_Construct_UScriptStruct_FSplitterStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SplitterStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FSplitterStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_HandleHighlightBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HandleHighlightBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HandleHighlightBrush, FSplitterStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HandleNormalBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HandleNormalBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HandleNormalBrush, FSplitterStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SSplitter"));
			MetaData->SetValue(NewProp_HandleHighlightBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HandleHighlightBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HandleHighlightBrush, TEXT("ToolTip"), TEXT("Brush used to draw the handle in its highlight state"));
			MetaData->SetValue(NewProp_HandleNormalBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HandleNormalBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HandleNormalBrush, TEXT("ToolTip"), TEXT("Brush used to draw the handle in its normal state"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSplitterStyle_CRC() { return 979962391U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSpinBoxStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FSpinBoxStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SpinBoxStyle"), sizeof(FSpinBoxStyle), Get_Z_Construct_UScriptStruct_FSpinBoxStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpinBoxStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FSpinBoxStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_TextPadding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextPadding, FSpinBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor, FSpinBoxStyle), 0x0000000000000000, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_ArrowsImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ArrowsImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ArrowsImage, FSpinBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_InactiveFillBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InactiveFillBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InactiveFillBrush, FSpinBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ActiveFillBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveFillBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveFillBrush, FSpinBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HoveredBackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HoveredBackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HoveredBackgroundBrush, FSpinBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundBrush, FSpinBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SSpinBox"));
			MetaData->SetValue(NewProp_TextPadding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TextPadding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_TextPadding, TEXT("ToolTip"), TEXT("Padding to add around the spinbox and its text"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("Color used to draw the spinbox foreground elements"));
			MetaData->SetValue(NewProp_ArrowsImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ArrowsImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ArrowsImage, TEXT("ToolTip"), TEXT("Image used to draw the spinbox arrows"));
			MetaData->SetValue(NewProp_InactiveFillBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_InactiveFillBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_InactiveFillBrush, TEXT("ToolTip"), TEXT("Brush used to fill the spinbox when it's inactive"));
			MetaData->SetValue(NewProp_ActiveFillBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ActiveFillBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ActiveFillBrush, TEXT("ToolTip"), TEXT("Brush used to fill the spinbox when it's active"));
			MetaData->SetValue(NewProp_HoveredBackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HoveredBackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HoveredBackgroundBrush, TEXT("ToolTip"), TEXT("Brush used to draw the background of the spinbox when it's hovered over"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("ToolTip"), TEXT("Brush used to draw the background of the spinbox"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSpinBoxStyle_CRC() { return 2178015375U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInlineTextImageStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FInlineTextImageStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InlineTextImageStyle"), sizeof(FInlineTextImageStyle), Get_Z_Construct_UScriptStruct_FInlineTextImageStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InlineTextImageStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FInlineTextImageStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_Baseline = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Baseline"), RF_Public|RF_Transient|RF_Native) UInt16Property(CPP_PROPERTY_BASE(Baseline, FInlineTextImageStyle), 0x0000000000000001);
			UProperty* NewProp_Image = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Image"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Image, FInlineTextImageStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an inline image used by rich text"));
			MetaData->SetValue(NewProp_Baseline, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Baseline, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Baseline, TEXT("ToolTip"), TEXT("The offset from the bottom of the image height to the baseline."));
			MetaData->SetValue(NewProp_Image, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Image, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Image, TEXT("ToolTip"), TEXT("Image to use when the slider thumb is in its normal state"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInlineTextImageStyle_CRC() { return 1904759123U; }
	UScriptStruct* Z_Construct_UScriptStruct_FVolumeControlStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FVolumeControlStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("VolumeControlStyle"), sizeof(FVolumeControlStyle), Get_Z_Construct_UScriptStruct_FVolumeControlStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("VolumeControlStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FVolumeControlStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_MutedImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MutedImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MutedImage, FVolumeControlStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_NoVolumeImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NoVolumeImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NoVolumeImage, FVolumeControlStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_LowVolumeImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LowVolumeImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LowVolumeImage, FVolumeControlStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_MidVolumeImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MidVolumeImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MidVolumeImage, FVolumeControlStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HighVolumeImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HighVolumeImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HighVolumeImage, FVolumeControlStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_SliderStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SliderStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SliderStyle, FVolumeControlStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSliderStyle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SVolumeControl"));
			MetaData->SetValue(NewProp_MutedImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_MutedImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_MutedImage, TEXT("ToolTip"), TEXT("Image to use when the volume is muted"));
			MetaData->SetValue(NewProp_NoVolumeImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_NoVolumeImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_NoVolumeImage, TEXT("ToolTip"), TEXT("Image to use when the volume is set to off"));
			MetaData->SetValue(NewProp_LowVolumeImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_LowVolumeImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_LowVolumeImage, TEXT("ToolTip"), TEXT("Image to use when the volume is set to low"));
			MetaData->SetValue(NewProp_MidVolumeImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_MidVolumeImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_MidVolumeImage, TEXT("ToolTip"), TEXT("Image to use when the volume is set to mid-range"));
			MetaData->SetValue(NewProp_HighVolumeImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HighVolumeImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HighVolumeImage, TEXT("ToolTip"), TEXT("Image to use when the volume is set to high"));
			MetaData->SetValue(NewProp_SliderStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_SliderStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_SliderStyle, TEXT("ToolTip"), TEXT("The style of the volume control slider"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FVolumeControlStyle_CRC() { return 485422770U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSliderStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FSliderStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SliderStyle"), sizeof(FSliderStyle), Get_Z_Construct_UScriptStruct_FSliderStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SliderStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FSliderStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_DisabledThumbImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisabledThumbImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DisabledThumbImage, FSliderStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_NormalThumbImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalThumbImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalThumbImage, FSliderStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_DisabledBarImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DisabledBarImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DisabledBarImage, FSliderStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_NormalBarImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalBarImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalBarImage, FSliderStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SSlider"));
			MetaData->SetValue(NewProp_DisabledThumbImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_DisabledThumbImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_DisabledThumbImage, TEXT("ToolTip"), TEXT("Image to use when the slider thumb is in its disabled state"));
			MetaData->SetValue(NewProp_NormalThumbImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_NormalThumbImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_NormalThumbImage, TEXT("ToolTip"), TEXT("Image to use when the slider thumb is in its normal state"));
			MetaData->SetValue(NewProp_DisabledBarImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_DisabledBarImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_DisabledBarImage, TEXT("ToolTip"), TEXT("Image to use when the slider bar is in its disabled state"));
			MetaData->SetValue(NewProp_NormalBarImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_NormalBarImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_NormalBarImage, TEXT("ToolTip"), TEXT("Image to use when the slider bar is in its normal state"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSliderStyle_CRC() { return 1513246421U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSearchBoxStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FSearchBoxStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SearchBoxStyle"), sizeof(FSearchBoxStyle), Get_Z_Construct_UScriptStruct_FSearchBoxStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SearchBoxStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FSearchBoxStyle>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLeftAlignButtons, FSearchBoxStyle, bool);
			UProperty* NewProp_bLeftAlignButtons = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bLeftAlignButtons"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLeftAlignButtons, FSearchBoxStyle), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bLeftAlignButtons, FSearchBoxStyle), sizeof(bool), true);
			UProperty* NewProp_ImagePadding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ImagePadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ImagePadding, FSearchBoxStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_ClearImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ClearImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ClearImage, FSearchBoxStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_GlassImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GlassImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GlassImage, FSearchBoxStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_DownArrowImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DownArrowImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DownArrowImage, FSearchBoxStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_UpArrowImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UpArrowImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UpArrowImage, FSearchBoxStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ActiveFontInfo = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActiveFontInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ActiveFontInfo, FSearchBoxStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateFontInfo());
			UProperty* NewProp_TextBoxStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextBoxStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextBoxStyle, FSearchBoxStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FEditableTextBoxStyle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SSearchBox"));
			MetaData->SetValue(NewProp_bLeftAlignButtons, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_bLeftAlignButtons, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_bLeftAlignButtons, TEXT("ToolTip"), TEXT("If true, buttons appear to the left of the search text"));
			MetaData->SetValue(NewProp_ImagePadding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ImagePadding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ImagePadding, TEXT("ToolTip"), TEXT("Padding to use around the images"));
			MetaData->SetValue(NewProp_ClearImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ClearImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ClearImage, TEXT("ToolTip"), TEXT("Image to use for the search \"clear\" button"));
			MetaData->SetValue(NewProp_GlassImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_GlassImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_GlassImage, TEXT("ToolTip"), TEXT("Image to use for the search \"glass\""));
			MetaData->SetValue(NewProp_DownArrowImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_DownArrowImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_DownArrowImage, TEXT("ToolTip"), TEXT("Image to use for the search \"down\" arrow"));
			MetaData->SetValue(NewProp_UpArrowImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_UpArrowImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_UpArrowImage, TEXT("ToolTip"), TEXT("Image to use for the search \"up\" arrow"));
			MetaData->SetValue(NewProp_ActiveFontInfo, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ActiveFontInfo, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ActiveFontInfo, TEXT("ToolTip"), TEXT("Font to use for the text box part of the search box when a search term is entered"));
			MetaData->SetValue(NewProp_TextBoxStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TextBoxStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_TextBoxStyle, TEXT("ToolTip"), TEXT("Style to use for the text box part of the search box"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSearchBoxStyle_CRC() { return 3006401013U; }
	UScriptStruct* Z_Construct_UScriptStruct_FExpandableAreaStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FExpandableAreaStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ExpandableAreaStyle"), sizeof(FExpandableAreaStyle), Get_Z_Construct_UScriptStruct_FExpandableAreaStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExpandableAreaStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FExpandableAreaStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_ExpandedImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExpandedImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExpandedImage, FExpandableAreaStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_CollapsedImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CollapsedImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CollapsedImage, FExpandableAreaStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SExpandableArea"));
			MetaData->SetValue(NewProp_ExpandedImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ExpandedImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ExpandedImage, TEXT("ToolTip"), TEXT("Image to use when the area is expanded"));
			MetaData->SetValue(NewProp_CollapsedImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_CollapsedImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_CollapsedImage, TEXT("ToolTip"), TEXT("Image to use when the area is collapsed"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FExpandableAreaStyle_CRC() { return 2252114694U; }
	UScriptStruct* Z_Construct_UScriptStruct_FProgressBarStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FProgressBarStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ProgressBarStyle"), sizeof(FProgressBarStyle), Get_Z_Construct_UScriptStruct_FProgressBarStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProgressBarStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FProgressBarStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_MarqueeImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MarqueeImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MarqueeImage, FProgressBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_FillImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FillImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FillImage, FProgressBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BackgroundImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundImage, FProgressBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SProgressBar"));
			MetaData->SetValue(NewProp_MarqueeImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_MarqueeImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_MarqueeImage, TEXT("ToolTip"), TEXT("Image to use for marquee mode"));
			MetaData->SetValue(NewProp_FillImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_FillImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_FillImage, TEXT("ToolTip"), TEXT("Foreground image to use for the progress bar"));
			MetaData->SetValue(NewProp_BackgroundImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundImage, TEXT("ToolTip"), TEXT("Background image to use for the progress bar"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FProgressBarStyle_CRC() { return 3417273453U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInlineEditableTextBlockStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FInlineEditableTextBlockStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InlineEditableTextBlockStyle"), sizeof(FInlineEditableTextBlockStyle), Get_Z_Construct_UScriptStruct_FInlineEditableTextBlockStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InlineEditableTextBlockStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FInlineEditableTextBlockStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_TextStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextStyle, FInlineEditableTextBlockStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FTextBlockStyle());
			UProperty* NewProp_EditableTextBoxStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EditableTextBoxStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EditableTextBoxStyle, FInlineEditableTextBlockStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FEditableTextBoxStyle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SInlineEditableTextBlock"));
			MetaData->SetValue(NewProp_TextStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TextStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_TextStyle, TEXT("ToolTip"), TEXT("The style of the text block, which dictates the font, color, and shadow options. Style overrides all other properties!"));
			MetaData->SetValue(NewProp_EditableTextBoxStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_EditableTextBoxStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_EditableTextBoxStyle, TEXT("ToolTip"), TEXT("The style of the editable text box, which dictates the font, color, and shadow options."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInlineEditableTextBlockStyle_CRC() { return 151361724U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEditableTextBoxStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FEditableTextBoxStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EditableTextBoxStyle"), sizeof(FEditableTextBoxStyle), Get_Z_Construct_UScriptStruct_FEditableTextBoxStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EditableTextBoxStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FEditableTextBoxStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_ScrollBarStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScrollBarStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScrollBarStyle, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FScrollBarStyle());
			UProperty* NewProp_VScrollBarPadding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VScrollBarPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VScrollBarPadding, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_HScrollBarPadding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HScrollBarPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HScrollBarPadding, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_ReadOnlyForegroundColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReadOnlyForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReadOnlyForegroundColor, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateFontInfo());
			UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_BackgroundImageReadOnly = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundImageReadOnly"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundImageReadOnly, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BackgroundImageFocused = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundImageFocused"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundImageFocused, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BackgroundImageHovered = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundImageHovered"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundImageHovered, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BackgroundImageNormal = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundImageNormal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundImageNormal, FEditableTextBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SEditableTextBox"));
			MetaData->SetValue(NewProp_ScrollBarStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ScrollBarStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ScrollBarStyle, TEXT("ToolTip"), TEXT("Style used for the scrollbars"));
			MetaData->SetValue(NewProp_VScrollBarPadding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_VScrollBarPadding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_VScrollBarPadding, TEXT("ToolTip"), TEXT("Padding around the vertical scrollbar"));
			MetaData->SetValue(NewProp_HScrollBarPadding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HScrollBarPadding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HScrollBarPadding, TEXT("ToolTip"), TEXT("Padding around the horizontal scrollbar"));
			MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("ToolTip"), TEXT("The read-only foreground color of text in read-only mode."));
			MetaData->SetValue(NewProp_BackgroundColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("The background color applied to the active background image"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("The foreground color of text."));
			MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font family and size to be used when displaying this text."));
			MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("Padding"));
			MetaData->SetValue(NewProp_BackgroundImageReadOnly, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundImageReadOnly, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundImageReadOnly, TEXT("ToolTip"), TEXT("Border background image when the box is read-only"));
			MetaData->SetValue(NewProp_BackgroundImageFocused, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundImageFocused, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundImageFocused, TEXT("ToolTip"), TEXT("Border background image when the box is focused"));
			MetaData->SetValue(NewProp_BackgroundImageHovered, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundImageHovered, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundImageHovered, TEXT("ToolTip"), TEXT("Border background image when the box is hovered"));
			MetaData->SetValue(NewProp_BackgroundImageNormal, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundImageNormal, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundImageNormal, TEXT("ToolTip"), TEXT("Border background image when the box is not hovered or focused"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEditableTextBoxStyle_CRC() { return 1671964693U; }
	UScriptStruct* Z_Construct_UScriptStruct_FScrollBarStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FScrollBarStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ScrollBarStyle"), sizeof(FScrollBarStyle), Get_Z_Construct_UScriptStruct_FScrollBarStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScrollBarStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FScrollBarStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_DraggedThumbImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DraggedThumbImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DraggedThumbImage, FScrollBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HoveredThumbImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HoveredThumbImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HoveredThumbImage, FScrollBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_NormalThumbImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalThumbImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalThumbImage, FScrollBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HorizontalBottomSlotImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HorizontalBottomSlotImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HorizontalBottomSlotImage, FScrollBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_VerticalBottomSlotImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VerticalBottomSlotImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VerticalBottomSlotImage, FScrollBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HorizontalTopSlotImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HorizontalTopSlotImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HorizontalTopSlotImage, FScrollBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_VerticalTopSlotImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VerticalTopSlotImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VerticalTopSlotImage, FScrollBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_VerticalBackgroundImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VerticalBackgroundImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(VerticalBackgroundImage, FScrollBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HorizontalBackgroundImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HorizontalBackgroundImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HorizontalBackgroundImage, FScrollBarStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SScrollBar"));
			MetaData->SetValue(NewProp_DraggedThumbImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_DraggedThumbImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_DraggedThumbImage, TEXT("ToolTip"), TEXT("Image to use when the scrollbar thumb is in its dragged state"));
			MetaData->SetValue(NewProp_HoveredThumbImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HoveredThumbImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HoveredThumbImage, TEXT("ToolTip"), TEXT("Image to use when the scrollbar thumb is in its hovered state"));
			MetaData->SetValue(NewProp_NormalThumbImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_NormalThumbImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_NormalThumbImage, TEXT("ToolTip"), TEXT("Image to use when the scrollbar thumb is in its normal state"));
			MetaData->SetValue(NewProp_HorizontalBottomSlotImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HorizontalBottomSlotImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HorizontalBottomSlotImage, TEXT("ToolTip"), TEXT("The image to use to represent the track below the thumb when the scrollbar is oriented horizontally"));
			MetaData->SetValue(NewProp_VerticalBottomSlotImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_VerticalBottomSlotImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_VerticalBottomSlotImage, TEXT("ToolTip"), TEXT("The image to use to represent the track below the thumb when the scrollbar is oriented vertically"));
			MetaData->SetValue(NewProp_HorizontalTopSlotImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HorizontalTopSlotImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HorizontalTopSlotImage, TEXT("ToolTip"), TEXT("The image to use to represent the track above the thumb when the scrollbar is oriented horizontally"));
			MetaData->SetValue(NewProp_VerticalTopSlotImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_VerticalTopSlotImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_VerticalTopSlotImage, TEXT("ToolTip"), TEXT("The image to use to represent the track above the thumb when the scrollbar is oriented vertically"));
			MetaData->SetValue(NewProp_VerticalBackgroundImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_VerticalBackgroundImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_VerticalBackgroundImage, TEXT("ToolTip"), TEXT("Background image to use when the scrollbar is oriented vertically"));
			MetaData->SetValue(NewProp_HorizontalBackgroundImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HorizontalBackgroundImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HorizontalBackgroundImage, TEXT("ToolTip"), TEXT("Background image to use when the scrollbar is oriented horizontally"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FScrollBarStyle_CRC() { return 4084904491U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEditableTextStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FEditableTextStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EditableTextStyle"), sizeof(FEditableTextStyle), Get_Z_Construct_UScriptStruct_FEditableTextStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EditableTextStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FEditableTextStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_CaretImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CaretImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CaretImage, FEditableTextStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BackgroundImageComposing = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundImageComposing"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundImageComposing, FEditableTextStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BackgroundImageSelected = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundImageSelected"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundImageSelected, FEditableTextStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, FEditableTextStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font, FEditableTextStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateFontInfo());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SEditableText"));
			MetaData->SetValue(NewProp_CaretImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_CaretImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_CaretImage, TEXT("ToolTip"), TEXT("Image brush used for the caret"));
			MetaData->SetValue(NewProp_BackgroundImageComposing, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundImageComposing, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundImageComposing, TEXT("ToolTip"), TEXT("Background image for the selected text"));
			MetaData->SetValue(NewProp_BackgroundImageSelected, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundImageSelected, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BackgroundImageSelected, TEXT("ToolTip"), TEXT("Background image for the selected text"));
			MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("The color and opacity of this text"));
			MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font family and size to be used when displaying this text."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEditableTextStyle_CRC() { return 4261555641U; }
	UScriptStruct* Z_Construct_UScriptStruct_FHyperlinkStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FHyperlinkStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("HyperlinkStyle"), sizeof(FHyperlinkStyle), Get_Z_Construct_UScriptStruct_FHyperlinkStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HyperlinkStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FHyperlinkStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, FHyperlinkStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_TextStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextStyle, FHyperlinkStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FTextBlockStyle());
			UProperty* NewProp_UnderlineStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UnderlineStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UnderlineStyle, FHyperlinkStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FButtonStyle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SHyperlink"));
			MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("Padding"));
			MetaData->SetValue(NewProp_TextStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TextStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_TextStyle, TEXT("ToolTip"), TEXT("Text style"));
			MetaData->SetValue(NewProp_UnderlineStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_UnderlineStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_UnderlineStyle, TEXT("ToolTip"), TEXT("Underline style"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FHyperlinkStyle_CRC() { return 2890870949U; }
	UScriptStruct* Z_Construct_UScriptStruct_FComboBoxStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FComboBoxStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ComboBoxStyle"), sizeof(FComboBoxStyle), Get_Z_Construct_UScriptStruct_FComboBoxStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComboBoxStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FComboBoxStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_SelectionChangeSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SelectionChangeSound"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SelectionChangeSound_DEPRECATED, FComboBoxStyle), 0x0000000020000000);
			UProperty* NewProp_PressedSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PressedSound"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PressedSound_DEPRECATED, FComboBoxStyle), 0x0000000020000000);
			UProperty* NewProp_SelectionChangeSlateSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SelectionChangeSlateSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SelectionChangeSlateSound, FComboBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_PressedSlateSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PressedSlateSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PressedSlateSound, FComboBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_ComboButtonStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ComboButtonStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ComboButtonStyle, FComboBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FComboButtonStyle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SComboBox"));
			MetaData->SetValue(NewProp_SelectionChangeSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_PressedSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_SelectionChangeSlateSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_SelectionChangeSlateSound, TEXT("DisplayName"), TEXT("Selection Change Sound"));
			MetaData->SetValue(NewProp_SelectionChangeSlateSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_SelectionChangeSlateSound, TEXT("ToolTip"), TEXT("The Sound to play when the selection is changed"));
			MetaData->SetValue(NewProp_PressedSlateSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_PressedSlateSound, TEXT("DisplayName"), TEXT("Pressed Sound"));
			MetaData->SetValue(NewProp_PressedSlateSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_PressedSlateSound, TEXT("ToolTip"), TEXT("The sound the button should play when pressed"));
			MetaData->SetValue(NewProp_ComboButtonStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ComboButtonStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ComboButtonStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
			MetaData->SetValue(NewProp_ComboButtonStyle, TEXT("ToolTip"), TEXT("The style to use for our SComboButton"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FComboBoxStyle_CRC() { return 2101605470U; }
	UScriptStruct* Z_Construct_UScriptStruct_FComboButtonStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FComboButtonStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ComboButtonStyle"), sizeof(FComboButtonStyle), Get_Z_Construct_UScriptStruct_FComboButtonStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComboButtonStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FComboButtonStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_MenuBorderPadding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MenuBorderPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MenuBorderPadding, FComboButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_MenuBorderBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MenuBorderBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MenuBorderBrush, FComboButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_DownArrowImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DownArrowImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DownArrowImage, FComboButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_ButtonStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ButtonStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ButtonStyle, FComboButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FButtonStyle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SComboButton"));
			MetaData->SetValue(NewProp_MenuBorderPadding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_MenuBorderPadding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_MenuBorderPadding, TEXT("ToolTip"), TEXT("Padding to use to add a \"menu border\" around the drop-down content"));
			MetaData->SetValue(NewProp_MenuBorderBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_MenuBorderBrush, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_MenuBorderBrush, TEXT("ToolTip"), TEXT("Brush to use to add a \"menu border\" around the drop-down content"));
			MetaData->SetValue(NewProp_DownArrowImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_DownArrowImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_DownArrowImage, TEXT("ToolTip"), TEXT("Image to use for the down arrow"));
			MetaData->SetValue(NewProp_ButtonStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ButtonStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ButtonStyle, TEXT("ToolTip"), TEXT("The style to use for our SButton"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FComboButtonStyle_CRC() { return 4145677919U; }
	UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FButtonStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ButtonStyle"), sizeof(FButtonStyle), Get_Z_Construct_UScriptStruct_FButtonStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ButtonStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FButtonStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_HoveredSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HoveredSound"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(HoveredSound_DEPRECATED, FButtonStyle), 0x0000000020000000);
			UProperty* NewProp_PressedSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PressedSound"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PressedSound_DEPRECATED, FButtonStyle), 0x0000000020000000);
			UProperty* NewProp_HoveredSlateSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HoveredSlateSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HoveredSlateSound, FButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_PressedSlateSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PressedSlateSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PressedSlateSound, FButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_PressedPadding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PressedPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PressedPadding, FButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_NormalPadding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NormalPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NormalPadding, FButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_Disabled = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Disabled"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Disabled, FButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_Pressed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Pressed"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Pressed, FButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_Hovered = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Hovered"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Hovered, FButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_Normal = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Normal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Normal, FButtonStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SButton"));
			MetaData->SetValue(NewProp_HoveredSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_PressedSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HoveredSlateSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_HoveredSlateSound, TEXT("DisplayName"), TEXT("Hovered Sound"));
			MetaData->SetValue(NewProp_HoveredSlateSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HoveredSlateSound, TEXT("ToolTip"), TEXT("The sound the button should play when initially hovered over"));
			MetaData->SetValue(NewProp_PressedSlateSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_PressedSlateSound, TEXT("DisplayName"), TEXT("Pressed Sound"));
			MetaData->SetValue(NewProp_PressedSlateSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_PressedSlateSound, TEXT("ToolTip"), TEXT("The sound the button should play when pressed"));
			MetaData->SetValue(NewProp_PressedPadding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_PressedPadding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_PressedPadding, TEXT("ToolTip"), TEXT("Same as NormalPadding but used when the button is pressed. Allows for moving the content to match\nany \"movement\" in the button's border image."));
			MetaData->SetValue(NewProp_NormalPadding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_NormalPadding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_NormalPadding, TEXT("ToolTip"), TEXT("Padding that accounts for the border in the button's background image.\nWhen this is applied, the content of the button should appear flush\nwith the button's border. Use this padding when the button is not pressed."));
			MetaData->SetValue(NewProp_Disabled, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Disabled, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Disabled, TEXT("ToolTip"), TEXT("Button appearance when disabled, by default this is set to an invalid resource when that is the case default disabled drawing is used."));
			MetaData->SetValue(NewProp_Pressed, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Pressed, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Pressed, TEXT("ToolTip"), TEXT("Button appearance when pressed"));
			MetaData->SetValue(NewProp_Hovered, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Hovered, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Hovered, TEXT("ToolTip"), TEXT("Button appearance when hovered"));
			MetaData->SetValue(NewProp_Normal, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Normal, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Normal, TEXT("ToolTip"), TEXT("Button appearance when the button is not hovered or pressed"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FButtonStyle_CRC() { return 1350678244U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTextBlockStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FTextBlockStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TextBlockStyle"), sizeof(FTextBlockStyle), Get_Z_Construct_UScriptStruct_FTextBlockStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TextBlockStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FTextBlockStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_HighlightShape = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HighlightShape"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HighlightShape, FTextBlockStyle), 0x0000040000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HighlightColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HighlightColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HighlightColor, FTextBlockStyle), 0x0000040000000005, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_SelectedBackgroundColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SelectedBackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SelectedBackgroundColor, FTextBlockStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_ShadowColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ShadowColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ShadowColorAndOpacity, FTextBlockStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_ShadowOffset = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ShadowOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ShadowOffset, FTextBlockStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, FTextBlockStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font, FTextBlockStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateFontInfo());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an STextBlock"));
			MetaData->SetValue(NewProp_HighlightShape, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HighlightShape, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HighlightShape, TEXT("ToolTip"), TEXT("The shape of highlighted text"));
			MetaData->SetValue(NewProp_HighlightColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HighlightColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HighlightColor, TEXT("ToolTip"), TEXT("The color of highlighted text"));
			MetaData->SetValue(NewProp_SelectedBackgroundColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_SelectedBackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_SelectedBackgroundColor, TEXT("ToolTip"), TEXT("The background color of selected text"));
			MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("ToolTip"), TEXT("The color and opacity of the shadow"));
			MetaData->SetValue(NewProp_ShadowOffset, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ShadowOffset, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ShadowOffset, TEXT("ToolTip"), TEXT("How much should the shadow be offset? An offset of 0 implies no shadow."));
			MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("DisplayName"), TEXT("Color"));
			MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("The color and opacity of this text"));
			MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font family and size to be used when displaying this text."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTextBlockStyle_CRC() { return 2133278399U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCheckBoxStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FCheckBoxStyle_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CheckBoxStyle"), sizeof(FCheckBoxStyle), Get_Z_Construct_UScriptStruct_FCheckBoxStyle_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CheckBoxStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FCheckBoxStyle>, EStructFlags(0x00000201));
			UProperty* NewProp_HoveredSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HoveredSound"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(HoveredSound_DEPRECATED, FCheckBoxStyle), 0x0000000020000000);
			UProperty* NewProp_UncheckedSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UncheckedSound"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(UncheckedSound_DEPRECATED, FCheckBoxStyle), 0x0000000020000000);
			UProperty* NewProp_CheckedSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CheckedSound"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(CheckedSound_DEPRECATED, FCheckBoxStyle), 0x0000000020000000);
			UProperty* NewProp_HoveredSlateSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HoveredSlateSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HoveredSlateSound, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_UncheckedSlateSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UncheckedSlateSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UncheckedSlateSound, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_CheckedSlateSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CheckedSlateSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CheckedSlateSound, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_BorderBackgroundColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BorderBackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BorderBackgroundColor, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			UProperty* NewProp_UndeterminedPressedImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UndeterminedPressedImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UndeterminedPressedImage, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_UndeterminedHoveredImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UndeterminedHoveredImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UndeterminedHoveredImage, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_UndeterminedImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UndeterminedImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UndeterminedImage, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_CheckedPressedImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CheckedPressedImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CheckedPressedImage, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_CheckedHoveredImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CheckedHoveredImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CheckedHoveredImage, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_CheckedImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CheckedImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CheckedImage, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_UncheckedPressedImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UncheckedPressedImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UncheckedPressedImage, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_UncheckedHoveredImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UncheckedHoveredImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UncheckedHoveredImage, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_UncheckedImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("UncheckedImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(UncheckedImage, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_CheckBoxType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CheckBoxType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CheckBoxType, FCheckBoxStyle), 0x0000000000000005, Z_Construct_UEnum_SlateCore_ESlateCheckBoxType());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SCheckBox"));
			MetaData->SetValue(NewProp_HoveredSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_UncheckedSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_CheckedSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HoveredSlateSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_HoveredSlateSound, TEXT("DisplayName"), TEXT("Hovered Sound"));
			MetaData->SetValue(NewProp_HoveredSlateSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_HoveredSlateSound, TEXT("ToolTip"), TEXT("The sound the check box should play when initially hovered over"));
			MetaData->SetValue(NewProp_UncheckedSlateSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_UncheckedSlateSound, TEXT("DisplayName"), TEXT("Unchecked Sound"));
			MetaData->SetValue(NewProp_UncheckedSlateSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_UncheckedSlateSound, TEXT("ToolTip"), TEXT("The sound the check box should play when unchecked"));
			MetaData->SetValue(NewProp_CheckedSlateSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_CheckedSlateSound, TEXT("DisplayName"), TEXT("Checked Sound"));
			MetaData->SetValue(NewProp_CheckedSlateSound, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_CheckedSlateSound, TEXT("ToolTip"), TEXT("The sound the check box should play when checked"));
			MetaData->SetValue(NewProp_BorderBackgroundColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BorderBackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_BorderBackgroundColor, TEXT("ToolTip"), TEXT("BorderBackgroundColor refers to the actual color and opacity of the supplied border image on toggle buttons"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("The foreground color"));
			MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("Padding"));
			MetaData->SetValue(NewProp_UndeterminedPressedImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_UndeterminedPressedImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_UndeterminedPressedImage, TEXT("ToolTip"), TEXT("CheckBox appearance when CheckBox is undetermined and pressed"));
			MetaData->SetValue(NewProp_UndeterminedHoveredImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_UndeterminedHoveredImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_UndeterminedHoveredImage, TEXT("ToolTip"), TEXT("CheckBox appearance when CheckBox is undetermined and hovered"));
			MetaData->SetValue(NewProp_UndeterminedImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_UndeterminedImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_UndeterminedImage, TEXT("ToolTip"), TEXT("CheckBox appearance when the CheckBox is undetermined"));
			MetaData->SetValue(NewProp_CheckedPressedImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_CheckedPressedImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_CheckedPressedImage, TEXT("ToolTip"), TEXT("CheckBox appearance when checked and pressed"));
			MetaData->SetValue(NewProp_CheckedHoveredImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_CheckedHoveredImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_CheckedHoveredImage, TEXT("ToolTip"), TEXT("CheckBox appearance when checked and hovered"));
			MetaData->SetValue(NewProp_CheckedImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_CheckedImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_CheckedImage, TEXT("ToolTip"), TEXT("CheckBox appearance when the CheckBox is checked"));
			MetaData->SetValue(NewProp_UncheckedPressedImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_UncheckedPressedImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_UncheckedPressedImage, TEXT("ToolTip"), TEXT("CheckBox appearance when the CheckBox is unchecked and hovered"));
			MetaData->SetValue(NewProp_UncheckedHoveredImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_UncheckedHoveredImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_UncheckedHoveredImage, TEXT("ToolTip"), TEXT("CheckBox appearance when the CheckBox is unchecked and hovered"));
			MetaData->SetValue(NewProp_UncheckedImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_UncheckedImage, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_UncheckedImage, TEXT("ToolTip"), TEXT("CheckBox appearance when the CheckBox is unchecked (normal)"));
			MetaData->SetValue(NewProp_CheckBoxType, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_CheckBoxType, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
			MetaData->SetValue(NewProp_CheckBoxType, TEXT("ToolTip"), TEXT("The visual type of the checkbox"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCheckBoxStyle_CRC() { return 1403804478U; }
	UClass* Z_Construct_UClass_USlateTypes_NoRegister()
	{
		return USlateTypes::StaticClass();
	}
	UClass* Z_Construct_UClass_USlateTypes()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_SlateCore();
			OuterClass = USlateTypes::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Styling/SlateTypes.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateTypes.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("HACK: We need a UClass here or UHT will complain."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USlateTypes(Z_Construct_UClass_USlateTypes, TEXT("USlateTypes"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USlateTypes);
	UClass* Z_Construct_UClass_USlateWidgetStyleContainerInterface_NoRegister()
	{
		return USlateWidgetStyleContainerInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_USlateWidgetStyleContainerInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_SlateCore();
			OuterClass = USlateWidgetStyleContainerInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20104081;


				OuterClass->StaticLink();
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USlateWidgetStyleContainerInterface(Z_Construct_UClass_USlateWidgetStyleContainerInterface, TEXT("USlateWidgetStyleContainerInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USlateWidgetStyleContainerInterface);
	UClass* Z_Construct_UClass_USlateWidgetStyleContainerBase_NoRegister()
	{
		return USlateWidgetStyleContainerBase::StaticClass();
	}
	UClass* Z_Construct_UClass_USlateWidgetStyleContainerBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_SlateCore();
			OuterClass = USlateWidgetStyleContainerBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_USlateWidgetStyleContainerInterface_NoRegister(), VTABLE_OFFSET(USlateWidgetStyleContainerBase, ISlateWidgetStyleContainerInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Styling/SlateWidgetStyleContainerBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateWidgetStyleContainerBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Just a wrapper for the struct with real data in it."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USlateWidgetStyleContainerBase(Z_Construct_UClass_USlateWidgetStyleContainerBase, TEXT("USlateWidgetStyleContainerBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USlateWidgetStyleContainerBase);
	UClass* Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister()
	{
		return USlateWidgetStyleAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_USlateWidgetStyleAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_SlateCore();
			OuterClass = USlateWidgetStyleAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CustomStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomStyle"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CustomStyle, USlateWidgetStyleAsset), 0x0002000000080009, Z_Construct_UClass_USlateWidgetStyleContainerBase_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Styling/SlateWidgetStyleAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateWidgetStyleAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Just a wrapper for the struct with real data in it."));
				MetaData->SetValue(NewProp_CustomStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_CustomStyle, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CustomStyle, TEXT("ModuleRelativePath"), TEXT("Public/Styling/SlateWidgetStyleAsset.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USlateWidgetStyleAsset(Z_Construct_UClass_USlateWidgetStyleAsset, TEXT("USlateWidgetStyleAsset"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USlateWidgetStyleAsset);
	UEnum* Z_Construct_UEnum_SlateCore_EFocusCause()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EFocusCause_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EFocusCause"), 0, Get_Z_Construct_UEnum_SlateCore_EFocusCause_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFocusCause"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFocusCause::Mouse")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFocusCause::Navigation")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFocusCause::SetDirectly")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFocusCause::Cleared")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFocusCause::OtherWidgetLostFocus")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFocusCause::WindowActivate")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFocusCause::EFocusCause_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Cleared.ToolTip"), TEXT("Focus was explicitly cleared via the escape key or other similar action."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Input/Events.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Mouse.ToolTip"), TEXT("Focus was changed because of a mouse action."));
			MetaData->SetValue(ReturnEnum, TEXT("Navigation.ToolTip"), TEXT("Focus was changed in response to a navigation, such as the arrow keys, TAB key, controller DPad, ..."));
			MetaData->SetValue(ReturnEnum, TEXT("OtherWidgetLostFocus.ToolTip"), TEXT("Focus was changed because another widget lost focus, and focus moved to a new widget."));
			MetaData->SetValue(ReturnEnum, TEXT("SetDirectly.ToolTip"), TEXT("Focus was changed because someone asked the application to change it."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Context for focus change"));
			MetaData->SetValue(ReturnEnum, TEXT("WindowActivate.ToolTip"), TEXT("Focus was set in response to the owning window being activated."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EFocusCause_CRC() { return 14154182U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNavigationEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FNavigationEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("NavigationEvent"), sizeof(FNavigationEvent), Get_Z_Construct_UScriptStruct_FNavigationEvent_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavigationEvent"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FInputEvent(), new UScriptStruct::TCppStructOps<FNavigationEvent>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Input/Events.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FNavigationEvent describes a navigation action (Left, Right, Up, Down)\nIt is passed to event handlers dealing with navigation."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNavigationEvent_CRC() { return 2073863962U; }
	UScriptStruct* Z_Construct_UScriptStruct_FMotionEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FMotionEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("MotionEvent"), sizeof(FMotionEvent), Get_Z_Construct_UScriptStruct_FMotionEvent_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MotionEvent"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FInputEvent(), new UScriptStruct::TCppStructOps<FMotionEvent>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Input/Events.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FMotionEvent describes a touch pad action (press, move, lift)\nIt is passed to event handlers dealing with touch input."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FMotionEvent_CRC() { return 1585902439U; }
	UScriptStruct* Z_Construct_UScriptStruct_FControllerEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FControllerEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("ControllerEvent"), sizeof(FControllerEvent), Get_Z_Construct_UScriptStruct_FControllerEvent_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ControllerEvent"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FInputEvent(), new UScriptStruct::TCppStructOps<FControllerEvent>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Input/Events.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("DEPRECATED 4.6 - Do not use //@Todo slate: Remove this as soon as the 4.6 deprecated API is Removed."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FControllerEvent_CRC() { return 1921039187U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPointerEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FPointerEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PointerEvent"), sizeof(FPointerEvent), Get_Z_Construct_UScriptStruct_FPointerEvent_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FInputEvent(), new UScriptStruct::TCppStructOps<FPointerEvent>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Input/Events.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FPointerEvent describes a mouse or touch action (e.g. Press, Release, Move, etc).\nIt is passed to event handlers dealing with pointer-based input."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPointerEvent_CRC() { return 1091774962U; }
	UScriptStruct* Z_Construct_UScriptStruct_FCharacterEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FCharacterEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("CharacterEvent"), sizeof(FCharacterEvent), Get_Z_Construct_UScriptStruct_FCharacterEvent_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CharacterEvent"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FInputEvent(), new UScriptStruct::TCppStructOps<FCharacterEvent>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Input/Events.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FCharacterEvent describes a keyboard action where the utf-16 code is given.  Used for OnKeyChar messages"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FCharacterEvent_CRC() { return 1958709337U; }
	UScriptStruct* Z_Construct_UScriptStruct_FAnalogInputEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnalogInputEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnalogInputEvent"), sizeof(FAnalogInputEvent), Get_Z_Construct_UScriptStruct_FAnalogInputEvent_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnalogInputEvent"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FKeyEvent(), new UScriptStruct::TCppStructOps<FAnalogInputEvent>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Input/Events.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FAnalogEvent describes a analog key value.\nIt is passed to event handlers dealing with analog keys."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnalogInputEvent_CRC() { return 4122383695U; }
	UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FKeyEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("KeyEvent"), sizeof(FKeyEvent), Get_Z_Construct_UScriptStruct_FKeyEvent_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KeyEvent"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FInputEvent(), new UScriptStruct::TCppStructOps<FKeyEvent>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Input/Events.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FKeyEvent describes a key action (keyboard/controller key/button pressed or released.)\nIt is passed to event handlers dealing with key input."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FKeyEvent_CRC() { return 2648190445U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInputEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FInputEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("InputEvent"), sizeof(FInputEvent), Get_Z_Construct_UScriptStruct_FInputEvent_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InputEvent"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInputEvent>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Input/Events.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Base class for all mouse and keyevents."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInputEvent_CRC() { return 4231242628U; }
	UScriptStruct* Z_Construct_UScriptStruct_FFocusEvent()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FFocusEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("FocusEvent"), sizeof(FFocusEvent), Get_Z_Construct_UScriptStruct_FFocusEvent_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FocusEvent"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FFocusEvent>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Input/Events.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("FFocusEvent is used when notifying widgets about keyboard focus changes\nIt is passed to event handlers dealing with keyboard focus"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FFocusEvent_CRC() { return 989212154U; }
	UEnum* Z_Construct_UEnum_SlateCore_EUINavigationRule()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UEnum_SlateCore_EUINavigationRule_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EUINavigationRule"), 0, Get_Z_Construct_UEnum_SlateCore_EUINavigationRule_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EUINavigationRule"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigationRule::Escape")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigationRule::Explicit")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigationRule::Wrap")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigationRule::Stop")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigationRule::Custom")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigationRule::Invalid")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUINavigationRule::EUINavigationRule_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Custom.ToolTip"), TEXT("Custom navigation handled by user code."));
			MetaData->SetValue(ReturnEnum, TEXT("Escape.ToolTip"), TEXT("Allow the movement to continue in that direction, seeking the next navigable widget automatically."));
			MetaData->SetValue(ReturnEnum, TEXT("Explicit.ToolTip"), TEXT("Move to a specific widget."));
			MetaData->SetValue(ReturnEnum, TEXT("Invalid.ToolTip"), TEXT("Invalid Rule"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Input/NavigationReply.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Stop.ToolTip"), TEXT("Stops movement in this direction"));
			MetaData->SetValue(ReturnEnum, TEXT("Wrap.ToolTip"), TEXT("Wrap movement inside this container, causing the movement to cycle around from the opposite side,\nif the navigation attempt would have escaped."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_SlateCore_EUINavigationRule_CRC() { return 4014482244U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGeometry()
	{
		UPackage* Outer=Z_Construct_UPackage_SlateCore();
		extern uint32 Get_Z_Construct_UScriptStruct_FGeometry_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("Geometry"), sizeof(FGeometry), Get_Z_Construct_UScriptStruct_FGeometry_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Geometry"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGeometry>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Layout/Geometry.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the position, size, and absolute position of a Widget in Slate.\nThe absolute location of a geometry is usually screen space or\nwindow space depending on where the geometry originated.\nGeometries are usually paired with a SWidget pointer in order\nto provide information about a specific widget (see FArrangedWidget).\nA Geometry's parent is generally thought to be the Geometry of the\nthe corresponding parent widget."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGeometry_CRC() { return 2602514207U; }
	UPackage* Z_Construct_UPackage_SlateCore()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/SlateCore")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xC860CD03;
			Guid.B = 0xFABA0BC1;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
