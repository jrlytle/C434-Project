// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/StatsViewerPrivatePCH.h"
#include "StatsViewer.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeStatsViewer() {}
static class UEnum* ECookerStatsObjectSets_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern STATSVIEWER_API class UEnum* Z_Construct_UEnum_StatsViewer_ECookerStatsObjectSets();
		extern STATSVIEWER_API class UPackage* Z_Construct_UPackage_StatsViewer();
		Singleton = GetStaticEnum(Z_Construct_UEnum_StatsViewer_ECookerStatsObjectSets, Z_Construct_UPackage_StatsViewer(), TEXT("ECookerStatsObjectSets"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ECookerStatsObjectSets(ECookerStatsObjectSets_StaticEnum, TEXT("/Script/StatsViewer"));
	void UCookerStats::StaticRegisterNativesUCookerStats()
	{
	}
	IMPLEMENT_CLASS(UCookerStats, 4012527241);
static class UEnum* ELightingBuildInfoObjectSets_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern STATSVIEWER_API class UEnum* Z_Construct_UEnum_StatsViewer_ELightingBuildInfoObjectSets();
		extern STATSVIEWER_API class UPackage* Z_Construct_UPackage_StatsViewer();
		Singleton = GetStaticEnum(Z_Construct_UEnum_StatsViewer_ELightingBuildInfoObjectSets, Z_Construct_UPackage_StatsViewer(), TEXT("ELightingBuildInfoObjectSets"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ELightingBuildInfoObjectSets(ELightingBuildInfoObjectSets_StaticEnum, TEXT("/Script/StatsViewer"));
	void ULightingBuildInfo::StaticRegisterNativesULightingBuildInfo()
	{
	}
	IMPLEMENT_CLASS(ULightingBuildInfo, 440291744);
static class UEnum* EPrimitiveObjectSets_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern STATSVIEWER_API class UEnum* Z_Construct_UEnum_StatsViewer_EPrimitiveObjectSets();
		extern STATSVIEWER_API class UPackage* Z_Construct_UPackage_StatsViewer();
		Singleton = GetStaticEnum(Z_Construct_UEnum_StatsViewer_EPrimitiveObjectSets, Z_Construct_UPackage_StatsViewer(), TEXT("EPrimitiveObjectSets"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EPrimitiveObjectSets(EPrimitiveObjectSets_StaticEnum, TEXT("/Script/StatsViewer"));
	void UPrimitiveStats::StaticRegisterNativesUPrimitiveStats()
	{
	}
	IMPLEMENT_CLASS(UPrimitiveStats, 1300134691);
static class UEnum* EStaticMeshLightingInfoObjectSets_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern STATSVIEWER_API class UEnum* Z_Construct_UEnum_StatsViewer_EStaticMeshLightingInfoObjectSets();
		extern STATSVIEWER_API class UPackage* Z_Construct_UPackage_StatsViewer();
		Singleton = GetStaticEnum(Z_Construct_UEnum_StatsViewer_EStaticMeshLightingInfoObjectSets, Z_Construct_UPackage_StatsViewer(), TEXT("EStaticMeshLightingInfoObjectSets"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EStaticMeshLightingInfoObjectSets(EStaticMeshLightingInfoObjectSets_StaticEnum, TEXT("/Script/StatsViewer"));
	void UStaticMeshLightingInfo::StaticRegisterNativesUStaticMeshLightingInfo()
	{
	}
	IMPLEMENT_CLASS(UStaticMeshLightingInfo, 243538698);
static class UEnum* ETextureObjectSets_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern STATSVIEWER_API class UEnum* Z_Construct_UEnum_StatsViewer_ETextureObjectSets();
		extern STATSVIEWER_API class UPackage* Z_Construct_UPackage_StatsViewer();
		Singleton = GetStaticEnum(Z_Construct_UEnum_StatsViewer_ETextureObjectSets, Z_Construct_UPackage_StatsViewer(), TEXT("ETextureObjectSets"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETextureObjectSets(ETextureObjectSets_StaticEnum, TEXT("/Script/StatsViewer"));
	void UTextureStats::StaticRegisterNativesUTextureStats()
	{
	}
	IMPLEMENT_CLASS(UTextureStats, 630975373);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh_NoRegister();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_TextureGroup();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EPixelFormat();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture_NoRegister();

	STATSVIEWER_API class UEnum* Z_Construct_UEnum_StatsViewer_ECookerStatsObjectSets();
	STATSVIEWER_API class UClass* Z_Construct_UClass_UCookerStats_NoRegister();
	STATSVIEWER_API class UClass* Z_Construct_UClass_UCookerStats();
	STATSVIEWER_API class UEnum* Z_Construct_UEnum_StatsViewer_ELightingBuildInfoObjectSets();
	STATSVIEWER_API class UClass* Z_Construct_UClass_ULightingBuildInfo_NoRegister();
	STATSVIEWER_API class UClass* Z_Construct_UClass_ULightingBuildInfo();
	STATSVIEWER_API class UEnum* Z_Construct_UEnum_StatsViewer_EPrimitiveObjectSets();
	STATSVIEWER_API class UClass* Z_Construct_UClass_UPrimitiveStats_NoRegister();
	STATSVIEWER_API class UClass* Z_Construct_UClass_UPrimitiveStats();
	STATSVIEWER_API class UEnum* Z_Construct_UEnum_StatsViewer_EStaticMeshLightingInfoObjectSets();
	STATSVIEWER_API class UClass* Z_Construct_UClass_UStaticMeshLightingInfo_NoRegister();
	STATSVIEWER_API class UClass* Z_Construct_UClass_UStaticMeshLightingInfo();
	STATSVIEWER_API class UEnum* Z_Construct_UEnum_StatsViewer_ETextureObjectSets();
	STATSVIEWER_API class UClass* Z_Construct_UClass_UTextureStats_NoRegister();
	STATSVIEWER_API class UClass* Z_Construct_UClass_UTextureStats();
	STATSVIEWER_API class UPackage* Z_Construct_UPackage_StatsViewer();
	UEnum* Z_Construct_UEnum_StatsViewer_ECookerStatsObjectSets()
	{
		UPackage* Outer=Z_Construct_UPackage_StatsViewer();
		extern uint32 Get_Z_Construct_UEnum_StatsViewer_ECookerStatsObjectSets_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ECookerStatsObjectSets"), 0, Get_Z_Construct_UEnum_StatsViewer_ECookerStatsObjectSets_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECookerStatsObjectSets"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CookerStatsObjectSets_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("CookerStatsObjectSets_MAX")), 1));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("CookerStatsObjectSets_Default.DisplayName"), TEXT("Default"));
			MetaData->SetValue(ReturnEnum, TEXT("CookerStatsObjectSets_Default.ToolTip"), TEXT("View cooker statistics"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/CookerStats.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum defining the object sets for this stats object"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_StatsViewer_ECookerStatsObjectSets_CRC() { return 992396929U; }
	UClass* Z_Construct_UClass_UCookerStats_NoRegister()
	{
		return UCookerStats::StaticClass();
	}
	UClass* Z_Construct_UClass_UCookerStats()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_StatsViewer();
			OuterClass = UCookerStats::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Path = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Path"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Path, UCookerStats), 0x0000010000020001);
				UProperty* NewProp_SizeAfter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeAfter"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SizeAfter, UCookerStats), 0x0000010000020001);
				UProperty* NewProp_SizeBefore = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SizeBefore"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SizeBefore, UCookerStats), 0x0000010000020001);
				UProperty* NewProp_Assets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Assets"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Assets, UCookerStats), 0x0004010000020001);
				UProperty* NewProp_Assets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Assets, TEXT("Assets"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000020000, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Cooker Stats"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("CookerStats.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/CookerStats.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectSetType"), TEXT("ECookerStatsObjectSets"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Statistics for a cooked asset.\n\nNote: We assume that asset files are not larger than 2GB, because the StatsViewer is still lacking int64 support."));
				MetaData->SetValue(NewProp_Path, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Path, TEXT("ColumnWidth"), TEXT("300"));
				MetaData->SetValue(NewProp_Path, TEXT("ModuleRelativePath"), TEXT("Classes/CookerStats.h"));
				MetaData->SetValue(NewProp_Path, TEXT("ToolTip"), TEXT("Asset path without the name \"package.[group.]\""));
				MetaData->SetValue(NewProp_SizeAfter, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_SizeAfter, TEXT("ColumnWidth"), TEXT("50"));
				MetaData->SetValue(NewProp_SizeAfter, TEXT("DisplayName"), TEXT("Size (Cooked)"));
				MetaData->SetValue(NewProp_SizeAfter, TEXT("ModuleRelativePath"), TEXT("Classes/CookerStats.h"));
				MetaData->SetValue(NewProp_SizeAfter, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_SizeAfter, TEXT("ToolTip"), TEXT("The size of the assets after cooking."));
				MetaData->SetValue(NewProp_SizeAfter, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_SizeBefore, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_SizeBefore, TEXT("ColumnWidth"), TEXT("50"));
				MetaData->SetValue(NewProp_SizeBefore, TEXT("DisplayName"), TEXT("Size (Original)"));
				MetaData->SetValue(NewProp_SizeBefore, TEXT("ModuleRelativePath"), TEXT("Classes/CookerStats.h"));
				MetaData->SetValue(NewProp_SizeBefore, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_SizeBefore, TEXT("ToolTip"), TEXT("The size of the assets before cooking."));
				MetaData->SetValue(NewProp_SizeBefore, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_Assets, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Assets, TEXT("ColumnWidth"), TEXT("100"));
				MetaData->SetValue(NewProp_Assets, TEXT("DisplayName"), TEXT("Asset(s)"));
				MetaData->SetValue(NewProp_Assets, TEXT("ModuleRelativePath"), TEXT("Classes/CookerStats.h"));
				MetaData->SetValue(NewProp_Assets, TEXT("ToolTip"), TEXT("The assets contained in the file."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCookerStats(Z_Construct_UClass_UCookerStats, TEXT("UCookerStats"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCookerStats);
	UEnum* Z_Construct_UEnum_StatsViewer_ELightingBuildInfoObjectSets()
	{
		UPackage* Outer=Z_Construct_UPackage_StatsViewer();
		extern uint32 Get_Z_Construct_UEnum_StatsViewer_ELightingBuildInfoObjectSets_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ELightingBuildInfoObjectSets"), 0, Get_Z_Construct_UEnum_StatsViewer_ELightingBuildInfoObjectSets_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ELightingBuildInfoObjectSets"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LightingBuildInfoObjectSets_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("LightingBuildInfoObjectSets_MAX")), 1));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("LightingBuildInfoObjectSets_Default.DisplayName"), TEXT("Default"));
			MetaData->SetValue(ReturnEnum, TEXT("LightingBuildInfoObjectSets_Default.ToolTip"), TEXT("View lighting build statistics"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/LightingBuildInfo.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum defining the object sets for this stats object"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_StatsViewer_ELightingBuildInfoObjectSets_CRC() { return 516858520U; }
	UClass* Z_Construct_UClass_ULightingBuildInfo_NoRegister()
	{
		return ULightingBuildInfo::StaticClass();
	}
	UClass* Z_Construct_UClass_ULightingBuildInfo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_StatsViewer();
			OuterClass = ULightingBuildInfo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LevelName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LevelName, ULightingBuildInfo), 0x0000010000020001);
				UProperty* NewProp_TotalTexelMemory = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TotalTexelMemory"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TotalTexelMemory, ULightingBuildInfo), 0x0000010000020001);
				UProperty* NewProp_UnmappedTexelsMemory = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnmappedTexelsMemory"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(UnmappedTexelsMemory, ULightingBuildInfo), 0x0000010000020001);
				UProperty* NewProp_UnmappedTexelsPercentage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UnmappedTexelsPercentage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(UnmappedTexelsPercentage, ULightingBuildInfo), 0x0000010000020001);
				UProperty* NewProp_LightingTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightingTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LightingTime, ULightingBuildInfo), 0x0000010000020001);
				UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(Object, ULightingBuildInfo), 0x0004010000020001, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Lighting Build Info"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LightingBuildInfo.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/LightingBuildInfo.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectSetType"), TEXT("ELightingBuildInfoObjectSets"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Statistics page for lighting."));
				MetaData->SetValue(NewProp_LevelName, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LevelName, TEXT("ColumnWidth"), TEXT("168"));
				MetaData->SetValue(NewProp_LevelName, TEXT("ModuleRelativePath"), TEXT("Classes/LightingBuildInfo.h"));
				MetaData->SetValue(NewProp_LevelName, TEXT("ToolTip"), TEXT("The name of the level this object resides in"));
				MetaData->SetValue(NewProp_TotalTexelMemory, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_TotalTexelMemory, TEXT("ColumnWidth"), TEXT("220"));
				MetaData->SetValue(NewProp_TotalTexelMemory, TEXT("ModuleRelativePath"), TEXT("Classes/LightingBuildInfo.h"));
				MetaData->SetValue(NewProp_TotalTexelMemory, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_TotalTexelMemory, TEXT("SortMode"), TEXT("Descending"));
				MetaData->SetValue(NewProp_TotalTexelMemory, TEXT("ToolTip"), TEXT("The memory consumed by all texels for this object, in KB"));
				MetaData->SetValue(NewProp_TotalTexelMemory, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_UnmappedTexelsMemory, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_UnmappedTexelsMemory, TEXT("ColumnWidth"), TEXT("194"));
				MetaData->SetValue(NewProp_UnmappedTexelsMemory, TEXT("ModuleRelativePath"), TEXT("Classes/LightingBuildInfo.h"));
				MetaData->SetValue(NewProp_UnmappedTexelsMemory, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_UnmappedTexelsMemory, TEXT("ToolTip"), TEXT("The memory consumed by unmapped texels for this object, in KB"));
				MetaData->SetValue(NewProp_UnmappedTexelsMemory, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_UnmappedTexelsPercentage, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_UnmappedTexelsPercentage, TEXT("ColumnWidth"), TEXT("142"));
				MetaData->SetValue(NewProp_UnmappedTexelsPercentage, TEXT("DisplayName"), TEXT("Unmapped Texels"));
				MetaData->SetValue(NewProp_UnmappedTexelsPercentage, TEXT("ModuleRelativePath"), TEXT("Classes/LightingBuildInfo.h"));
				MetaData->SetValue(NewProp_UnmappedTexelsPercentage, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_UnmappedTexelsPercentage, TEXT("ToolTip"), TEXT("The percentage of unmapped texels for this object."));
				MetaData->SetValue(NewProp_UnmappedTexelsPercentage, TEXT("Unit"), TEXT("%"));
				MetaData->SetValue(NewProp_LightingTime, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LightingTime, TEXT("ColumnWidth"), TEXT("200"));
				MetaData->SetValue(NewProp_LightingTime, TEXT("ModuleRelativePath"), TEXT("Classes/LightingBuildInfo.h"));
				MetaData->SetValue(NewProp_LightingTime, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_LightingTime, TEXT("ToolTip"), TEXT("The lighting time this object took."));
				MetaData->SetValue(NewProp_LightingTime, TEXT("Unit"), TEXT("s"));
				MetaData->SetValue(NewProp_Object, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Object, TEXT("ColumnWidth"), TEXT("150"));
				MetaData->SetValue(NewProp_Object, TEXT("ModuleRelativePath"), TEXT("Classes/LightingBuildInfo.h"));
				MetaData->SetValue(NewProp_Object, TEXT("ToolTip"), TEXT("The actor and/or object that is related to this info."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULightingBuildInfo(Z_Construct_UClass_ULightingBuildInfo, TEXT("ULightingBuildInfo"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULightingBuildInfo);
	UEnum* Z_Construct_UEnum_StatsViewer_EPrimitiveObjectSets()
	{
		UPackage* Outer=Z_Construct_UPackage_StatsViewer();
		extern uint32 Get_Z_Construct_UEnum_StatsViewer_EPrimitiveObjectSets_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EPrimitiveObjectSets"), 0, Get_Z_Construct_UEnum_StatsViewer_EPrimitiveObjectSets_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPrimitiveObjectSets"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PrimitiveObjectSets_AllObjects")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PrimitiveObjectSets_CurrentLevel")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PrimitiveObjectSets_SelectedObjects")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PrimitiveObjectSets_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PrimitiveObjectSets_AllObjects.DisplayName"), TEXT("All Objects"));
			MetaData->SetValue(ReturnEnum, TEXT("PrimitiveObjectSets_AllObjects.ToolTip"), TEXT("View primitive statistics for all objects in all levels"));
			MetaData->SetValue(ReturnEnum, TEXT("PrimitiveObjectSets_CurrentLevel.DisplayName"), TEXT("Current Level"));
			MetaData->SetValue(ReturnEnum, TEXT("PrimitiveObjectSets_CurrentLevel.ToolTip"), TEXT("View primitive statistics for objects in the current level"));
			MetaData->SetValue(ReturnEnum, TEXT("PrimitiveObjectSets_SelectedObjects.DisplayName"), TEXT("Selected Objects"));
			MetaData->SetValue(ReturnEnum, TEXT("PrimitiveObjectSets_SelectedObjects.ToolTip"), TEXT("View primitive statistics for selected objects"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum defining the object sets for this stats object"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_StatsViewer_EPrimitiveObjectSets_CRC() { return 670183062U; }
	UClass* Z_Construct_UClass_UPrimitiveStats_NoRegister()
	{
		return UPrimitiveStats::StaticClass();
	}
	UClass* Z_Construct_UClass_UPrimitiveStats()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_StatsViewer();
			OuterClass = UPrimitiveStats::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RadiusAvg = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadiusAvg"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RadiusAvg, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_RadiusMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadiusMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RadiusMax, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_RadiusMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadiusMin"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RadiusMin, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_LMSMResolution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LMSMResolution"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LMSMResolution, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_LightMapData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightMapData"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LightMapData, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_ObjLightCost = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ObjLightCost"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ObjLightCost, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_LightsTotal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightsTotal"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LightsTotal, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_LightsOther = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightsOther"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LightsOther, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_LightsLM = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightsLM"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LightsLM, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_InstVertexColorMem = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InstVertexColorMem"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InstVertexColorMem, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_VertexColorMem = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexColorMem"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VertexColorMem, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_ResourceSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ResourceSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ResourceSize, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_InstTriangles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InstTriangles"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InstTriangles, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_Triangles = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Triangles"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Triangles, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_InstSections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InstSections"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InstSections, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_Sections = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Sections"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Sections, UPrimitiveStats), 0x0000000000000000);
				UProperty* NewProp_Count = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Count"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Count, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Type"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Type, UPrimitiveStats), 0x0000010000020001);
				UProperty* NewProp_Actors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Actors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Actors, UPrimitiveStats), 0x0004010000020001);
				UProperty* NewProp_Actors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Actors, TEXT("Actors"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000020000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_Object = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Object"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(Object, UPrimitiveStats), 0x0004010000020001, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Primitive Stats"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PrimitiveStats.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectSetType"), TEXT("EPrimitiveObjectSets"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Statistics page for primitives."));
				MetaData->SetValue(NewProp_RadiusAvg, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_RadiusAvg, TEXT("ColumnWidth"), TEXT("86"));
				MetaData->SetValue(NewProp_RadiusAvg, TEXT("DisplayName"), TEXT("Avg R"));
				MetaData->SetValue(NewProp_RadiusAvg, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_RadiusAvg, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_RadiusAvg, TEXT("ToolTip"), TEXT("Average radius of bounding sphere of instance in map"));
				MetaData->SetValue(NewProp_RadiusMax, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_RadiusMax, TEXT("ColumnWidth"), TEXT("88"));
				MetaData->SetValue(NewProp_RadiusMax, TEXT("DisplayName"), TEXT("Max R"));
				MetaData->SetValue(NewProp_RadiusMax, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_RadiusMax, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_RadiusMax, TEXT("ToolTip"), TEXT("Maximum radius of bounding sphere of instance in map"));
				MetaData->SetValue(NewProp_RadiusMin, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_RadiusMin, TEXT("ColumnWidth"), TEXT("84"));
				MetaData->SetValue(NewProp_RadiusMin, TEXT("DisplayName"), TEXT("Min R"));
				MetaData->SetValue(NewProp_RadiusMin, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_RadiusMin, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_RadiusMin, TEXT("ToolTip"), TEXT("Minimum radius of bounding sphere of instance in map"));
				MetaData->SetValue(NewProp_LMSMResolution, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LMSMResolution, TEXT("ColumnWidth"), TEXT("74"));
				MetaData->SetValue(NewProp_LMSMResolution, TEXT("DisplayName"), TEXT("Res"));
				MetaData->SetValue(NewProp_LMSMResolution, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_LMSMResolution, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_LMSMResolution, TEXT("ToolTip"), TEXT("Light/shadow map resolution"));
				MetaData->SetValue(NewProp_LightMapData, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LightMapData, TEXT("ColumnWidth"), TEXT("70"));
				MetaData->SetValue(NewProp_LightMapData, TEXT("DisplayName"), TEXT("LM"));
				MetaData->SetValue(NewProp_LightMapData, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_LightMapData, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_LightMapData, TEXT("ToolTip"), TEXT("Light map data in KB"));
				MetaData->SetValue(NewProp_LightMapData, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_ObjLightCost, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_ObjLightCost, TEXT("ColumnWidth"), TEXT("78"));
				MetaData->SetValue(NewProp_ObjLightCost, TEXT("DisplayName"), TEXT("Cost"));
				MetaData->SetValue(NewProp_ObjLightCost, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_ObjLightCost, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_ObjLightCost, TEXT("ToolTip"), TEXT("Avg OL * Sections"));
				MetaData->SetValue(NewProp_LightsTotal, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LightsTotal, TEXT("ColumnWidth"), TEXT("104"));
				MetaData->SetValue(NewProp_LightsTotal, TEXT("DisplayName"), TEXT("Sum Avg"));
				MetaData->SetValue(NewProp_LightsTotal, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_LightsTotal, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_LightsTotal, TEXT("ToolTip"), TEXT("(Avg OL + Avg LM) / Count"));
				MetaData->SetValue(NewProp_LightsOther, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LightsOther, TEXT("ColumnWidth"), TEXT("94"));
				MetaData->SetValue(NewProp_LightsOther, TEXT("DisplayName"), TEXT("Avg OL"));
				MetaData->SetValue(NewProp_LightsOther, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_LightsOther, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_LightsOther, TEXT("ToolTip"), TEXT("Average number of other lights relevant to each instance"));
				MetaData->SetValue(NewProp_LightsLM, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LightsLM, TEXT("ColumnWidth"), TEXT("96"));
				MetaData->SetValue(NewProp_LightsLM, TEXT("DisplayName"), TEXT("Avg LM"));
				MetaData->SetValue(NewProp_LightsLM, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_LightsLM, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_LightsLM, TEXT("ToolTip"), TEXT("Average number of lightmap lights relevant to each instance"));
				MetaData->SetValue(NewProp_InstVertexColorMem, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_InstVertexColorMem, TEXT("ColumnWidth"), TEXT("94"));
				MetaData->SetValue(NewProp_InstVertexColorMem, TEXT("DisplayName"), TEXT("Inst VC"));
				MetaData->SetValue(NewProp_InstVertexColorMem, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_InstVertexColorMem, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_InstVertexColorMem, TEXT("ToolTip"), TEXT("Per component vertex color stat for static meshes in KB"));
				MetaData->SetValue(NewProp_InstVertexColorMem, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_VertexColorMem, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_VertexColorMem, TEXT("ColumnWidth"), TEXT("68"));
				MetaData->SetValue(NewProp_VertexColorMem, TEXT("DisplayName"), TEXT("VC"));
				MetaData->SetValue(NewProp_VertexColorMem, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_VertexColorMem, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_VertexColorMem, TEXT("ToolTip"), TEXT("Vertex color stat for static and skeletal meshes in KB"));
				MetaData->SetValue(NewProp_VertexColorMem, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_ResourceSize, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_ResourceSize, TEXT("ColumnWidth"), TEXT("78"));
				MetaData->SetValue(NewProp_ResourceSize, TEXT("DisplayName"), TEXT("Size"));
				MetaData->SetValue(NewProp_ResourceSize, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_ResourceSize, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_ResourceSize, TEXT("SortMode"), TEXT("Descending"));
				MetaData->SetValue(NewProp_ResourceSize, TEXT("ToolTip"), TEXT("Resource size in KB"));
				MetaData->SetValue(NewProp_ResourceSize, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_InstTriangles, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_InstTriangles, TEXT("ColumnWidth"), TEXT("104"));
				MetaData->SetValue(NewProp_InstTriangles, TEXT("DisplayName"), TEXT("Sum Tris"));
				MetaData->SetValue(NewProp_InstTriangles, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_InstTriangles, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_InstTriangles, TEXT("ToolTip"), TEXT("Triangle count of all mesh occurances (Count * Tris)"));
				MetaData->SetValue(NewProp_Triangles, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Triangles, TEXT("ColumnWidth"), TEXT("74"));
				MetaData->SetValue(NewProp_Triangles, TEXT("DisplayName"), TEXT("Tris"));
				MetaData->SetValue(NewProp_Triangles, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_Triangles, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_Triangles, TEXT("ToolTip"), TEXT("Triangle count of mesh"));
				MetaData->SetValue(NewProp_InstSections, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_InstSections, TEXT("ColumnWidth"), TEXT("102"));
				MetaData->SetValue(NewProp_InstSections, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_InstSections, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_InstSections, TEXT("ToolTip"), TEXT("Instanced section count of mesh"));
				MetaData->SetValue(NewProp_Sections, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_Sections, TEXT("ToolTip"), TEXT("Section count of mesh"));
				MetaData->SetValue(NewProp_Count, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Count, TEXT("ColumnWidth"), TEXT("86"));
				MetaData->SetValue(NewProp_Count, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_Count, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_Count, TEXT("ToolTip"), TEXT("Number of occurrences in map"));
				MetaData->SetValue(NewProp_Type, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Type, TEXT("ColumnWidth"), TEXT("200"));
				MetaData->SetValue(NewProp_Type, TEXT("DisplayName"), TEXT("Type"));
				MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_Type, TEXT("ToolTip"), TEXT("Type name"));
				MetaData->SetValue(NewProp_Actors, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Actors, TEXT("ColumnWidth"), TEXT("200"));
				MetaData->SetValue(NewProp_Actors, TEXT("DisplayName"), TEXT("Actor(s)"));
				MetaData->SetValue(NewProp_Actors, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_Actors, TEXT("ToolTip"), TEXT("Actor(s) that use the resource - click to select & zoom Actor(s)"));
				MetaData->SetValue(NewProp_Object, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Object, TEXT("ColumnWidth"), TEXT("200"));
				MetaData->SetValue(NewProp_Object, TEXT("DisplayName"), TEXT("Object"));
				MetaData->SetValue(NewProp_Object, TEXT("ModuleRelativePath"), TEXT("Classes/PrimitiveStats.h"));
				MetaData->SetValue(NewProp_Object, TEXT("ToolTip"), TEXT("Resource (e.g. UStaticMesh, USkeletalMesh, UModelComponent, UTerrainComponent, etc"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPrimitiveStats(Z_Construct_UClass_UPrimitiveStats, TEXT("UPrimitiveStats"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPrimitiveStats);
	UEnum* Z_Construct_UEnum_StatsViewer_EStaticMeshLightingInfoObjectSets()
	{
		UPackage* Outer=Z_Construct_UPackage_StatsViewer();
		extern uint32 Get_Z_Construct_UEnum_StatsViewer_EStaticMeshLightingInfoObjectSets_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EStaticMeshLightingInfoObjectSets"), 0, Get_Z_Construct_UEnum_StatsViewer_EStaticMeshLightingInfoObjectSets_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EStaticMeshLightingInfoObjectSets"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("StaticMeshLightingInfoObjectSets_CurrentLevel")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("StaticMeshLightingInfoObjectSets_SelectedLevels")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("StaticMeshLightingInfoObjectSets_AllLevels")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("StaticMeshLightingInfoObjectSets_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
			MetaData->SetValue(ReturnEnum, TEXT("StaticMeshLightingInfoObjectSets_AllLevels.DisplayName"), TEXT("All Levels"));
			MetaData->SetValue(ReturnEnum, TEXT("StaticMeshLightingInfoObjectSets_AllLevels.ToolTip"), TEXT("View static mesh lighting info for all levels"));
			MetaData->SetValue(ReturnEnum, TEXT("StaticMeshLightingInfoObjectSets_CurrentLevel.DisplayName"), TEXT("Current Level"));
			MetaData->SetValue(ReturnEnum, TEXT("StaticMeshLightingInfoObjectSets_CurrentLevel.ToolTip"), TEXT("View static mesh lighting info for the current level"));
			MetaData->SetValue(ReturnEnum, TEXT("StaticMeshLightingInfoObjectSets_SelectedLevels.DisplayName"), TEXT("Selected Levels"));
			MetaData->SetValue(ReturnEnum, TEXT("StaticMeshLightingInfoObjectSets_SelectedLevels.ToolTip"), TEXT("View lighting info for selected levels"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum defining the object sets for this stats object"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_StatsViewer_EStaticMeshLightingInfoObjectSets_CRC() { return 5170345U; }
	UClass* Z_Construct_UClass_UStaticMeshLightingInfo_NoRegister()
	{
		return UStaticMeshLightingInfo::StaticClass();
	}
	UClass* Z_Construct_UClass_UStaticMeshLightingInfo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_StatsViewer();
			OuterClass = UStaticMeshLightingInfo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ShadowMapLightCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowMapLightCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ShadowMapLightCount, UStaticMeshLightingInfo), 0x0000010000020001);
				UProperty* NewProp_VertexShadowMapMemoryUsage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexShadowMapMemoryUsage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VertexShadowMapMemoryUsage, UStaticMeshLightingInfo), 0x0000010000020001);
				UProperty* NewProp_TextureShadowMapMemoryUsage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureShadowMapMemoryUsage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TextureShadowMapMemoryUsage, UStaticMeshLightingInfo), 0x0000010000020001);
				UProperty* NewProp_LightMapLightCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightMapLightCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LightMapLightCount, UStaticMeshLightingInfo), 0x0000010000020001);
				UProperty* NewProp_VertexLightMapMemoryUsage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VertexLightMapMemoryUsage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(VertexLightMapMemoryUsage, UStaticMeshLightingInfo), 0x0000010000020001);
				UProperty* NewProp_TextureLightMapMemoryUsage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureLightMapMemoryUsage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TextureLightMapMemoryUsage, UStaticMeshLightingInfo), 0x0000010000020001);
				UProperty* NewProp_StaticLightingResolution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaticLightingResolution"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(StaticLightingResolution, UStaticMeshLightingInfo), 0x0000010000020001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasLightmapTexCoords, UStaticMeshLightingInfo, bool);
				UProperty* NewProp_bHasLightmapTexCoords = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHasLightmapTexCoords"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasLightmapTexCoords, UStaticMeshLightingInfo), 0x0000010000020001, CPP_BOOL_PROPERTY_BITMASK(bHasLightmapTexCoords, UStaticMeshLightingInfo), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTextureMapping, UStaticMeshLightingInfo, bool);
				UProperty* NewProp_bTextureMapping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTextureMapping"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTextureMapping, UStaticMeshLightingInfo), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bTextureMapping, UStaticMeshLightingInfo), sizeof(bool), true);
				UProperty* NewProp_TextureMapping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureMapping"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TextureMapping, UStaticMeshLightingInfo), 0x0000010000020001);
				UProperty* NewProp_LevelName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(LevelName, UStaticMeshLightingInfo), 0x0000010000020001);
				UProperty* NewProp_StaticMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaticMesh"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(StaticMesh, UStaticMeshLightingInfo), 0x0004010000020001, Z_Construct_UClass_UStaticMesh_NoRegister());
				UProperty* NewProp_StaticMeshActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaticMeshActor"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(StaticMeshActor, UStaticMeshLightingInfo), 0x0004010000020001, Z_Construct_UClass_AActor_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Static Mesh Lighting Info"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("StaticMeshLightingInfo.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectSetType"), TEXT("EStaticMeshLightingInfoObjectSets"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Statistics page for static meshes."));
				MetaData->SetValue(NewProp_ShadowMapLightCount, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_ShadowMapLightCount, TEXT("ColumnWidth"), TEXT("102"));
				MetaData->SetValue(NewProp_ShadowMapLightCount, TEXT("DisplayName"), TEXT("Num SM"));
				MetaData->SetValue(NewProp_ShadowMapLightCount, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_ShadowMapLightCount, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_ShadowMapLightCount, TEXT("ToolTip"), TEXT("Number of lights generating shadow maps on the primitive."));
				MetaData->SetValue(NewProp_VertexShadowMapMemoryUsage, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_VertexShadowMapMemoryUsage, TEXT("ColumnWidth"), TEXT("112"));
				MetaData->SetValue(NewProp_VertexShadowMapMemoryUsage, TEXT("DisplayName"), TEXT("Vertex SM"));
				MetaData->SetValue(NewProp_VertexShadowMapMemoryUsage, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_VertexShadowMapMemoryUsage, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_VertexShadowMapMemoryUsage, TEXT("ToolTip"), TEXT("Estimated memory usage in KB for shadow map vertex data."));
				MetaData->SetValue(NewProp_VertexShadowMapMemoryUsage, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_TextureShadowMapMemoryUsage, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_TextureShadowMapMemoryUsage, TEXT("ColumnWidth"), TEXT("120"));
				MetaData->SetValue(NewProp_TextureShadowMapMemoryUsage, TEXT("DisplayName"), TEXT("Texture SM"));
				MetaData->SetValue(NewProp_TextureShadowMapMemoryUsage, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_TextureShadowMapMemoryUsage, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_TextureShadowMapMemoryUsage, TEXT("SortMode"), TEXT("Descending"));
				MetaData->SetValue(NewProp_TextureShadowMapMemoryUsage, TEXT("ToolTip"), TEXT("Estimated memory usage in KB for shadow map texel data."));
				MetaData->SetValue(NewProp_TextureShadowMapMemoryUsage, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_LightMapLightCount, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LightMapLightCount, TEXT("ColumnWidth"), TEXT("100"));
				MetaData->SetValue(NewProp_LightMapLightCount, TEXT("DisplayName"), TEXT("Num LM"));
				MetaData->SetValue(NewProp_LightMapLightCount, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_LightMapLightCount, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_LightMapLightCount, TEXT("ToolTip"), TEXT("Num lightmap lights"));
				MetaData->SetValue(NewProp_VertexLightMapMemoryUsage, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_VertexLightMapMemoryUsage, TEXT("ColumnWidth"), TEXT("112"));
				MetaData->SetValue(NewProp_VertexLightMapMemoryUsage, TEXT("DisplayName"), TEXT("Vertex LM"));
				MetaData->SetValue(NewProp_VertexLightMapMemoryUsage, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_VertexLightMapMemoryUsage, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_VertexLightMapMemoryUsage, TEXT("ToolTip"), TEXT("Estimated memory usage in KB for light map vertex data."));
				MetaData->SetValue(NewProp_VertexLightMapMemoryUsage, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_TextureLightMapMemoryUsage, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_TextureLightMapMemoryUsage, TEXT("ColumnWidth"), TEXT("118"));
				MetaData->SetValue(NewProp_TextureLightMapMemoryUsage, TEXT("DisplayName"), TEXT("Texture LM"));
				MetaData->SetValue(NewProp_TextureLightMapMemoryUsage, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_TextureLightMapMemoryUsage, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_TextureLightMapMemoryUsage, TEXT("ToolTip"), TEXT("Estimated memory usage in KB for light map texel data."));
				MetaData->SetValue(NewProp_TextureLightMapMemoryUsage, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("ColumnWidth"), TEXT("74"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("DisplayName"), TEXT("Res"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_StaticLightingResolution, TEXT("ToolTip"), TEXT("The static lighting resolution the texture mapping was estimated with."));
				MetaData->SetValue(NewProp_bHasLightmapTexCoords, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_bHasLightmapTexCoords, TEXT("ColumnWidth"), TEXT("76"));
				MetaData->SetValue(NewProp_bHasLightmapTexCoords, TEXT("DisplayName"), TEXT("UVs"));
				MetaData->SetValue(NewProp_bHasLightmapTexCoords, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_bHasLightmapTexCoords, TEXT("ToolTip"), TEXT("Does the Lightmap have UVs?"));
				MetaData->SetValue(NewProp_bTextureMapping, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_bTextureMapping, TEXT("ToolTip"), TEXT("Current mapping type flag - not displayed"));
				MetaData->SetValue(NewProp_TextureMapping, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_TextureMapping, TEXT("ColumnWidth"), TEXT("82"));
				MetaData->SetValue(NewProp_TextureMapping, TEXT("DisplayName"), TEXT("Type"));
				MetaData->SetValue(NewProp_TextureMapping, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_TextureMapping, TEXT("ToolTip"), TEXT("Current mapping type string"));
				MetaData->SetValue(NewProp_LevelName, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LevelName, TEXT("ColumnWidth"), TEXT("150"));
				MetaData->SetValue(NewProp_LevelName, TEXT("DisplayName"), TEXT("Level"));
				MetaData->SetValue(NewProp_LevelName, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_LevelName, TEXT("ToolTip"), TEXT("Cached version of the level name this object resides in"));
				MetaData->SetValue(NewProp_StaticMesh, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_StaticMesh, TEXT("ColumnWidth"), TEXT("200"));
				MetaData->SetValue(NewProp_StaticMesh, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_StaticMesh, TEXT("ToolTip"), TEXT("The source StaticMesh that is related to this info."));
				MetaData->SetValue(NewProp_StaticMeshActor, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_StaticMeshActor, TEXT("ColumnWidth"), TEXT("200"));
				MetaData->SetValue(NewProp_StaticMeshActor, TEXT("DisplayName"), TEXT("Actor"));
				MetaData->SetValue(NewProp_StaticMeshActor, TEXT("ModuleRelativePath"), TEXT("Classes/StaticMeshLightingInfo.h"));
				MetaData->SetValue(NewProp_StaticMeshActor, TEXT("ToolTip"), TEXT("The actor that is related to this error/warning."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UStaticMeshLightingInfo(Z_Construct_UClass_UStaticMeshLightingInfo, TEXT("UStaticMeshLightingInfo"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UStaticMeshLightingInfo);
	UEnum* Z_Construct_UEnum_StatsViewer_ETextureObjectSets()
	{
		UPackage* Outer=Z_Construct_UPackage_StatsViewer();
		extern uint32 Get_Z_Construct_UEnum_StatsViewer_ETextureObjectSets_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETextureObjectSets"), 0, Get_Z_Construct_UEnum_StatsViewer_ETextureObjectSets_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureObjectSets"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TextureObjectSet_CurrentStreamingLevel")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TextureObjectSet_AllStreamingLevels")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TextureObjectSet_SelectedActors")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TextureObjectSet_SelectedMaterials")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TextureObjectSet_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureObjectSet_AllStreamingLevels.DisplayName"), TEXT("All Streaming Levels"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureObjectSet_AllStreamingLevels.ToolTip"), TEXT("Display texture statistics for all streaming levels"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureObjectSet_CurrentStreamingLevel.DisplayName"), TEXT("Current Streaming Level"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureObjectSet_CurrentStreamingLevel.ToolTip"), TEXT("Display texture statistics for the current streaming level"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureObjectSet_SelectedActors.DisplayName"), TEXT("Selected Actor(s)"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureObjectSet_SelectedActors.ToolTip"), TEXT("Display texture statistics of selected Actors"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureObjectSet_SelectedMaterials.DisplayName"), TEXT("Selected Materials(s)"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureObjectSet_SelectedMaterials.ToolTip"), TEXT("Display texture statistics of selected Materials"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enum defining the object sets for this stats object"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_StatsViewer_ETextureObjectSets_CRC() { return 175830109U; }
	UClass* Z_Construct_UClass_UTextureStats_NoRegister()
	{
		return UTextureStats::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureStats()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_StatsViewer();
			OuterClass = UTextureStats::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Path = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Path"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Path, UTextureStats), 0x0000010000020001);
				UProperty* NewProp_LastTimeRendered = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastTimeRendered"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LastTimeRendered, UTextureStats), 0x0000010000020001);
				UProperty* NewProp_NumUses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumUses"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumUses, UTextureStats), 0x0000010000020001);
				UProperty* NewProp_FullyLoadedKB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FullyLoadedKB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FullyLoadedKB, UTextureStats), 0x0000010000020001);
				UProperty* NewProp_CurrentKB = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentKB"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(CurrentKB, UTextureStats), 0x0000010000020001);
				UProperty* NewProp_LODBias = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LODBias"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(LODBias, UTextureStats), 0x0000010000020001);
				UProperty* NewProp_Group = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Group"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Group, UTextureStats), 0x0000010000020001, Z_Construct_UEnum_Engine_TextureGroup());
				UProperty* NewProp_Format = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Format"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Format, UTextureStats), 0x0000010000020001, Z_Construct_UEnum_CoreUObject_EPixelFormat());
				UProperty* NewProp_CurrentDim = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentDim"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CurrentDim, UTextureStats), 0x0000010000020001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_MaxDim = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDim"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MaxDim, UTextureStats), 0x0000010000020001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Type"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Type, UTextureStats), 0x0000010000020001);
				UProperty* NewProp_Actors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Actors"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Actors, UTextureStats), 0x0004010000020001);
				UProperty* NewProp_Actors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Actors, TEXT("Actors"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000020000, Z_Construct_UClass_AActor_NoRegister());
				UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(Texture, UTextureStats), 0x0004010000020001, Z_Construct_UClass_UTexture_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Texture Stats"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("TextureStats.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectSetType"), TEXT("ETextureObjectSets"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Statistics page for textures."));
				MetaData->SetValue(NewProp_Path, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Path, TEXT("ColumnWidth"), TEXT("200"));
				MetaData->SetValue(NewProp_Path, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_Path, TEXT("ToolTip"), TEXT("Texture path without the name \"package.[group.]\""));
				MetaData->SetValue(NewProp_LastTimeRendered, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LastTimeRendered, TEXT("ColumnWidth"), TEXT("78"));
				MetaData->SetValue(NewProp_LastTimeRendered, TEXT("DisplayName"), TEXT("Last Seen"));
				MetaData->SetValue(NewProp_LastTimeRendered, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_LastTimeRendered, TEXT("ToolTip"), TEXT("Relative time it was used for rendering the last time"));
				MetaData->SetValue(NewProp_LastTimeRendered, TEXT("Unit"), TEXT("s"));
				MetaData->SetValue(NewProp_NumUses, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_NumUses, TEXT("ColumnWidth"), TEXT("74"));
				MetaData->SetValue(NewProp_NumUses, TEXT("DisplayName"), TEXT("Uses"));
				MetaData->SetValue(NewProp_NumUses, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_NumUses, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_NumUses, TEXT("ToolTip"), TEXT("The number of times the texture is used"));
				MetaData->SetValue(NewProp_FullyLoadedKB, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_FullyLoadedKB, TEXT("ColumnWidth"), TEXT("110"));
				MetaData->SetValue(NewProp_FullyLoadedKB, TEXT("DisplayName"), TEXT("Fully Loaded Memory"));
				MetaData->SetValue(NewProp_FullyLoadedKB, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_FullyLoadedKB, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_FullyLoadedKB, TEXT("SortMode"), TEXT("Descending"));
				MetaData->SetValue(NewProp_FullyLoadedKB, TEXT("ToolTip"), TEXT("The memory used when the texture is fully loaded in KB"));
				MetaData->SetValue(NewProp_FullyLoadedKB, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_CurrentKB, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_CurrentKB, TEXT("ColumnWidth"), TEXT("80"));
				MetaData->SetValue(NewProp_CurrentKB, TEXT("DisplayName"), TEXT("Current Memory"));
				MetaData->SetValue(NewProp_CurrentKB, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_CurrentKB, TEXT("ShowTotal"), TEXT("true"));
				MetaData->SetValue(NewProp_CurrentKB, TEXT("ToolTip"), TEXT("The memory used currently in KB"));
				MetaData->SetValue(NewProp_CurrentKB, TEXT("Unit"), TEXT("KB"));
				MetaData->SetValue(NewProp_LODBias, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_LODBias, TEXT("ColumnWidth"), TEXT("70"));
				MetaData->SetValue(NewProp_LODBias, TEXT("DisplayName"), TEXT("LODBias"));
				MetaData->SetValue(NewProp_LODBias, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_LODBias, TEXT("ToolTip"), TEXT("LOD Bias for this texture. (Texture LODBias + Texture group)"));
				MetaData->SetValue(NewProp_Group, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Group, TEXT("ColumnWidth"), TEXT("94"));
				MetaData->SetValue(NewProp_Group, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_Group, TEXT("ToolTip"), TEXT("The texture group, TEXTUREGROUP_MAX is not used, e.g. TEXTUREGROUP_World"));
				MetaData->SetValue(NewProp_Format, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Format, TEXT("ColumnWidth"), TEXT("96"));
				MetaData->SetValue(NewProp_Format, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_Format, TEXT("ToolTip"), TEXT("The texture format, e.g. PF_DXT1"));
				MetaData->SetValue(NewProp_CurrentDim, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_CurrentDim, TEXT("ColumnWidth"), TEXT("90"));
				MetaData->SetValue(NewProp_CurrentDim, TEXT("DisplayName"), TEXT("Current Dimension"));
				MetaData->SetValue(NewProp_CurrentDim, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_CurrentDim, TEXT("ToolTip"), TEXT("Current Dimension e.g 256x256"));
				MetaData->SetValue(NewProp_MaxDim, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_MaxDim, TEXT("ColumnWidth"), TEXT("90"));
				MetaData->SetValue(NewProp_MaxDim, TEXT("DisplayName"), TEXT("Max Dimension"));
				MetaData->SetValue(NewProp_MaxDim, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_MaxDim, TEXT("ToolTip"), TEXT("Max Dimension e.g. 256x256, not including the format"));
				MetaData->SetValue(NewProp_Type, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Type, TEXT("ColumnWidth"), TEXT("60"));
				MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_Type, TEXT("ToolTip"), TEXT("Texture type e.g. 2D, 3D, Cube, \"\" if not known, ..."));
				MetaData->SetValue(NewProp_Actors, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Actors, TEXT("ColumnWidth"), TEXT("100"));
				MetaData->SetValue(NewProp_Actors, TEXT("DisplayName"), TEXT("Actor(s)"));
				MetaData->SetValue(NewProp_Actors, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_Actors, TEXT("ToolTip"), TEXT("Actor(s) - click to select & zoom Actor(s)"));
				MetaData->SetValue(NewProp_Texture, TEXT("Category"), TEXT("Stats"));
				MetaData->SetValue(NewProp_Texture, TEXT("ColumnWidth"), TEXT("100"));
				MetaData->SetValue(NewProp_Texture, TEXT("DisplayName"), TEXT("Name"));
				MetaData->SetValue(NewProp_Texture, TEXT("ModuleRelativePath"), TEXT("Classes/TextureStats.h"));
				MetaData->SetValue(NewProp_Texture, TEXT("ToolTip"), TEXT("Texture - click to go to asset"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureStats(Z_Construct_UClass_UTextureStats, TEXT("UTextureStats"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureStats);
	UPackage* Z_Construct_UPackage_StatsViewer()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/StatsViewer")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xCF3BD12F;
			Guid.B = 0xB262819E;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
