// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/TargetDeviceServicesPrivatePCH.h"
#include "TargetDeviceServices.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeTargetDeviceServices() {}
class UScriptStruct* FTargetDeviceServiceRunFinished::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceRunFinished();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceRunFinished_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServiceRunFinished, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServiceRunFinished"), sizeof(FTargetDeviceServiceRunFinished), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceRunFinished_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServiceRunFinished(FTargetDeviceServiceRunFinished::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceRunFinished
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceRunFinished()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServiceRunFinished")),new UScriptStruct::TCppStructOps<FTargetDeviceServiceRunFinished>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceRunFinished;
class UScriptStruct* FTargetDeviceServiceRunExecutable::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceRunExecutable();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceRunExecutable_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServiceRunExecutable, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServiceRunExecutable"), sizeof(FTargetDeviceServiceRunExecutable), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceRunExecutable_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServiceRunExecutable(FTargetDeviceServiceRunExecutable::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceRunExecutable
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceRunExecutable()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServiceRunExecutable")),new UScriptStruct::TCppStructOps<FTargetDeviceServiceRunExecutable>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceRunExecutable;
class UScriptStruct* FTargetDeviceServiceReboot::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceReboot();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceReboot_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServiceReboot, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServiceReboot"), sizeof(FTargetDeviceServiceReboot), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceReboot_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServiceReboot(FTargetDeviceServiceReboot::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceReboot
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceReboot()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServiceReboot")),new UScriptStruct::TCppStructOps<FTargetDeviceServiceReboot>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceReboot;
class UScriptStruct* FTargetDeviceServicePowerOn::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePowerOn();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePowerOn_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServicePowerOn, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServicePowerOn"), sizeof(FTargetDeviceServicePowerOn), Get_Z_Construct_UScriptStruct_FTargetDeviceServicePowerOn_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServicePowerOn(FTargetDeviceServicePowerOn::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePowerOn
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePowerOn()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServicePowerOn")),new UScriptStruct::TCppStructOps<FTargetDeviceServicePowerOn>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePowerOn;
class UScriptStruct* FTargetDeviceServicePowerOff::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePowerOff();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePowerOff_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServicePowerOff, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServicePowerOff"), sizeof(FTargetDeviceServicePowerOff), Get_Z_Construct_UScriptStruct_FTargetDeviceServicePowerOff_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServicePowerOff(FTargetDeviceServicePowerOff::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePowerOff
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePowerOff()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServicePowerOff")),new UScriptStruct::TCppStructOps<FTargetDeviceServicePowerOff>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePowerOff;
class UScriptStruct* FTargetDeviceServicePong::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePong();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePong_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServicePong, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServicePong"), sizeof(FTargetDeviceServicePong), Get_Z_Construct_UScriptStruct_FTargetDeviceServicePong_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServicePong(FTargetDeviceServicePong::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePong
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePong()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServicePong")),new UScriptStruct::TCppStructOps<FTargetDeviceServicePong>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePong;
class UScriptStruct* FTargetDeviceVariant::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceVariant();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceVariant_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceVariant, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceVariant"), sizeof(FTargetDeviceVariant), Get_Z_Construct_UScriptStruct_FTargetDeviceVariant_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceVariant(FTargetDeviceVariant::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceVariant
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceVariant()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceVariant")),new UScriptStruct::TCppStructOps<FTargetDeviceVariant>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceVariant;
class UScriptStruct* FTargetDeviceServicePing::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePing();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePing_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServicePing, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServicePing"), sizeof(FTargetDeviceServicePing), Get_Z_Construct_UScriptStruct_FTargetDeviceServicePing_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServicePing(FTargetDeviceServicePing::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePing
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePing()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServicePing")),new UScriptStruct::TCppStructOps<FTargetDeviceServicePing>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServicePing;
class UScriptStruct* FTargetDeviceUnclaimed::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceUnclaimed();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceUnclaimed_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceUnclaimed, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceUnclaimed"), sizeof(FTargetDeviceUnclaimed), Get_Z_Construct_UScriptStruct_FTargetDeviceUnclaimed_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceUnclaimed(FTargetDeviceUnclaimed::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceUnclaimed
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceUnclaimed()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceUnclaimed")),new UScriptStruct::TCppStructOps<FTargetDeviceUnclaimed>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceUnclaimed;
class UScriptStruct* FTargetDeviceClaimed::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceClaimed();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceClaimed_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceClaimed, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceClaimed"), sizeof(FTargetDeviceClaimed), Get_Z_Construct_UScriptStruct_FTargetDeviceClaimed_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceClaimed(FTargetDeviceClaimed::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceClaimed
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceClaimed()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceClaimed")),new UScriptStruct::TCppStructOps<FTargetDeviceClaimed>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceClaimed;
class UScriptStruct* FTargetDeviceClaimDenied::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceClaimDenied();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceClaimDenied_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceClaimDenied, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceClaimDenied"), sizeof(FTargetDeviceClaimDenied), Get_Z_Construct_UScriptStruct_FTargetDeviceClaimDenied_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceClaimDenied(FTargetDeviceClaimDenied::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceClaimDenied
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceClaimDenied()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceClaimDenied")),new UScriptStruct::TCppStructOps<FTargetDeviceClaimDenied>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceClaimDenied;
class UScriptStruct* FTargetDeviceServiceLaunchFinished::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchFinished();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchFinished_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchFinished, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServiceLaunchFinished"), sizeof(FTargetDeviceServiceLaunchFinished), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchFinished_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServiceLaunchFinished(FTargetDeviceServiceLaunchFinished::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceLaunchFinished
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceLaunchFinished()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServiceLaunchFinished")),new UScriptStruct::TCppStructOps<FTargetDeviceServiceLaunchFinished>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceLaunchFinished;
class UScriptStruct* FTargetDeviceServiceLaunchApp::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchApp();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchApp_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchApp, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServiceLaunchApp"), sizeof(FTargetDeviceServiceLaunchApp), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchApp_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServiceLaunchApp(FTargetDeviceServiceLaunchApp::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceLaunchApp
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceLaunchApp()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServiceLaunchApp")),new UScriptStruct::TCppStructOps<FTargetDeviceServiceLaunchApp>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceLaunchApp;
class UScriptStruct* FTargetDeviceServiceDeployFinished::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFinished();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFinished_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFinished, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServiceDeployFinished"), sizeof(FTargetDeviceServiceDeployFinished), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFinished_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServiceDeployFinished(FTargetDeviceServiceDeployFinished::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceDeployFinished
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceDeployFinished()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServiceDeployFinished")),new UScriptStruct::TCppStructOps<FTargetDeviceServiceDeployFinished>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceDeployFinished;
class UScriptStruct* FTargetDeviceServiceDeployFile::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFile();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFile_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFile, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServiceDeployFile"), sizeof(FTargetDeviceServiceDeployFile), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFile_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServiceDeployFile(FTargetDeviceServiceDeployFile::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceDeployFile
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceDeployFile()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServiceDeployFile")),new UScriptStruct::TCppStructOps<FTargetDeviceServiceDeployFile>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceDeployFile;
class UScriptStruct* FTargetDeviceServiceDeployCommit::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceDeployCommit();
		extern TARGETDEVICESERVICES_API uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployCommit_CRC();
		extern TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTargetDeviceServiceDeployCommit, Z_Construct_UPackage_TargetDeviceServices(), TEXT("TargetDeviceServiceDeployCommit"), sizeof(FTargetDeviceServiceDeployCommit), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployCommit_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTargetDeviceServiceDeployCommit(FTargetDeviceServiceDeployCommit::StaticStruct, TEXT("/Script/TargetDeviceServices"));
static struct FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceDeployCommit
{
	FScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceDeployCommit()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TargetDeviceServiceDeployCommit")),new UScriptStruct::TCppStructOps<FTargetDeviceServiceDeployCommit>);
	}
} ScriptStruct_TargetDeviceServices_StaticRegisterNativesFTargetDeviceServiceDeployCommit;
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();

	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceRunFinished();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceRunExecutable();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceReboot();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePowerOn();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePowerOff();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePong();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceVariant();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePing();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceUnclaimed();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceClaimed();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceClaimDenied();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchFinished();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchApp();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFinished();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFile();
	TARGETDEVICESERVICES_API class UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceDeployCommit();
	TARGETDEVICESERVICES_API class UPackage* Z_Construct_UPackage_TargetDeviceServices();
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceRunFinished()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceRunFinished_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServiceRunFinished"), sizeof(FTargetDeviceServiceRunFinished), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceRunFinished_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServiceRunFinished"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServiceRunFinished>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Succeeded, FTargetDeviceServiceRunFinished, bool);
			UProperty* NewProp_Succeeded = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Succeeded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Succeeded, FTargetDeviceServiceRunFinished), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(Succeeded, FTargetDeviceServiceRunFinished), sizeof(bool), true);
			UProperty* NewProp_ProcessId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ProcessId"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ProcessId, FTargetDeviceServiceRunFinished), 0x0000000000000000);
			UProperty* NewProp_ExecutablePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExecutablePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ExecutablePath, FTargetDeviceServiceRunFinished), 0x0000000000000000);
			UProperty* NewProp_Variant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Variant"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Variant, FTargetDeviceServiceRunFinished), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for notifying a target device proxy that running an executable has finished.\n\n@see FTargetDeviceServiceRunExecutable"));
			MetaData->SetValue(NewProp_Succeeded, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Succeeded, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the executable started successfully."));
			MetaData->SetValue(NewProp_ProcessId, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_ProcessId, TEXT("ToolTip"), TEXT("Holds the process identifier of the running executable."));
			MetaData->SetValue(NewProp_ExecutablePath, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_ExecutablePath, TEXT("ToolTip"), TEXT("Holds the path to the executable that was run."));
			MetaData->SetValue(NewProp_Variant, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Variant, TEXT("ToolTip"), TEXT("Holds the variant identifier of the target device to use."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceRunFinished_CRC() { return 2171394484U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceRunExecutable()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceRunExecutable_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServiceRunExecutable"), sizeof(FTargetDeviceServiceRunExecutable), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceRunExecutable_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServiceRunExecutable"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServiceRunExecutable>, EStructFlags(0x00000001));
			UProperty* NewProp_Params = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Params"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Params, FTargetDeviceServiceRunExecutable), 0x0000000000000000);
			UProperty* NewProp_ExecutablePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExecutablePath"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ExecutablePath, FTargetDeviceServiceRunExecutable), 0x0000000000000000);
			UProperty* NewProp_Variant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Variant"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Variant, FTargetDeviceServiceRunExecutable), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for running an executable on a target device.\n\nTo launch a previously deployed application on a device use the FTargetDeviceServiceLaunchApp message instead.\n\n@see FTargetDeviceServiceLaunchApp"));
			MetaData->SetValue(NewProp_Params, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Params, TEXT("ToolTip"), TEXT("Holds optional command line parameters for the executable."));
			MetaData->SetValue(NewProp_ExecutablePath, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_ExecutablePath, TEXT("ToolTip"), TEXT("Holds the path to the executable on the device."));
			MetaData->SetValue(NewProp_Variant, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Variant, TEXT("ToolTip"), TEXT("Holds the variant identifier of the target device to use for execution."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceRunExecutable_CRC() { return 1970277084U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceReboot()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceReboot_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServiceReboot"), sizeof(FTargetDeviceServiceReboot), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceReboot_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServiceReboot"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServiceReboot>, EStructFlags(0x00000001));
			UProperty* NewProp_Operator = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Operator"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Operator, FTargetDeviceServiceReboot), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for rebooting a target device."));
			MetaData->SetValue(NewProp_Operator, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Operator, TEXT("ToolTip"), TEXT("Holds the name of the user that wishes to reboot the device."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceReboot_CRC() { return 4232126528U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePowerOn()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePowerOn_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServicePowerOn"), sizeof(FTargetDeviceServicePowerOn), Get_Z_Construct_UScriptStruct_FTargetDeviceServicePowerOn_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServicePowerOn"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServicePowerOn>, EStructFlags(0x00000001));
			UProperty* NewProp_Operator = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Operator"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Operator, FTargetDeviceServicePowerOn), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for powering on a target device."));
			MetaData->SetValue(NewProp_Operator, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Operator, TEXT("ToolTip"), TEXT("Holds the name of the user that wishes to power on the device."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePowerOn_CRC() { return 194653802U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePowerOff()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePowerOff_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServicePowerOff"), sizeof(FTargetDeviceServicePowerOff), Get_Z_Construct_UScriptStruct_FTargetDeviceServicePowerOff_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServicePowerOff"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServicePowerOff>, EStructFlags(0x00000001));
			UProperty* NewProp_Operator = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Operator"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Operator, FTargetDeviceServicePowerOff), 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Force, FTargetDeviceServicePowerOff, bool);
			UProperty* NewProp_Force = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Force"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Force, FTargetDeviceServicePowerOff), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(Force, FTargetDeviceServicePowerOff), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for powering on a target device."));
			MetaData->SetValue(NewProp_Operator, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Operator, TEXT("ToolTip"), TEXT("Holds the name of the user that wishes to power off the device."));
			MetaData->SetValue(NewProp_Force, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Force, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the power-off should be enforced.\n\nIf powering off is not enforced, if may fail if some running application prevents it."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePowerOff_CRC() { return 2667350719U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePong()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePong_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServicePong"), sizeof(FTargetDeviceServicePong), Get_Z_Construct_UScriptStruct_FTargetDeviceServicePong_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServicePong"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServicePong>, EStructFlags(0x00000001));
			UProperty* NewProp_Variants = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Variants"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Variants, FTargetDeviceServicePong), 0x0000000000000000);
			UProperty* NewProp_Variants_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Variants, TEXT("Variants"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FTargetDeviceVariant());
			UProperty* NewProp_DefaultVariant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultVariant"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(DefaultVariant, FTargetDeviceServicePong), 0x0000000000000000);
			UProperty* NewProp_Type = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Type"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Type, FTargetDeviceServicePong), 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SupportsVariants, FTargetDeviceServicePong, bool);
			UProperty* NewProp_SupportsVariants = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SupportsVariants"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SupportsVariants, FTargetDeviceServicePong), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(SupportsVariants, FTargetDeviceServicePong), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SupportsReboot, FTargetDeviceServicePong, bool);
			UProperty* NewProp_SupportsReboot = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SupportsReboot"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SupportsReboot, FTargetDeviceServicePong), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(SupportsReboot, FTargetDeviceServicePong), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SupportsPowerOn, FTargetDeviceServicePong, bool);
			UProperty* NewProp_SupportsPowerOn = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SupportsPowerOn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SupportsPowerOn, FTargetDeviceServicePong), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(SupportsPowerOn, FTargetDeviceServicePong), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SupportsPowerOff, FTargetDeviceServicePong, bool);
			UProperty* NewProp_SupportsPowerOff = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SupportsPowerOff"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SupportsPowerOff, FTargetDeviceServicePong), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(SupportsPowerOff, FTargetDeviceServicePong), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(SupportsMultiLaunch, FTargetDeviceServicePong, bool);
			UProperty* NewProp_SupportsMultiLaunch = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SupportsMultiLaunch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SupportsMultiLaunch, FTargetDeviceServicePong), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(SupportsMultiLaunch, FTargetDeviceServicePong), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Shared, FTargetDeviceServicePong, bool);
			UProperty* NewProp_Shared = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Shared"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Shared, FTargetDeviceServicePong), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(Shared, FTargetDeviceServicePong), sizeof(bool), true);
			UProperty* NewProp_DeviceUserPassword = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeviceUserPassword"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DeviceUserPassword, FTargetDeviceServicePong), 0x0000000000000000);
			UProperty* NewProp_DeviceUser = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeviceUser"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DeviceUser, FTargetDeviceServicePong), 0x0000000000000000);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Name, FTargetDeviceServicePong), 0x0000000000000000);
			UProperty* NewProp_Model = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Model"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Model, FTargetDeviceServicePong), 0x0000000000000000);
			UProperty* NewProp_Make = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Make"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Make, FTargetDeviceServicePong), 0x0000000000000000);
			UProperty* NewProp_HostUser = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HostUser"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HostUser, FTargetDeviceServicePong), 0x0000000000000000);
			UProperty* NewProp_HostName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HostName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HostName, FTargetDeviceServicePong), 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Connected, FTargetDeviceServicePong, bool);
			UProperty* NewProp_Connected = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Connected"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Connected, FTargetDeviceServicePong), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(Connected, FTargetDeviceServicePong), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message that is sent in response to target device service discovery messages."));
			MetaData->SetValue(NewProp_Variants, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Variants, TEXT("ToolTip"), TEXT("List of the Flavors this service supports"));
			MetaData->SetValue(NewProp_DefaultVariant, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_DefaultVariant, TEXT("ToolTip"), TEXT("Holds the variant name of the default device."));
			MetaData->SetValue(NewProp_Type, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Type, TEXT("ToolTip"), TEXT("Holds the device type."));
			MetaData->SetValue(NewProp_SupportsVariants, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_SupportsVariants, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the device's target platform supports variants."));
			MetaData->SetValue(NewProp_SupportsReboot, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_SupportsReboot, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the device can be rebooted."));
			MetaData->SetValue(NewProp_SupportsPowerOn, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_SupportsPowerOn, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the device can be powered on."));
			MetaData->SetValue(NewProp_SupportsPowerOff, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_SupportsPowerOff, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the device can be powered off."));
			MetaData->SetValue(NewProp_SupportsMultiLaunch, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_SupportsMultiLaunch, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the device supports running multiple application instances in parallel."));
			MetaData->SetValue(NewProp_Shared, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Shared, TEXT("ToolTip"), TEXT("Holds a flag indicating whether this device is shared with other users on the network."));
			MetaData->SetValue(NewProp_DeviceUserPassword, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_DeviceUserPassword, TEXT("ToolTip"), TEXT("Holds the password of the user that we log in to remote device as, i.e \"12345\"."));
			MetaData->SetValue(NewProp_DeviceUser, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_DeviceUser, TEXT("ToolTip"), TEXT("Holds the name of the user that we log in to remote device as, i.e \"root\"."));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ToolTip"), TEXT("Holds the human readable name of the device, i.e \"Bob's XBox'."));
			MetaData->SetValue(NewProp_Model, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Model, TEXT("ToolTip"), TEXT("Holds the model of the device."));
			MetaData->SetValue(NewProp_Make, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Make, TEXT("ToolTip"), TEXT("Holds the make of the device, i.e. Microsoft or Sony."));
			MetaData->SetValue(NewProp_HostUser, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_HostUser, TEXT("ToolTip"), TEXT("Holds the name of the user under which the host computer is running."));
			MetaData->SetValue(NewProp_HostName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_HostName, TEXT("ToolTip"), TEXT("Holds the name of the host computer that the device is attached to."));
			MetaData->SetValue(NewProp_Connected, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Connected, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the device is currently connected."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePong_CRC() { return 3983580723U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceVariant()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceVariant_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceVariant"), sizeof(FTargetDeviceVariant), Get_Z_Construct_UScriptStruct_FTargetDeviceVariant_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceVariant"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceVariant>, EStructFlags(0x00000001));
			UProperty* NewProp_PlatformDisplayName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlatformDisplayName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(PlatformDisplayName, FTargetDeviceVariant), 0x0000000000000000);
			UProperty* NewProp_VanillaPlatformId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VanillaPlatformId"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(VanillaPlatformId, FTargetDeviceVariant), 0x0000000000000000);
			UProperty* NewProp_TargetPlatformId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetPlatformId"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TargetPlatformId, FTargetDeviceVariant), 0x0000000000000000);
			UProperty* NewProp_TargetPlatformName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetPlatformName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TargetPlatformName, FTargetDeviceVariant), 0x0000000000000000);
			UProperty* NewProp_VariantName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("VariantName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(VariantName, FTargetDeviceVariant), 0x0000000000000000);
			UProperty* NewProp_DeviceID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeviceID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DeviceID, FTargetDeviceVariant), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct for a flavor's information"));
			MetaData->SetValue(NewProp_PlatformDisplayName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_VanillaPlatformId, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_TargetPlatformId, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_TargetPlatformName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_VariantName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_DeviceID, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceVariant_CRC() { return 4256512556U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServicePing()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePing_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServicePing"), sizeof(FTargetDeviceServicePing), Get_Z_Construct_UScriptStruct_FTargetDeviceServicePing_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServicePing"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServicePing>, EStructFlags(0x00000001));
			UProperty* NewProp_HostUser = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HostUser"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HostUser, FTargetDeviceServicePing), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for discovering target device services on the network."));
			MetaData->SetValue(NewProp_HostUser, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_HostUser, TEXT("ToolTip"), TEXT("Holds the name of the user who generated the ping."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServicePing_CRC() { return 2674769882U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceUnclaimed()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceUnclaimed_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceUnclaimed"), sizeof(FTargetDeviceUnclaimed), Get_Z_Construct_UScriptStruct_FTargetDeviceUnclaimed_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceUnclaimed"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceUnclaimed>, EStructFlags(0x00000001));
			UProperty* NewProp_HostUser = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HostUser"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HostUser, FTargetDeviceUnclaimed), 0x0000000000000000);
			UProperty* NewProp_HostName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HostName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HostName, FTargetDeviceUnclaimed), 0x0000000000000000);
			UProperty* NewProp_DeviceName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeviceName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DeviceName, FTargetDeviceUnclaimed), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message that is sent when a device is no longer claimed.\n\n@see FTargetDeviceClaimDenied, FTargetDeviceClaimRequest"));
			MetaData->SetValue(NewProp_HostUser, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_HostUser, TEXT("ToolTip"), TEXT("Holds the name of the user that had claimed the device."));
			MetaData->SetValue(NewProp_HostName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_HostName, TEXT("ToolTip"), TEXT("Holds the name of the host computer that had claimed the device."));
			MetaData->SetValue(NewProp_DeviceName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_DeviceName, TEXT("ToolTip"), TEXT("Holds the identifier of the device that is no longer claimed."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceUnclaimed_CRC() { return 1173175355U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceClaimed()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceClaimed_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceClaimed"), sizeof(FTargetDeviceClaimed), Get_Z_Construct_UScriptStruct_FTargetDeviceClaimed_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceClaimed"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceClaimed>, EStructFlags(0x00000001));
			UProperty* NewProp_HostUser = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HostUser"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HostUser, FTargetDeviceClaimed), 0x0000000000000000);
			UProperty* NewProp_HostName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HostName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HostName, FTargetDeviceClaimed), 0x0000000000000000);
			UProperty* NewProp_DeviceName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeviceName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DeviceName, FTargetDeviceClaimed), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message that is sent when a service claimed a device.\n\n@see FTargetDeviceClaimDenied\n@see FTargetDeviceClaimDropped"));
			MetaData->SetValue(NewProp_HostUser, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_HostUser, TEXT("ToolTip"), TEXT("Holds the name of the user that is claiming the device."));
			MetaData->SetValue(NewProp_HostName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_HostName, TEXT("ToolTip"), TEXT("Holds the name of the host computer that is claiming the device."));
			MetaData->SetValue(NewProp_DeviceName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_DeviceName, TEXT("ToolTip"), TEXT("Holds the identifier of the device that is being claimed."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceClaimed_CRC() { return 3360198563U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceClaimDenied()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceClaimDenied_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceClaimDenied"), sizeof(FTargetDeviceClaimDenied), Get_Z_Construct_UScriptStruct_FTargetDeviceClaimDenied_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceClaimDenied"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceClaimDenied>, EStructFlags(0x00000001));
			UProperty* NewProp_HostUser = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HostUser"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HostUser, FTargetDeviceClaimDenied), 0x0000000000000000);
			UProperty* NewProp_HostName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HostName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(HostName, FTargetDeviceClaimDenied), 0x0000000000000000);
			UProperty* NewProp_DeviceName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeviceName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DeviceName, FTargetDeviceClaimDenied), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message that is sent when a device is already claimed by someone else.\n\n@see FTargetDeviceClaimDropped\n@see FTargetDeviceClaimRequest"));
			MetaData->SetValue(NewProp_HostUser, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_HostUser, TEXT("ToolTip"), TEXT("Holds the name of the user that claimed the device."));
			MetaData->SetValue(NewProp_HostName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_HostName, TEXT("ToolTip"), TEXT("Holds the name of the host computer that claimed the device."));
			MetaData->SetValue(NewProp_DeviceName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_DeviceName, TEXT("ToolTip"), TEXT("Holds the identifier of the device that is already claimed."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceClaimDenied_CRC() { return 3392686495U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchFinished()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchFinished_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServiceLaunchFinished"), sizeof(FTargetDeviceServiceLaunchFinished), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchFinished_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServiceLaunchFinished"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServiceLaunchFinished>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Succeeded, FTargetDeviceServiceLaunchFinished, bool);
			UProperty* NewProp_Succeeded = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Succeeded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Succeeded, FTargetDeviceServiceLaunchFinished), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(Succeeded, FTargetDeviceServiceLaunchFinished), sizeof(bool), true);
			UProperty* NewProp_ProcessId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ProcessId"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ProcessId, FTargetDeviceServiceLaunchFinished), 0x0000000000000000);
			UProperty* NewProp_AppID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AppID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppID, FTargetDeviceServiceLaunchFinished), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for notifying a target device proxy that launching an application has finished.\n\n@see FTargetDeviceServiceLaunchApp"));
			MetaData->SetValue(NewProp_Succeeded, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Succeeded, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the application was launched successfully."));
			MetaData->SetValue(NewProp_ProcessId, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_ProcessId, TEXT("ToolTip"), TEXT("Holds the process identifier for the launched application."));
			MetaData->SetValue(NewProp_AppID, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_AppID, TEXT("ToolTip"), TEXT("Holds the identifier of the launched application.\n\nThe semantics of this identifier are target platform specific. In some cases it may be\na GUID, in other cases it may be the path to the application or some other means of\nidentifying the application. Application identifiers are returned from target device\nservices as result of successful deployment transactions."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchFinished_CRC() { return 1177713918U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchApp()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchApp_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServiceLaunchApp"), sizeof(FTargetDeviceServiceLaunchApp), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchApp_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServiceLaunchApp"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServiceLaunchApp>, EStructFlags(0x00000001));
			UProperty* NewProp_Params = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Params"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Params, FTargetDeviceServiceLaunchApp), 0x0000000000000000);
			UProperty* NewProp_BuildConfiguration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BuildConfiguration"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BuildConfiguration, FTargetDeviceServiceLaunchApp), 0x0000000000000000);
			UProperty* NewProp_AppID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AppID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppID, FTargetDeviceServiceLaunchApp), 0x0000000000000000);
			UProperty* NewProp_Variant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Variant"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Variant, FTargetDeviceServiceLaunchApp), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for committing a deployment transaction.\n\nTo launch an arbitrary executable on a device use the FTargetDeviceServiceRunExecutable message instead.\n\n@see FTargetDeviceServiceLaunchFinished"));
			MetaData->SetValue(NewProp_Params, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Params, TEXT("ToolTip"), TEXT("Holds optional command line parameters for the application."));
			MetaData->SetValue(NewProp_BuildConfiguration, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_BuildConfiguration, TEXT("ToolTip"), TEXT("The application's build configuration, i.e. Debug or Shipping."));
			MetaData->SetValue(NewProp_AppID, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_AppID, TEXT("ToolTip"), TEXT("Holds the identifier of the application to launch.\n\nThe semantics of this identifier are target platform specific. In some cases it may be\na GUID, in other cases it may be the path to the application or some other means of\nidentifying the application. Application identifiers are returned from target device\nservices as result of successful deployment transactions."));
			MetaData->SetValue(NewProp_Variant, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Variant, TEXT("ToolTip"), TEXT("Holds the variant identifier of the target device to use."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceLaunchApp_CRC() { return 657768460U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFinished()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFinished_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServiceDeployFinished"), sizeof(FTargetDeviceServiceDeployFinished), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFinished_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServiceDeployFinished"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServiceDeployFinished>, EStructFlags(0x00000001));
			UProperty* NewProp_TransactionId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TransactionId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TransactionId, FTargetDeviceServiceDeployFinished), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(Succeeded, FTargetDeviceServiceDeployFinished, bool);
			UProperty* NewProp_Succeeded = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Succeeded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Succeeded, FTargetDeviceServiceDeployFinished), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(Succeeded, FTargetDeviceServiceDeployFinished), sizeof(bool), true);
			UProperty* NewProp_AppID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AppID"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(AppID, FTargetDeviceServiceDeployFinished), 0x0000000000000000);
			UProperty* NewProp_Variant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Variant"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Variant, FTargetDeviceServiceDeployFinished), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for notifying a target device proxy that a deployment transaction has finished.\n\n@see FTargetDeviceServiceDeployFile, FTargetDeviceServiceDeployCommit"));
			MetaData->SetValue(NewProp_TransactionId, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_TransactionId, TEXT("ToolTip"), TEXT("Holds the identifier of the deployment transaction that this file is part of."));
			MetaData->SetValue(NewProp_Succeeded, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Succeeded, TEXT("ToolTip"), TEXT("Holds a flag indicating whether the deployment transaction finished successfully."));
			MetaData->SetValue(NewProp_AppID, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_AppID, TEXT("ToolTip"), TEXT("Holds the created identifier for the deployed application.\n\nThe semantics of this identifier are target platform specific. In some cases it may be\na GUID, in other cases it may be the path to the application or some other means of\nidentifying the application. Application identifiers are returned from target device\nservices as result of successful deployment transactions."));
			MetaData->SetValue(NewProp_Variant, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Variant, TEXT("ToolTip"), TEXT("Holds the variant identifier of the target device to use."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFinished_CRC() { return 2945148329U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFile()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFile_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServiceDeployFile"), sizeof(FTargetDeviceServiceDeployFile), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFile_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServiceDeployFile"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServiceDeployFile>, EStructFlags(0x00000001));
			UProperty* NewProp_TransactionId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TransactionId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TransactionId, FTargetDeviceServiceDeployFile), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_TargetFileName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetFileName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(TargetFileName, FTargetDeviceServiceDeployFile), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for deploying a single file to a target device.\n\nThe actual file data must be attached to the message.\n\n@see FTargetDeviceServiceDeployCommit, FTargetDeviceServiceDeployFinished"));
			MetaData->SetValue(NewProp_TransactionId, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_TransactionId, TEXT("ToolTip"), TEXT("Holds the identifier of the deployment transaction that this file is part of."));
			MetaData->SetValue(NewProp_TargetFileName, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_TargetFileName, TEXT("ToolTip"), TEXT("Holds the name and path of the file as it will be stored on the target device."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployFile_CRC() { return 1070808696U; }
	UScriptStruct* Z_Construct_UScriptStruct_FTargetDeviceServiceDeployCommit()
	{
		UPackage* Outer=Z_Construct_UPackage_TargetDeviceServices();
		extern uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployCommit_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("TargetDeviceServiceDeployCommit"), sizeof(FTargetDeviceServiceDeployCommit), Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployCommit_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TargetDeviceServiceDeployCommit"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTargetDeviceServiceDeployCommit>, EStructFlags(0x00000001));
			UProperty* NewProp_TransactionId = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TransactionId"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TransactionId, FTargetDeviceServiceDeployCommit), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_Variant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Variant"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Variant, FTargetDeviceServiceDeployCommit), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Implements a message for committing a deployment transaction.\n\n@see FTargetDeviceServiceDeployFile, FTargetDeviceServiceDeployFinished"));
			MetaData->SetValue(NewProp_TransactionId, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_TransactionId, TEXT("ToolTip"), TEXT("Holds the identifier of the deployment transaction to commit."));
			MetaData->SetValue(NewProp_Variant, TEXT("ModuleRelativePath"), TEXT("Classes/TargetDeviceServiceMessages.h"));
			MetaData->SetValue(NewProp_Variant, TEXT("ToolTip"), TEXT("Holds the variant identifier of the target device to use."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTargetDeviceServiceDeployCommit_CRC() { return 765583298U; }
	UPackage* Z_Construct_UPackage_TargetDeviceServices()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/TargetDeviceServices")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x941534FF;
			Guid.B = 0x2C5DC7CC;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
