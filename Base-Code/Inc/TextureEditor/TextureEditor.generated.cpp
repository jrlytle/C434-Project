// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/TextureEditorPrivatePCH.h"
#include "TextureEditor.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeTextureEditor() {}
static class UEnum* ETextureEditorBackgrounds_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern TEXTUREEDITOR_API class UEnum* Z_Construct_UEnum_TextureEditor_ETextureEditorBackgrounds();
		extern TEXTUREEDITOR_API class UPackage* Z_Construct_UPackage_TextureEditor();
		Singleton = GetStaticEnum(Z_Construct_UEnum_TextureEditor_ETextureEditorBackgrounds, Z_Construct_UPackage_TextureEditor(), TEXT("ETextureEditorBackgrounds"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETextureEditorBackgrounds(ETextureEditorBackgrounds_StaticEnum, TEXT("/Script/TextureEditor"));
	void UTextureEditorSettings::StaticRegisterNativesUTextureEditorSettings()
	{
	}
	IMPLEMENT_CLASS(UTextureEditorSettings, 3711199386);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();

	TEXTUREEDITOR_API class UEnum* Z_Construct_UEnum_TextureEditor_ETextureEditorBackgrounds();
	TEXTUREEDITOR_API class UClass* Z_Construct_UClass_UTextureEditorSettings_NoRegister();
	TEXTUREEDITOR_API class UClass* Z_Construct_UClass_UTextureEditorSettings();
	TEXTUREEDITOR_API class UPackage* Z_Construct_UPackage_TextureEditor();
	UEnum* Z_Construct_UEnum_TextureEditor_ETextureEditorBackgrounds()
	{
		UPackage* Outer=Z_Construct_UPackage_TextureEditor();
		extern uint32 Get_Z_Construct_UEnum_TextureEditor_ETextureEditorBackgrounds_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ETextureEditorBackgrounds"), 0, Get_Z_Construct_UEnum_TextureEditor_ETextureEditorBackgrounds_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETextureEditorBackgrounds"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TextureEditorBackground_SolidColor")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TextureEditorBackground_Checkered")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TextureEditorBackground_CheckeredFill")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("TextureEditorBackground_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/TextureEditorSettings.h"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureEditorBackground_Checkered.DisplayName"), TEXT("Checkered"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureEditorBackground_CheckeredFill.DisplayName"), TEXT("Checkered (Fill)"));
			MetaData->SetValue(ReturnEnum, TEXT("TextureEditorBackground_SolidColor.DisplayName"), TEXT("Solid Color"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates background for the texture editor view port."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_TextureEditor_ETextureEditorBackgrounds_CRC() { return 1799930933U; }
	UClass* Z_Construct_UClass_UTextureEditorSettings_NoRegister()
	{
		return UTextureEditorSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextureEditorSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_TextureEditor();
			OuterClass = UTextureEditorSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(TextureBorderEnabled, UTextureEditorSettings, bool);
				UProperty* NewProp_TextureBorderEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureBorderEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TextureBorderEnabled, UTextureEditorSettings), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(TextureBorderEnabled, UTextureEditorSettings), sizeof(bool), true);
				UProperty* NewProp_TextureBorderColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureBorderColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextureBorderColor, UTextureEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FColor());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(FitToViewport, UTextureEditorSettings, bool);
				UProperty* NewProp_FitToViewport = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FitToViewport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(FitToViewport, UTextureEditorSettings), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(FitToViewport, UTextureEditorSettings), sizeof(bool), true);
				UProperty* NewProp_CheckerSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckerSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CheckerSize, UTextureEditorSettings), 0x0000000000004001);
				UProperty* NewProp_CheckerColorTwo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckerColorTwo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CheckerColorTwo, UTextureEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_CheckerColorOne = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckerColorOne"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CheckerColorOne, UTextureEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor, UTextureEditorSettings), 0x0000000000004001, Z_Construct_UScriptStruct_FColor());
				UProperty* NewProp_Background = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Background"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Background, UTextureEditorSettings), 0x0000000000004000, Z_Construct_UEnum_TextureEditor_ETextureEditorBackgrounds());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("EditorPerProjectUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("TextureEditorSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/TextureEditorSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Implements the Editor's user settings."));
				MetaData->SetValue(NewProp_TextureBorderEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/TextureEditorSettings.h"));
				MetaData->SetValue(NewProp_TextureBorderEnabled, TEXT("ToolTip"), TEXT("If true, displays a border around the texture."));
				MetaData->SetValue(NewProp_TextureBorderColor, TEXT("Category"), TEXT("TextureBorder"));
				MetaData->SetValue(NewProp_TextureBorderColor, TEXT("ModuleRelativePath"), TEXT("Classes/TextureEditorSettings.h"));
				MetaData->SetValue(NewProp_TextureBorderColor, TEXT("ToolTip"), TEXT("Color to use for the texture border, if enabled."));
				MetaData->SetValue(NewProp_FitToViewport, TEXT("ModuleRelativePath"), TEXT("Classes/TextureEditorSettings.h"));
				MetaData->SetValue(NewProp_FitToViewport, TEXT("ToolTip"), TEXT("Whether the texture should scale to fit the view port."));
				MetaData->SetValue(NewProp_CheckerSize, TEXT("Category"), TEXT("Background"));
				MetaData->SetValue(NewProp_CheckerSize, TEXT("ClampMax"), TEXT("4096"));
				MetaData->SetValue(NewProp_CheckerSize, TEXT("ClampMin"), TEXT("2"));
				MetaData->SetValue(NewProp_CheckerSize, TEXT("ModuleRelativePath"), TEXT("Classes/TextureEditorSettings.h"));
				MetaData->SetValue(NewProp_CheckerSize, TEXT("ToolTip"), TEXT("The size of the checkered background tiles."));
				MetaData->SetValue(NewProp_CheckerColorTwo, TEXT("Category"), TEXT("Background"));
				MetaData->SetValue(NewProp_CheckerColorTwo, TEXT("ModuleRelativePath"), TEXT("Classes/TextureEditorSettings.h"));
				MetaData->SetValue(NewProp_CheckerColorTwo, TEXT("ToolTip"), TEXT("The second color of the checkered background."));
				MetaData->SetValue(NewProp_CheckerColorOne, TEXT("Category"), TEXT("Background"));
				MetaData->SetValue(NewProp_CheckerColorOne, TEXT("ModuleRelativePath"), TEXT("Classes/TextureEditorSettings.h"));
				MetaData->SetValue(NewProp_CheckerColorOne, TEXT("ToolTip"), TEXT("The first color of the checkered background."));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("Category"), TEXT("Background"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Classes/TextureEditorSettings.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("Background and foreground color used by Texture preview view ports."));
				MetaData->SetValue(NewProp_Background, TEXT("ModuleRelativePath"), TEXT("Classes/TextureEditorSettings.h"));
				MetaData->SetValue(NewProp_Background, TEXT("ToolTip"), TEXT("The type of background to draw in the texture editor view port."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextureEditorSettings(Z_Construct_UClass_UTextureEditorSettings, TEXT("UTextureEditorSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextureEditorSettings);
	UPackage* Z_Construct_UPackage_TextureEditor()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/TextureEditor")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x49291B0B;
			Guid.B = 0x86DA9D62;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
