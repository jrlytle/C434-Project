// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/UMGPrivatePCH.h"
#include "UMG.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeUMG() {}
	void UAsyncTaskDownloadImage::StaticRegisterNativesUAsyncTaskDownloadImage()
	{
		FNativeFunctionRegistrar::RegisterFunction(UAsyncTaskDownloadImage::StaticClass(),"DownloadImage",(Native)&UAsyncTaskDownloadImage::execDownloadImage);
	}
	IMPLEMENT_CLASS(UAsyncTaskDownloadImage, 947699398);
static class UEnum* EDragPivot_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UEnum* Z_Construct_UEnum_UMG_EDragPivot();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticEnum(Z_Construct_UEnum_UMG_EDragPivot, Z_Construct_UPackage_UMG(), TEXT("EDragPivot"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EDragPivot(EDragPivot_StaticEnum, TEXT("/Script/UMG"));
	void UDragDropOperation::DragCancelled(const FPointerEvent& PointerEvent)
	{
		DragDropOperation_eventDragCancelled_Parms Parms;
		Parms.PointerEvent=PointerEvent;
		ProcessEvent(FindFunctionChecked(UMG_DragCancelled),&Parms);
	}
	void UDragDropOperation::Dragged(const FPointerEvent& PointerEvent)
	{
		DragDropOperation_eventDragged_Parms Parms;
		Parms.PointerEvent=PointerEvent;
		ProcessEvent(FindFunctionChecked(UMG_Dragged),&Parms);
	}
	void UDragDropOperation::Drop(const FPointerEvent& PointerEvent)
	{
		DragDropOperation_eventDrop_Parms Parms;
		Parms.PointerEvent=PointerEvent;
		ProcessEvent(FindFunctionChecked(UMG_Drop),&Parms);
	}
	void UDragDropOperation::StaticRegisterNativesUDragDropOperation()
	{
		FNativeFunctionRegistrar::RegisterFunction(UDragDropOperation::StaticClass(),"DragCancelled",(Native)&UDragDropOperation::execDragCancelled);
		FNativeFunctionRegistrar::RegisterFunction(UDragDropOperation::StaticClass(),"Dragged",(Native)&UDragDropOperation::execDragged);
		FNativeFunctionRegistrar::RegisterFunction(UDragDropOperation::StaticClass(),"Drop",(Native)&UDragDropOperation::execDrop);
	}
	IMPLEMENT_CLASS(UDragDropOperation, 1554969578);
	void UMovieScene2DTransformSection::StaticRegisterNativesUMovieScene2DTransformSection()
	{
	}
	IMPLEMENT_CLASS(UMovieScene2DTransformSection, 1806363959);
class UScriptStruct* FWidgetTransform::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FWidgetTransform();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FWidgetTransform_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FWidgetTransform, Z_Construct_UPackage_UMG(), TEXT("WidgetTransform"), sizeof(FWidgetTransform), Get_Z_Construct_UScriptStruct_FWidgetTransform_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FWidgetTransform(FWidgetTransform::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFWidgetTransform
{
	FScriptStruct_UMG_StaticRegisterNativesFWidgetTransform()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("WidgetTransform")),new UScriptStruct::TCppStructOps<FWidgetTransform>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFWidgetTransform;
	void UMovieScene2DTransformTrack::StaticRegisterNativesUMovieScene2DTransformTrack()
	{
	}
	IMPLEMENT_CLASS(UMovieScene2DTransformTrack, 2869954999);
	void UMovieSceneMarginSection::StaticRegisterNativesUMovieSceneMarginSection()
	{
	}
	IMPLEMENT_CLASS(UMovieSceneMarginSection, 1817671869);
	void UMovieSceneMarginTrack::StaticRegisterNativesUMovieSceneMarginTrack()
	{
	}
	IMPLEMENT_CLASS(UMovieSceneMarginTrack, 3893563381);
	void UNamedSlotInterface::StaticRegisterNativesUNamedSlotInterface()
	{
	}
	IMPLEMENT_CLASS(UNamedSlotInterface, 2441350736);
class UScriptStruct* FDynamicPropertyPath::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FDynamicPropertyPath();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FDynamicPropertyPath_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDynamicPropertyPath, Z_Construct_UPackage_UMG(), TEXT("DynamicPropertyPath"), sizeof(FDynamicPropertyPath), Get_Z_Construct_UScriptStruct_FDynamicPropertyPath_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDynamicPropertyPath(FDynamicPropertyPath::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFDynamicPropertyPath
{
	FScriptStruct_UMG_StaticRegisterNativesFDynamicPropertyPath()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DynamicPropertyPath")),new UScriptStruct::TCppStructOps<FDynamicPropertyPath>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFDynamicPropertyPath;
class UScriptStruct* FPropertyPathSegment::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FPropertyPathSegment();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FPropertyPathSegment_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FPropertyPathSegment, Z_Construct_UPackage_UMG(), TEXT("PropertyPathSegment"), sizeof(FPropertyPathSegment), Get_Z_Construct_UScriptStruct_FPropertyPathSegment_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FPropertyPathSegment(FPropertyPathSegment::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFPropertyPathSegment
{
	FScriptStruct_UMG_StaticRegisterNativesFPropertyPathSegment()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("PropertyPathSegment")),new UScriptStruct::TCppStructOps<FPropertyPathSegment>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFPropertyPathSegment;
	void UPropertyBinding::StaticRegisterNativesUPropertyBinding()
	{
	}
	IMPLEMENT_CLASS(UPropertyBinding, 1035378769);
	void UBoolBinding::StaticRegisterNativesUBoolBinding()
	{
		FNativeFunctionRegistrar::RegisterFunction(UBoolBinding::StaticClass(),"GetValue",(Native)&UBoolBinding::execGetValue);
	}
	IMPLEMENT_CLASS(UBoolBinding, 3157505756);
	void UBrushBinding::StaticRegisterNativesUBrushBinding()
	{
		FNativeFunctionRegistrar::RegisterFunction(UBrushBinding::StaticClass(),"GetValue",(Native)&UBrushBinding::execGetValue);
	}
	IMPLEMENT_CLASS(UBrushBinding, 3935073592);
	void UCheckedStateBinding::StaticRegisterNativesUCheckedStateBinding()
	{
		FNativeFunctionRegistrar::RegisterFunction(UCheckedStateBinding::StaticClass(),"GetValue",(Native)&UCheckedStateBinding::execGetValue);
	}
	IMPLEMENT_CLASS(UCheckedStateBinding, 1491151683);
	void UColorBinding::StaticRegisterNativesUColorBinding()
	{
		FNativeFunctionRegistrar::RegisterFunction(UColorBinding::StaticClass(),"GetLinearValue",(Native)&UColorBinding::execGetLinearValue);
		FNativeFunctionRegistrar::RegisterFunction(UColorBinding::StaticClass(),"GetSlateValue",(Native)&UColorBinding::execGetSlateValue);
	}
	IMPLEMENT_CLASS(UColorBinding, 1422616958);
	void UFloatBinding::StaticRegisterNativesUFloatBinding()
	{
		FNativeFunctionRegistrar::RegisterFunction(UFloatBinding::StaticClass(),"GetValue",(Native)&UFloatBinding::execGetValue);
	}
	IMPLEMENT_CLASS(UFloatBinding, 525857160);
	void UInt32Binding::StaticRegisterNativesUInt32Binding()
	{
		FNativeFunctionRegistrar::RegisterFunction(UInt32Binding::StaticClass(),"GetValue",(Native)&UInt32Binding::execGetValue);
	}
	IMPLEMENT_CLASS(UInt32Binding, 751081965);
	void UMouseCursorBinding::StaticRegisterNativesUMouseCursorBinding()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMouseCursorBinding::StaticClass(),"GetValue",(Native)&UMouseCursorBinding::execGetValue);
	}
	IMPLEMENT_CLASS(UMouseCursorBinding, 2582011705);
	void UTextBinding::StaticRegisterNativesUTextBinding()
	{
		FNativeFunctionRegistrar::RegisterFunction(UTextBinding::StaticClass(),"GetStringValue",(Native)&UTextBinding::execGetStringValue);
		FNativeFunctionRegistrar::RegisterFunction(UTextBinding::StaticClass(),"GetTextValue",(Native)&UTextBinding::execGetTextValue);
	}
	IMPLEMENT_CLASS(UTextBinding, 1559258273);
static class UEnum* ESlateSizeRule_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UEnum* Z_Construct_UEnum_UMG_ESlateSizeRule();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticEnum(Z_Construct_UEnum_UMG_ESlateSizeRule, Z_Construct_UPackage_UMG(), TEXT("ESlateSizeRule"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESlateSizeRule(ESlateSizeRule_StaticEnum, TEXT("/Script/UMG"));
static class UEnum* ESlateVisibility_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UEnum* Z_Construct_UEnum_UMG_ESlateVisibility();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticEnum(Z_Construct_UEnum_UMG_ESlateVisibility, Z_Construct_UPackage_UMG(), TEXT("ESlateVisibility"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ESlateVisibility(ESlateVisibility_StaticEnum, TEXT("/Script/UMG"));
class UScriptStruct* FSlateChildSize::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateChildSize();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FSlateChildSize_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSlateChildSize, Z_Construct_UPackage_UMG(), TEXT("SlateChildSize"), sizeof(FSlateChildSize), Get_Z_Construct_UScriptStruct_FSlateChildSize_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSlateChildSize(FSlateChildSize::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFSlateChildSize
{
	FScriptStruct_UMG_StaticRegisterNativesFSlateChildSize()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SlateChildSize")),new UScriptStruct::TCppStructOps<FSlateChildSize>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFSlateChildSize;
class UScriptStruct* FEventReply::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FEventReply();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FEventReply_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FEventReply, Z_Construct_UPackage_UMG(), TEXT("EventReply"), sizeof(FEventReply), Get_Z_Construct_UScriptStruct_FEventReply_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FEventReply(FEventReply::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFEventReply
{
	FScriptStruct_UMG_StaticRegisterNativesFEventReply()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("EventReply")),new UScriptStruct::TCppStructOps<FEventReply>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFEventReply;
	void UVisibilityBinding::StaticRegisterNativesUVisibilityBinding()
	{
		FNativeFunctionRegistrar::RegisterFunction(UVisibilityBinding::StaticClass(),"GetValue",(Native)&UVisibilityBinding::execGetValue);
	}
	IMPLEMENT_CLASS(UVisibilityBinding, 2354229659);
	void UWidgetBinding::StaticRegisterNativesUWidgetBinding()
	{
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBinding::StaticClass(),"GetValue",(Native)&UWidgetBinding::execGetValue);
	}
	IMPLEMENT_CLASS(UWidgetBinding, 3783137821);
	void URichTextBlockDecorator::StaticRegisterNativesURichTextBlockDecorator()
	{
	}
	IMPLEMENT_CLASS(URichTextBlockDecorator, 8109101);
	void USlateBlueprintLibrary::StaticRegisterNativesUSlateBlueprintLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(USlateBlueprintLibrary::StaticClass(),"AbsoluteToLocal",(Native)&USlateBlueprintLibrary::execAbsoluteToLocal);
		FNativeFunctionRegistrar::RegisterFunction(USlateBlueprintLibrary::StaticClass(),"AbsoluteToViewport",(Native)&USlateBlueprintLibrary::execAbsoluteToViewport);
		FNativeFunctionRegistrar::RegisterFunction(USlateBlueprintLibrary::StaticClass(),"GetLocalSize",(Native)&USlateBlueprintLibrary::execGetLocalSize);
		FNativeFunctionRegistrar::RegisterFunction(USlateBlueprintLibrary::StaticClass(),"IsUnderLocation",(Native)&USlateBlueprintLibrary::execIsUnderLocation);
		FNativeFunctionRegistrar::RegisterFunction(USlateBlueprintLibrary::StaticClass(),"LocalToAbsolute",(Native)&USlateBlueprintLibrary::execLocalToAbsolute);
		FNativeFunctionRegistrar::RegisterFunction(USlateBlueprintLibrary::StaticClass(),"LocalToViewport",(Native)&USlateBlueprintLibrary::execLocalToViewport);
	}
	IMPLEMENT_CLASS(USlateBlueprintLibrary, 2422980411);
	void UUMGSequencePlayer::StaticRegisterNativesUUMGSequencePlayer()
	{
	}
	IMPLEMENT_CLASS(UUMGSequencePlayer, 2185453679);
	void UVisual::StaticRegisterNativesUVisual()
	{
	}
	IMPLEMENT_CLASS(UVisual, 3807753071);
	void UPanelSlot::StaticRegisterNativesUPanelSlot()
	{
	}
	IMPLEMENT_CLASS(UPanelSlot, 1958670646);
	void UBorderSlot::StaticRegisterNativesUBorderSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UBorderSlot::StaticClass(),"SetHorizontalAlignment",(Native)&UBorderSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UBorderSlot::StaticClass(),"SetPadding",(Native)&UBorderSlot::execSetPadding);
		FNativeFunctionRegistrar::RegisterFunction(UBorderSlot::StaticClass(),"SetVerticalAlignment",(Native)&UBorderSlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UBorderSlot, 1263286916);
	void UButtonSlot::StaticRegisterNativesUButtonSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UButtonSlot::StaticClass(),"SetHorizontalAlignment",(Native)&UButtonSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UButtonSlot::StaticClass(),"SetPadding",(Native)&UButtonSlot::execSetPadding);
		FNativeFunctionRegistrar::RegisterFunction(UButtonSlot::StaticClass(),"SetVerticalAlignment",(Native)&UButtonSlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UButtonSlot, 3970727560);
class UScriptStruct* FAnchorData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FAnchorData();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FAnchorData_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FAnchorData, Z_Construct_UPackage_UMG(), TEXT("AnchorData"), sizeof(FAnchorData), Get_Z_Construct_UScriptStruct_FAnchorData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FAnchorData(FAnchorData::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFAnchorData
{
	FScriptStruct_UMG_StaticRegisterNativesFAnchorData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("AnchorData")),new UScriptStruct::TCppStructOps<FAnchorData>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFAnchorData;
	void UCanvasPanelSlot::StaticRegisterNativesUCanvasPanelSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"GetAlignment",(Native)&UCanvasPanelSlot::execGetAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"GetAnchors",(Native)&UCanvasPanelSlot::execGetAnchors);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"GetAutoSize",(Native)&UCanvasPanelSlot::execGetAutoSize);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"GetLayout",(Native)&UCanvasPanelSlot::execGetLayout);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"GetOffsets",(Native)&UCanvasPanelSlot::execGetOffsets);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"GetPosition",(Native)&UCanvasPanelSlot::execGetPosition);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"GetSize",(Native)&UCanvasPanelSlot::execGetSize);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"GetZOrder",(Native)&UCanvasPanelSlot::execGetZOrder);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"SetAlignment",(Native)&UCanvasPanelSlot::execSetAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"SetAnchors",(Native)&UCanvasPanelSlot::execSetAnchors);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"SetAutoSize",(Native)&UCanvasPanelSlot::execSetAutoSize);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"SetLayout",(Native)&UCanvasPanelSlot::execSetLayout);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"SetMaximum",(Native)&UCanvasPanelSlot::execSetMaximum);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"SetMinimum",(Native)&UCanvasPanelSlot::execSetMinimum);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"SetOffsets",(Native)&UCanvasPanelSlot::execSetOffsets);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"SetPosition",(Native)&UCanvasPanelSlot::execSetPosition);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"SetSize",(Native)&UCanvasPanelSlot::execSetSize);
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanelSlot::StaticClass(),"SetZOrder",(Native)&UCanvasPanelSlot::execSetZOrder);
	}
	IMPLEMENT_CLASS(UCanvasPanelSlot, 2310568753);
	void UGridSlot::StaticRegisterNativesUGridSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGridSlot::StaticClass(),"SetColumn",(Native)&UGridSlot::execSetColumn);
		FNativeFunctionRegistrar::RegisterFunction(UGridSlot::StaticClass(),"SetColumnSpan",(Native)&UGridSlot::execSetColumnSpan);
		FNativeFunctionRegistrar::RegisterFunction(UGridSlot::StaticClass(),"SetHorizontalAlignment",(Native)&UGridSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UGridSlot::StaticClass(),"SetRow",(Native)&UGridSlot::execSetRow);
		FNativeFunctionRegistrar::RegisterFunction(UGridSlot::StaticClass(),"SetRowSpan",(Native)&UGridSlot::execSetRowSpan);
		FNativeFunctionRegistrar::RegisterFunction(UGridSlot::StaticClass(),"SetVerticalAlignment",(Native)&UGridSlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UGridSlot, 4240315559);
	void UHorizontalBoxSlot::StaticRegisterNativesUHorizontalBoxSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UHorizontalBoxSlot::StaticClass(),"SetHorizontalAlignment",(Native)&UHorizontalBoxSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UHorizontalBoxSlot::StaticClass(),"SetPadding",(Native)&UHorizontalBoxSlot::execSetPadding);
		FNativeFunctionRegistrar::RegisterFunction(UHorizontalBoxSlot::StaticClass(),"SetSize",(Native)&UHorizontalBoxSlot::execSetSize);
		FNativeFunctionRegistrar::RegisterFunction(UHorizontalBoxSlot::StaticClass(),"SetVerticalAlignment",(Native)&UHorizontalBoxSlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UHorizontalBoxSlot, 3809999829);
	void UOverlaySlot::StaticRegisterNativesUOverlaySlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UOverlaySlot::StaticClass(),"SetHorizontalAlignment",(Native)&UOverlaySlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UOverlaySlot::StaticClass(),"SetPadding",(Native)&UOverlaySlot::execSetPadding);
		FNativeFunctionRegistrar::RegisterFunction(UOverlaySlot::StaticClass(),"SetVerticalAlignment",(Native)&UOverlaySlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UOverlaySlot, 368201941);
	void USafeZoneSlot::StaticRegisterNativesUSafeZoneSlot()
	{
	}
	IMPLEMENT_CLASS(USafeZoneSlot, 2301842165);
	void UScaleBoxSlot::StaticRegisterNativesUScaleBoxSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UScaleBoxSlot::StaticClass(),"SetHorizontalAlignment",(Native)&UScaleBoxSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UScaleBoxSlot::StaticClass(),"SetPadding",(Native)&UScaleBoxSlot::execSetPadding);
		FNativeFunctionRegistrar::RegisterFunction(UScaleBoxSlot::StaticClass(),"SetVerticalAlignment",(Native)&UScaleBoxSlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UScaleBoxSlot, 1031705673);
	void UScrollBoxSlot::StaticRegisterNativesUScrollBoxSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UScrollBoxSlot::StaticClass(),"SetHorizontalAlignment",(Native)&UScrollBoxSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UScrollBoxSlot::StaticClass(),"SetPadding",(Native)&UScrollBoxSlot::execSetPadding);
	}
	IMPLEMENT_CLASS(UScrollBoxSlot, 177992241);
	void USizeBoxSlot::StaticRegisterNativesUSizeBoxSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(USizeBoxSlot::StaticClass(),"SetHorizontalAlignment",(Native)&USizeBoxSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(USizeBoxSlot::StaticClass(),"SetPadding",(Native)&USizeBoxSlot::execSetPadding);
		FNativeFunctionRegistrar::RegisterFunction(USizeBoxSlot::StaticClass(),"SetVerticalAlignment",(Native)&USizeBoxSlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(USizeBoxSlot, 3026130821);
	void UUniformGridSlot::StaticRegisterNativesUUniformGridSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UUniformGridSlot::StaticClass(),"SetColumn",(Native)&UUniformGridSlot::execSetColumn);
		FNativeFunctionRegistrar::RegisterFunction(UUniformGridSlot::StaticClass(),"SetHorizontalAlignment",(Native)&UUniformGridSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UUniformGridSlot::StaticClass(),"SetRow",(Native)&UUniformGridSlot::execSetRow);
		FNativeFunctionRegistrar::RegisterFunction(UUniformGridSlot::StaticClass(),"SetVerticalAlignment",(Native)&UUniformGridSlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UUniformGridSlot, 3088506151);
	void UVerticalBoxSlot::StaticRegisterNativesUVerticalBoxSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UVerticalBoxSlot::StaticClass(),"SetHorizontalAlignment",(Native)&UVerticalBoxSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UVerticalBoxSlot::StaticClass(),"SetPadding",(Native)&UVerticalBoxSlot::execSetPadding);
		FNativeFunctionRegistrar::RegisterFunction(UVerticalBoxSlot::StaticClass(),"SetSize",(Native)&UVerticalBoxSlot::execSetSize);
		FNativeFunctionRegistrar::RegisterFunction(UVerticalBoxSlot::StaticClass(),"SetVerticalAlignment",(Native)&UVerticalBoxSlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UVerticalBoxSlot, 2839628848);
	void UWidgetSwitcherSlot::StaticRegisterNativesUWidgetSwitcherSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UWidgetSwitcherSlot::StaticClass(),"SetHorizontalAlignment",(Native)&UWidgetSwitcherSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetSwitcherSlot::StaticClass(),"SetPadding",(Native)&UWidgetSwitcherSlot::execSetPadding);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetSwitcherSlot::StaticClass(),"SetVerticalAlignment",(Native)&UWidgetSwitcherSlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UWidgetSwitcherSlot, 3032346687);
	void UWrapBoxSlot::StaticRegisterNativesUWrapBoxSlot()
	{
		FNativeFunctionRegistrar::RegisterFunction(UWrapBoxSlot::StaticClass(),"SetFillEmptySpace",(Native)&UWrapBoxSlot::execSetFillEmptySpace);
		FNativeFunctionRegistrar::RegisterFunction(UWrapBoxSlot::StaticClass(),"SetFillSpanWhenLessThan",(Native)&UWrapBoxSlot::execSetFillSpanWhenLessThan);
		FNativeFunctionRegistrar::RegisterFunction(UWrapBoxSlot::StaticClass(),"SetHorizontalAlignment",(Native)&UWrapBoxSlot::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UWrapBoxSlot::StaticClass(),"SetPadding",(Native)&UWrapBoxSlot::execSetPadding);
		FNativeFunctionRegistrar::RegisterFunction(UWrapBoxSlot::StaticClass(),"SetVerticalAlignment",(Native)&UWrapBoxSlot::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UWrapBoxSlot, 2921295842);
static class UEnum* EWidgetDesignFlags_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetDesignFlags();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticEnum(Z_Construct_UEnum_UMG_EWidgetDesignFlags, Z_Construct_UPackage_UMG(), TEXT("EWidgetDesignFlags"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EWidgetDesignFlags(EWidgetDesignFlags_StaticEnum, TEXT("/Script/UMG"));
	void UWidget::StaticRegisterNativesUWidget()
	{
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"ForceLayoutPrepass",(Native)&UWidget::execForceLayoutPrepass);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"ForceVolatile",(Native)&UWidget::execForceVolatile);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"GetDesiredSize",(Native)&UWidget::execGetDesiredSize);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"GetIsEnabled",(Native)&UWidget::execGetIsEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"GetParent",(Native)&UWidget::execGetParent);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"GetVisibility",(Native)&UWidget::execGetVisibility);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"HasAnyUserFocus",(Native)&UWidget::execHasAnyUserFocus);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"HasFocusedDescendants",(Native)&UWidget::execHasFocusedDescendants);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"HasKeyboardFocus",(Native)&UWidget::execHasKeyboardFocus);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"HasMouseCapture",(Native)&UWidget::execHasMouseCapture);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"HasUserFocus",(Native)&UWidget::execHasUserFocus);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"HasUserFocusedDescendants",(Native)&UWidget::execHasUserFocusedDescendants);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"InvalidateLayoutAndVolatility",(Native)&UWidget::execInvalidateLayoutAndVolatility);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"IsHovered",(Native)&UWidget::execIsHovered);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"IsVisible",(Native)&UWidget::execIsVisible);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"RemoveFromParent",(Native)&UWidget::execRemoveFromParent);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"ResetCursor",(Native)&UWidget::execResetCursor);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetCursor",(Native)&UWidget::execSetCursor);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetIsEnabled",(Native)&UWidget::execSetIsEnabled);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetKeyboardFocus",(Native)&UWidget::execSetKeyboardFocus);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetRenderAngle",(Native)&UWidget::execSetRenderAngle);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetRenderScale",(Native)&UWidget::execSetRenderScale);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetRenderShear",(Native)&UWidget::execSetRenderShear);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetRenderTransform",(Native)&UWidget::execSetRenderTransform);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetRenderTransformPivot",(Native)&UWidget::execSetRenderTransformPivot);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetRenderTranslation",(Native)&UWidget::execSetRenderTranslation);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetToolTip",(Native)&UWidget::execSetToolTip);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetToolTipText",(Native)&UWidget::execSetToolTipText);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetUserFocus",(Native)&UWidget::execSetUserFocus);
		FNativeFunctionRegistrar::RegisterFunction(UWidget::StaticClass(),"SetVisibility",(Native)&UWidget::execSetVisibility);
	}
	IMPLEMENT_CLASS(UWidget, 178145970);
	void UCircularThrobber::StaticRegisterNativesUCircularThrobber()
	{
		FNativeFunctionRegistrar::RegisterFunction(UCircularThrobber::StaticClass(),"SetNumberOfPieces",(Native)&UCircularThrobber::execSetNumberOfPieces);
		FNativeFunctionRegistrar::RegisterFunction(UCircularThrobber::StaticClass(),"SetPeriod",(Native)&UCircularThrobber::execSetPeriod);
		FNativeFunctionRegistrar::RegisterFunction(UCircularThrobber::StaticClass(),"SetRadius",(Native)&UCircularThrobber::execSetRadius);
	}
	IMPLEMENT_CLASS(UCircularThrobber, 3954192811);
	void UComboBox::StaticRegisterNativesUComboBox()
	{
	}
	IMPLEMENT_CLASS(UComboBox, 1792504717);
	void UComboBoxString::StaticRegisterNativesUComboBoxString()
	{
		FNativeFunctionRegistrar::RegisterFunction(UComboBoxString::StaticClass(),"AddOption",(Native)&UComboBoxString::execAddOption);
		FNativeFunctionRegistrar::RegisterFunction(UComboBoxString::StaticClass(),"ClearOptions",(Native)&UComboBoxString::execClearOptions);
		FNativeFunctionRegistrar::RegisterFunction(UComboBoxString::StaticClass(),"ClearSelection",(Native)&UComboBoxString::execClearSelection);
		FNativeFunctionRegistrar::RegisterFunction(UComboBoxString::StaticClass(),"FindOptionIndex",(Native)&UComboBoxString::execFindOptionIndex);
		FNativeFunctionRegistrar::RegisterFunction(UComboBoxString::StaticClass(),"GetOptionAtIndex",(Native)&UComboBoxString::execGetOptionAtIndex);
		FNativeFunctionRegistrar::RegisterFunction(UComboBoxString::StaticClass(),"GetOptionCount",(Native)&UComboBoxString::execGetOptionCount);
		FNativeFunctionRegistrar::RegisterFunction(UComboBoxString::StaticClass(),"GetSelectedOption",(Native)&UComboBoxString::execGetSelectedOption);
		FNativeFunctionRegistrar::RegisterFunction(UComboBoxString::StaticClass(),"RefreshOptions",(Native)&UComboBoxString::execRefreshOptions);
		FNativeFunctionRegistrar::RegisterFunction(UComboBoxString::StaticClass(),"RemoveOption",(Native)&UComboBoxString::execRemoveOption);
		FNativeFunctionRegistrar::RegisterFunction(UComboBoxString::StaticClass(),"SetSelectedOption",(Native)&UComboBoxString::execSetSelectedOption);
	}
	IMPLEMENT_CLASS(UComboBoxString, 775273397);
	void UEditableText::StaticRegisterNativesUEditableText()
	{
		FNativeFunctionRegistrar::RegisterFunction(UEditableText::StaticClass(),"GetText",(Native)&UEditableText::execGetText);
		FNativeFunctionRegistrar::RegisterFunction(UEditableText::StaticClass(),"SetHintText",(Native)&UEditableText::execSetHintText);
		FNativeFunctionRegistrar::RegisterFunction(UEditableText::StaticClass(),"SetIsPassword",(Native)&UEditableText::execSetIsPassword);
		FNativeFunctionRegistrar::RegisterFunction(UEditableText::StaticClass(),"SetIsReadOnly",(Native)&UEditableText::execSetIsReadOnly);
		FNativeFunctionRegistrar::RegisterFunction(UEditableText::StaticClass(),"SetText",(Native)&UEditableText::execSetText);
	}
	IMPLEMENT_CLASS(UEditableText, 199285301);
	void UEditableTextBox::StaticRegisterNativesUEditableTextBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(UEditableTextBox::StaticClass(),"ClearError",(Native)&UEditableTextBox::execClearError);
		FNativeFunctionRegistrar::RegisterFunction(UEditableTextBox::StaticClass(),"GetText",(Native)&UEditableTextBox::execGetText);
		FNativeFunctionRegistrar::RegisterFunction(UEditableTextBox::StaticClass(),"SetError",(Native)&UEditableTextBox::execSetError);
		FNativeFunctionRegistrar::RegisterFunction(UEditableTextBox::StaticClass(),"SetText",(Native)&UEditableTextBox::execSetText);
	}
	IMPLEMENT_CLASS(UEditableTextBox, 1459136924);
	void UExpandableArea::StaticRegisterNativesUExpandableArea()
	{
		FNativeFunctionRegistrar::RegisterFunction(UExpandableArea::StaticClass(),"GetIsExpanded",(Native)&UExpandableArea::execGetIsExpanded);
		FNativeFunctionRegistrar::RegisterFunction(UExpandableArea::StaticClass(),"SetIsExpanded",(Native)&UExpandableArea::execSetIsExpanded);
	}
	IMPLEMENT_CLASS(UExpandableArea, 4073027936);
	void UImage::StaticRegisterNativesUImage()
	{
		FNativeFunctionRegistrar::RegisterFunction(UImage::StaticClass(),"GetDynamicMaterial",(Native)&UImage::execGetDynamicMaterial);
		FNativeFunctionRegistrar::RegisterFunction(UImage::StaticClass(),"SetBrush",(Native)&UImage::execSetBrush);
		FNativeFunctionRegistrar::RegisterFunction(UImage::StaticClass(),"SetBrushFromAsset",(Native)&UImage::execSetBrushFromAsset);
		FNativeFunctionRegistrar::RegisterFunction(UImage::StaticClass(),"SetBrushFromMaterial",(Native)&UImage::execSetBrushFromMaterial);
		FNativeFunctionRegistrar::RegisterFunction(UImage::StaticClass(),"SetBrushFromTexture",(Native)&UImage::execSetBrushFromTexture);
		FNativeFunctionRegistrar::RegisterFunction(UImage::StaticClass(),"SetColorAndOpacity",(Native)&UImage::execSetColorAndOpacity);
		FNativeFunctionRegistrar::RegisterFunction(UImage::StaticClass(),"SetOpacity",(Native)&UImage::execSetOpacity);
	}
	IMPLEMENT_CLASS(UImage, 762779490);
	void UMultiLineEditableText::StaticRegisterNativesUMultiLineEditableText()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMultiLineEditableText::StaticClass(),"GetText",(Native)&UMultiLineEditableText::execGetText);
		FNativeFunctionRegistrar::RegisterFunction(UMultiLineEditableText::StaticClass(),"SetText",(Native)&UMultiLineEditableText::execSetText);
	}
	IMPLEMENT_CLASS(UMultiLineEditableText, 3960705656);
	void UMultiLineEditableTextBox::StaticRegisterNativesUMultiLineEditableTextBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMultiLineEditableTextBox::StaticClass(),"GetText",(Native)&UMultiLineEditableTextBox::execGetText);
		FNativeFunctionRegistrar::RegisterFunction(UMultiLineEditableTextBox::StaticClass(),"SetError",(Native)&UMultiLineEditableTextBox::execSetError);
		FNativeFunctionRegistrar::RegisterFunction(UMultiLineEditableTextBox::StaticClass(),"SetText",(Native)&UMultiLineEditableTextBox::execSetText);
	}
	IMPLEMENT_CLASS(UMultiLineEditableTextBox, 4134698734);
	void UNativeWidgetHost::StaticRegisterNativesUNativeWidgetHost()
	{
	}
	IMPLEMENT_CLASS(UNativeWidgetHost, 2695827392);
	void UPanelWidget::StaticRegisterNativesUPanelWidget()
	{
		FNativeFunctionRegistrar::RegisterFunction(UPanelWidget::StaticClass(),"AddChild",(Native)&UPanelWidget::execAddChild);
		FNativeFunctionRegistrar::RegisterFunction(UPanelWidget::StaticClass(),"ClearChildren",(Native)&UPanelWidget::execClearChildren);
		FNativeFunctionRegistrar::RegisterFunction(UPanelWidget::StaticClass(),"GetChildAt",(Native)&UPanelWidget::execGetChildAt);
		FNativeFunctionRegistrar::RegisterFunction(UPanelWidget::StaticClass(),"GetChildIndex",(Native)&UPanelWidget::execGetChildIndex);
		FNativeFunctionRegistrar::RegisterFunction(UPanelWidget::StaticClass(),"GetChildrenCount",(Native)&UPanelWidget::execGetChildrenCount);
		FNativeFunctionRegistrar::RegisterFunction(UPanelWidget::StaticClass(),"HasAnyChildren",(Native)&UPanelWidget::execHasAnyChildren);
		FNativeFunctionRegistrar::RegisterFunction(UPanelWidget::StaticClass(),"HasChild",(Native)&UPanelWidget::execHasChild);
		FNativeFunctionRegistrar::RegisterFunction(UPanelWidget::StaticClass(),"RemoveChild",(Native)&UPanelWidget::execRemoveChild);
		FNativeFunctionRegistrar::RegisterFunction(UPanelWidget::StaticClass(),"RemoveChildAt",(Native)&UPanelWidget::execRemoveChildAt);
	}
	IMPLEMENT_CLASS(UPanelWidget, 579822454);
	void UCanvasPanel::StaticRegisterNativesUCanvasPanel()
	{
		FNativeFunctionRegistrar::RegisterFunction(UCanvasPanel::StaticClass(),"AddChildToCanvas",(Native)&UCanvasPanel::execAddChildToCanvas);
	}
	IMPLEMENT_CLASS(UCanvasPanel, 3763931255);
	void UContentWidget::StaticRegisterNativesUContentWidget()
	{
		FNativeFunctionRegistrar::RegisterFunction(UContentWidget::StaticClass(),"GetContentSlot",(Native)&UContentWidget::execGetContentSlot);
	}
	IMPLEMENT_CLASS(UContentWidget, 341276621);
	void UBorder::StaticRegisterNativesUBorder()
	{
		FNativeFunctionRegistrar::RegisterFunction(UBorder::StaticClass(),"GetDynamicMaterial",(Native)&UBorder::execGetDynamicMaterial);
		FNativeFunctionRegistrar::RegisterFunction(UBorder::StaticClass(),"SetBrush",(Native)&UBorder::execSetBrush);
		FNativeFunctionRegistrar::RegisterFunction(UBorder::StaticClass(),"SetBrushColor",(Native)&UBorder::execSetBrushColor);
		FNativeFunctionRegistrar::RegisterFunction(UBorder::StaticClass(),"SetBrushFromAsset",(Native)&UBorder::execSetBrushFromAsset);
		FNativeFunctionRegistrar::RegisterFunction(UBorder::StaticClass(),"SetBrushFromMaterial",(Native)&UBorder::execSetBrushFromMaterial);
		FNativeFunctionRegistrar::RegisterFunction(UBorder::StaticClass(),"SetBrushFromTexture",(Native)&UBorder::execSetBrushFromTexture);
		FNativeFunctionRegistrar::RegisterFunction(UBorder::StaticClass(),"SetContentColorAndOpacity",(Native)&UBorder::execSetContentColorAndOpacity);
		FNativeFunctionRegistrar::RegisterFunction(UBorder::StaticClass(),"SetHorizontalAlignment",(Native)&UBorder::execSetHorizontalAlignment);
		FNativeFunctionRegistrar::RegisterFunction(UBorder::StaticClass(),"SetPadding",(Native)&UBorder::execSetPadding);
		FNativeFunctionRegistrar::RegisterFunction(UBorder::StaticClass(),"SetVerticalAlignment",(Native)&UBorder::execSetVerticalAlignment);
	}
	IMPLEMENT_CLASS(UBorder, 794073030);
	void UButton::StaticRegisterNativesUButton()
	{
		FNativeFunctionRegistrar::RegisterFunction(UButton::StaticClass(),"IsPressed",(Native)&UButton::execIsPressed);
		FNativeFunctionRegistrar::RegisterFunction(UButton::StaticClass(),"SetBackgroundColor",(Native)&UButton::execSetBackgroundColor);
		FNativeFunctionRegistrar::RegisterFunction(UButton::StaticClass(),"SetColorAndOpacity",(Native)&UButton::execSetColorAndOpacity);
	}
	IMPLEMENT_CLASS(UButton, 3760773516);
	void UCheckBox::StaticRegisterNativesUCheckBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(UCheckBox::StaticClass(),"GetCheckedState",(Native)&UCheckBox::execGetCheckedState);
		FNativeFunctionRegistrar::RegisterFunction(UCheckBox::StaticClass(),"IsChecked",(Native)&UCheckBox::execIsChecked);
		FNativeFunctionRegistrar::RegisterFunction(UCheckBox::StaticClass(),"IsPressed",(Native)&UCheckBox::execIsPressed);
		FNativeFunctionRegistrar::RegisterFunction(UCheckBox::StaticClass(),"SetCheckedState",(Native)&UCheckBox::execSetCheckedState);
		FNativeFunctionRegistrar::RegisterFunction(UCheckBox::StaticClass(),"SetIsChecked",(Native)&UCheckBox::execSetIsChecked);
	}
	IMPLEMENT_CLASS(UCheckBox, 1727348891);
	void UInvalidationBox::StaticRegisterNativesUInvalidationBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(UInvalidationBox::StaticClass(),"InvalidateCache",(Native)&UInvalidationBox::execInvalidateCache);
	}
	IMPLEMENT_CLASS(UInvalidationBox, 1216132336);
	void UMenuAnchor::StaticRegisterNativesUMenuAnchor()
	{
		FNativeFunctionRegistrar::RegisterFunction(UMenuAnchor::StaticClass(),"Close",(Native)&UMenuAnchor::execClose);
		FNativeFunctionRegistrar::RegisterFunction(UMenuAnchor::StaticClass(),"GetMenuPosition",(Native)&UMenuAnchor::execGetMenuPosition);
		FNativeFunctionRegistrar::RegisterFunction(UMenuAnchor::StaticClass(),"HasOpenSubMenus",(Native)&UMenuAnchor::execHasOpenSubMenus);
		FNativeFunctionRegistrar::RegisterFunction(UMenuAnchor::StaticClass(),"IsOpen",(Native)&UMenuAnchor::execIsOpen);
		FNativeFunctionRegistrar::RegisterFunction(UMenuAnchor::StaticClass(),"Open",(Native)&UMenuAnchor::execOpen);
		FNativeFunctionRegistrar::RegisterFunction(UMenuAnchor::StaticClass(),"ShouldOpenDueToClick",(Native)&UMenuAnchor::execShouldOpenDueToClick);
		FNativeFunctionRegistrar::RegisterFunction(UMenuAnchor::StaticClass(),"ToggleOpen",(Native)&UMenuAnchor::execToggleOpen);
	}
	IMPLEMENT_CLASS(UMenuAnchor, 2460505643);
	void UNamedSlot::StaticRegisterNativesUNamedSlot()
	{
	}
	IMPLEMENT_CLASS(UNamedSlot, 288953735);
	void USafeZone::StaticRegisterNativesUSafeZone()
	{
	}
	IMPLEMENT_CLASS(USafeZone, 527909582);
	void UScaleBox::StaticRegisterNativesUScaleBox()
	{
	}
	IMPLEMENT_CLASS(UScaleBox, 408187514);
	void USizeBox::StaticRegisterNativesUSizeBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"ClearHeightOverride",(Native)&USizeBox::execClearHeightOverride);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"ClearMaxDesiredHeight",(Native)&USizeBox::execClearMaxDesiredHeight);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"ClearMaxDesiredWidth",(Native)&USizeBox::execClearMaxDesiredWidth);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"ClearMinDesiredHeight",(Native)&USizeBox::execClearMinDesiredHeight);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"ClearMinDesiredWidth",(Native)&USizeBox::execClearMinDesiredWidth);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"ClearWidthOverride",(Native)&USizeBox::execClearWidthOverride);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"SetHeightOverride",(Native)&USizeBox::execSetHeightOverride);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"SetMaxDesiredHeight",(Native)&USizeBox::execSetMaxDesiredHeight);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"SetMaxDesiredWidth",(Native)&USizeBox::execSetMaxDesiredWidth);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"SetMinDesiredHeight",(Native)&USizeBox::execSetMinDesiredHeight);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"SetMinDesiredWidth",(Native)&USizeBox::execSetMinDesiredWidth);
		FNativeFunctionRegistrar::RegisterFunction(USizeBox::StaticClass(),"SetWidthOverride",(Native)&USizeBox::execSetWidthOverride);
	}
	IMPLEMENT_CLASS(USizeBox, 2665472332);
	void UViewport::StaticRegisterNativesUViewport()
	{
		FNativeFunctionRegistrar::RegisterFunction(UViewport::StaticClass(),"GetViewLocation",(Native)&UViewport::execGetViewLocation);
		FNativeFunctionRegistrar::RegisterFunction(UViewport::StaticClass(),"GetViewportWorld",(Native)&UViewport::execGetViewportWorld);
		FNativeFunctionRegistrar::RegisterFunction(UViewport::StaticClass(),"GetViewRotation",(Native)&UViewport::execGetViewRotation);
		FNativeFunctionRegistrar::RegisterFunction(UViewport::StaticClass(),"SetViewLocation",(Native)&UViewport::execSetViewLocation);
		FNativeFunctionRegistrar::RegisterFunction(UViewport::StaticClass(),"SetViewRotation",(Native)&UViewport::execSetViewRotation);
		FNativeFunctionRegistrar::RegisterFunction(UViewport::StaticClass(),"Spawn",(Native)&UViewport::execSpawn);
	}
	IMPLEMENT_CLASS(UViewport, 225851437);
	void UGridPanel::StaticRegisterNativesUGridPanel()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGridPanel::StaticClass(),"AddChildToGrid",(Native)&UGridPanel::execAddChildToGrid);
	}
	IMPLEMENT_CLASS(UGridPanel, 813407726);
	void UHorizontalBox::StaticRegisterNativesUHorizontalBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(UHorizontalBox::StaticClass(),"AddChildToHorizontalBox",(Native)&UHorizontalBox::execAddChildToHorizontalBox);
	}
	IMPLEMENT_CLASS(UHorizontalBox, 724131252);
	void UOverlay::StaticRegisterNativesUOverlay()
	{
		FNativeFunctionRegistrar::RegisterFunction(UOverlay::StaticClass(),"AddChildToOverlay",(Native)&UOverlay::execAddChildToOverlay);
	}
	IMPLEMENT_CLASS(UOverlay, 2477141618);
	void UScrollBox::StaticRegisterNativesUScrollBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(UScrollBox::StaticClass(),"GetScrollOffset",(Native)&UScrollBox::execGetScrollOffset);
		FNativeFunctionRegistrar::RegisterFunction(UScrollBox::StaticClass(),"ScrollToEnd",(Native)&UScrollBox::execScrollToEnd);
		FNativeFunctionRegistrar::RegisterFunction(UScrollBox::StaticClass(),"ScrollToStart",(Native)&UScrollBox::execScrollToStart);
		FNativeFunctionRegistrar::RegisterFunction(UScrollBox::StaticClass(),"ScrollWidgetIntoView",(Native)&UScrollBox::execScrollWidgetIntoView);
		FNativeFunctionRegistrar::RegisterFunction(UScrollBox::StaticClass(),"SetScrollOffset",(Native)&UScrollBox::execSetScrollOffset);
	}
	IMPLEMENT_CLASS(UScrollBox, 3635581453);
	void UUniformGridPanel::StaticRegisterNativesUUniformGridPanel()
	{
		FNativeFunctionRegistrar::RegisterFunction(UUniformGridPanel::StaticClass(),"AddChildToUniformGrid",(Native)&UUniformGridPanel::execAddChildToUniformGrid);
		FNativeFunctionRegistrar::RegisterFunction(UUniformGridPanel::StaticClass(),"SetMinDesiredSlotHeight",(Native)&UUniformGridPanel::execSetMinDesiredSlotHeight);
		FNativeFunctionRegistrar::RegisterFunction(UUniformGridPanel::StaticClass(),"SetMinDesiredSlotWidth",(Native)&UUniformGridPanel::execSetMinDesiredSlotWidth);
		FNativeFunctionRegistrar::RegisterFunction(UUniformGridPanel::StaticClass(),"SetSlotPadding",(Native)&UUniformGridPanel::execSetSlotPadding);
	}
	IMPLEMENT_CLASS(UUniformGridPanel, 3656450795);
	void UVerticalBox::StaticRegisterNativesUVerticalBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(UVerticalBox::StaticClass(),"AddChildToVerticalBox",(Native)&UVerticalBox::execAddChildToVerticalBox);
	}
	IMPLEMENT_CLASS(UVerticalBox, 4279938371);
	void UWidgetSwitcher::StaticRegisterNativesUWidgetSwitcher()
	{
		FNativeFunctionRegistrar::RegisterFunction(UWidgetSwitcher::StaticClass(),"GetActiveWidgetIndex",(Native)&UWidgetSwitcher::execGetActiveWidgetIndex);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetSwitcher::StaticClass(),"GetNumWidgets",(Native)&UWidgetSwitcher::execGetNumWidgets);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetSwitcher::StaticClass(),"GetWidgetAtIndex",(Native)&UWidgetSwitcher::execGetWidgetAtIndex);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetSwitcher::StaticClass(),"SetActiveWidget",(Native)&UWidgetSwitcher::execSetActiveWidget);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetSwitcher::StaticClass(),"SetActiveWidgetIndex",(Native)&UWidgetSwitcher::execSetActiveWidgetIndex);
	}
	IMPLEMENT_CLASS(UWidgetSwitcher, 854024827);
	void UWrapBox::StaticRegisterNativesUWrapBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(UWrapBox::StaticClass(),"AddChildWrapBox",(Native)&UWrapBox::execAddChildWrapBox);
		FNativeFunctionRegistrar::RegisterFunction(UWrapBox::StaticClass(),"SetInnerSlotPadding",(Native)&UWrapBox::execSetInnerSlotPadding);
	}
	IMPLEMENT_CLASS(UWrapBox, 2149010234);
	void UProgressBar::StaticRegisterNativesUProgressBar()
	{
		FNativeFunctionRegistrar::RegisterFunction(UProgressBar::StaticClass(),"SetFillColorAndOpacity",(Native)&UProgressBar::execSetFillColorAndOpacity);
		FNativeFunctionRegistrar::RegisterFunction(UProgressBar::StaticClass(),"SetIsMarquee",(Native)&UProgressBar::execSetIsMarquee);
		FNativeFunctionRegistrar::RegisterFunction(UProgressBar::StaticClass(),"SetPercent",(Native)&UProgressBar::execSetPercent);
	}
	IMPLEMENT_CLASS(UProgressBar, 1128896229);
	void URichTextBlock::StaticRegisterNativesURichTextBlock()
	{
	}
	IMPLEMENT_CLASS(URichTextBlock, 1270310850);
	void UScrollBar::StaticRegisterNativesUScrollBar()
	{
		FNativeFunctionRegistrar::RegisterFunction(UScrollBar::StaticClass(),"SetState",(Native)&UScrollBar::execSetState);
	}
	IMPLEMENT_CLASS(UScrollBar, 1929606618);
	void USlider::StaticRegisterNativesUSlider()
	{
		FNativeFunctionRegistrar::RegisterFunction(USlider::StaticClass(),"GetValue",(Native)&USlider::execGetValue);
		FNativeFunctionRegistrar::RegisterFunction(USlider::StaticClass(),"SetIndentHandle",(Native)&USlider::execSetIndentHandle);
		FNativeFunctionRegistrar::RegisterFunction(USlider::StaticClass(),"SetLocked",(Native)&USlider::execSetLocked);
		FNativeFunctionRegistrar::RegisterFunction(USlider::StaticClass(),"SetValue",(Native)&USlider::execSetValue);
	}
	IMPLEMENT_CLASS(USlider, 3950074211);
	void USpacer::StaticRegisterNativesUSpacer()
	{
		FNativeFunctionRegistrar::RegisterFunction(USpacer::StaticClass(),"SetSize",(Native)&USpacer::execSetSize);
	}
	IMPLEMENT_CLASS(USpacer, 3265966174);
	void USpinBox::StaticRegisterNativesUSpinBox()
	{
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"ClearMaxSliderValue",(Native)&USpinBox::execClearMaxSliderValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"ClearMaxValue",(Native)&USpinBox::execClearMaxValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"ClearMinSliderValue",(Native)&USpinBox::execClearMinSliderValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"ClearMinValue",(Native)&USpinBox::execClearMinValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"GetMaxSliderValue",(Native)&USpinBox::execGetMaxSliderValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"GetMaxValue",(Native)&USpinBox::execGetMaxValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"GetMinSliderValue",(Native)&USpinBox::execGetMinSliderValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"GetMinValue",(Native)&USpinBox::execGetMinValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"GetValue",(Native)&USpinBox::execGetValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"SetForegroundColor",(Native)&USpinBox::execSetForegroundColor);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"SetMaxSliderValue",(Native)&USpinBox::execSetMaxSliderValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"SetMaxValue",(Native)&USpinBox::execSetMaxValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"SetMinSliderValue",(Native)&USpinBox::execSetMinSliderValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"SetMinValue",(Native)&USpinBox::execSetMinValue);
		FNativeFunctionRegistrar::RegisterFunction(USpinBox::StaticClass(),"SetValue",(Native)&USpinBox::execSetValue);
	}
	IMPLEMENT_CLASS(USpinBox, 2434386195);
	void UTableViewBase::StaticRegisterNativesUTableViewBase()
	{
	}
	IMPLEMENT_CLASS(UTableViewBase, 957197962);
	void UListView::StaticRegisterNativesUListView()
	{
	}
	IMPLEMENT_CLASS(UListView, 1099071693);
	void UTileView::StaticRegisterNativesUTileView()
	{
		FNativeFunctionRegistrar::RegisterFunction(UTileView::StaticClass(),"RequestListRefresh",(Native)&UTileView::execRequestListRefresh);
		FNativeFunctionRegistrar::RegisterFunction(UTileView::StaticClass(),"SetItemHeight",(Native)&UTileView::execSetItemHeight);
		FNativeFunctionRegistrar::RegisterFunction(UTileView::StaticClass(),"SetItemWidth",(Native)&UTileView::execSetItemWidth);
	}
	IMPLEMENT_CLASS(UTileView, 1177594704);
	void UTextBlock::StaticRegisterNativesUTextBlock()
	{
		FNativeFunctionRegistrar::RegisterFunction(UTextBlock::StaticClass(),"GetText",(Native)&UTextBlock::execGetText);
		FNativeFunctionRegistrar::RegisterFunction(UTextBlock::StaticClass(),"SetColorAndOpacity",(Native)&UTextBlock::execSetColorAndOpacity);
		FNativeFunctionRegistrar::RegisterFunction(UTextBlock::StaticClass(),"SetFont",(Native)&UTextBlock::execSetFont);
		FNativeFunctionRegistrar::RegisterFunction(UTextBlock::StaticClass(),"SetJustification",(Native)&UTextBlock::execSetJustification);
		FNativeFunctionRegistrar::RegisterFunction(UTextBlock::StaticClass(),"SetOpacity",(Native)&UTextBlock::execSetOpacity);
		FNativeFunctionRegistrar::RegisterFunction(UTextBlock::StaticClass(),"SetShadowColorAndOpacity",(Native)&UTextBlock::execSetShadowColorAndOpacity);
		FNativeFunctionRegistrar::RegisterFunction(UTextBlock::StaticClass(),"SetShadowOffset",(Native)&UTextBlock::execSetShadowOffset);
		FNativeFunctionRegistrar::RegisterFunction(UTextBlock::StaticClass(),"SetText",(Native)&UTextBlock::execSetText);
	}
	IMPLEMENT_CLASS(UTextBlock, 3125199414);
	void UThrobber::StaticRegisterNativesUThrobber()
	{
		FNativeFunctionRegistrar::RegisterFunction(UThrobber::StaticClass(),"SetAnimateHorizontally",(Native)&UThrobber::execSetAnimateHorizontally);
		FNativeFunctionRegistrar::RegisterFunction(UThrobber::StaticClass(),"SetAnimateOpacity",(Native)&UThrobber::execSetAnimateOpacity);
		FNativeFunctionRegistrar::RegisterFunction(UThrobber::StaticClass(),"SetAnimateVertically",(Native)&UThrobber::execSetAnimateVertically);
		FNativeFunctionRegistrar::RegisterFunction(UThrobber::StaticClass(),"SetNumberOfPieces",(Native)&UThrobber::execSetNumberOfPieces);
	}
	IMPLEMENT_CLASS(UThrobber, 376123407);
static class UEnum* EDesignPreviewSizeMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UEnum* Z_Construct_UEnum_UMG_EDesignPreviewSizeMode();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticEnum(Z_Construct_UEnum_UMG_EDesignPreviewSizeMode, Z_Construct_UPackage_UMG(), TEXT("EDesignPreviewSizeMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EDesignPreviewSizeMode(EDesignPreviewSizeMode_StaticEnum, TEXT("/Script/UMG"));
static class UEnum* EUMGSequencePlayMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UEnum* Z_Construct_UEnum_UMG_EUMGSequencePlayMode();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticEnum(Z_Construct_UEnum_UMG_EUMGSequencePlayMode, Z_Construct_UPackage_UMG(), TEXT("EUMGSequencePlayMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EUMGSequencePlayMode(EUMGSequencePlayMode_StaticEnum, TEXT("/Script/UMG"));
class UScriptStruct* FNamedSlotBinding::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedSlotBinding();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FNamedSlotBinding_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FNamedSlotBinding, Z_Construct_UPackage_UMG(), TEXT("NamedSlotBinding"), sizeof(FNamedSlotBinding), Get_Z_Construct_UScriptStruct_FNamedSlotBinding_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FNamedSlotBinding(FNamedSlotBinding::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFNamedSlotBinding
{
	FScriptStruct_UMG_StaticRegisterNativesFNamedSlotBinding()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("NamedSlotBinding")),new UScriptStruct::TCppStructOps<FNamedSlotBinding>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFNamedSlotBinding;
class UScriptStruct* FPaintContext::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FPaintContext();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FPaintContext_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FPaintContext, Z_Construct_UPackage_UMG(), TEXT("PaintContext"), sizeof(FPaintContext), Get_Z_Construct_UScriptStruct_FPaintContext_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FPaintContext(FPaintContext::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFPaintContext
{
	FScriptStruct_UMG_StaticRegisterNativesFPaintContext()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("PaintContext")),new UScriptStruct::TCppStructOps<FPaintContext>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFPaintContext;
	void UUserWidget::Construct()
	{
		ProcessEvent(FindFunctionChecked(UMG_Construct),NULL);
	}
	void UUserWidget::Destruct()
	{
		ProcessEvent(FindFunctionChecked(UMG_Destruct),NULL);
	}
	bool UUserWidget::IsInteractable() const
	{
		UserWidget_eventIsInteractable_Parms Parms;
		const_cast<UUserWidget*>(this)->ProcessEvent(FindFunctionChecked(UMG_IsInteractable),&Parms);
		return !!Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnAnalogValueChanged(FGeometry MyGeometry, FAnalogInputEvent InAnalogInputEvent)
	{
		UserWidget_eventOnAnalogValueChanged_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InAnalogInputEvent=InAnalogInputEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnAnalogValueChanged),&Parms);
		return Parms.ReturnValue;
	}
	void UUserWidget::OnAnimationFinished(const UWidgetAnimation* Animation)
	{
		UserWidget_eventOnAnimationFinished_Parms Parms;
		Parms.Animation=Animation;
		ProcessEvent(FindFunctionChecked(UMG_OnAnimationFinished),&Parms);
	}
	void UUserWidget::OnAnimationStarted(const UWidgetAnimation* Animation)
	{
		UserWidget_eventOnAnimationStarted_Parms Parms;
		Parms.Animation=Animation;
		ProcessEvent(FindFunctionChecked(UMG_OnAnimationStarted),&Parms);
	}
	FEventReply UUserWidget::OnControllerAnalogValueChanged(FGeometry MyGeometry, FControllerEvent ControllerEvent)
	{
		UserWidget_eventOnControllerAnalogValueChanged_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.ControllerEvent=ControllerEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnControllerAnalogValueChanged),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnControllerButtonPressed(FGeometry MyGeometry, FControllerEvent ControllerEvent)
	{
		UserWidget_eventOnControllerButtonPressed_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.ControllerEvent=ControllerEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnControllerButtonPressed),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnControllerButtonReleased(FGeometry MyGeometry, FControllerEvent ControllerEvent)
	{
		UserWidget_eventOnControllerButtonReleased_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.ControllerEvent=ControllerEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnControllerButtonReleased),&Parms);
		return Parms.ReturnValue;
	}
	void UUserWidget::OnDragCancelled(const FPointerEvent& PointerEvent, UDragDropOperation* Operation)
	{
		UserWidget_eventOnDragCancelled_Parms Parms;
		Parms.PointerEvent=PointerEvent;
		Parms.Operation=Operation;
		ProcessEvent(FindFunctionChecked(UMG_OnDragCancelled),&Parms);
	}
	void UUserWidget::OnDragDetected(FGeometry MyGeometry, const FPointerEvent& PointerEvent, UDragDropOperation*& Operation)
	{
		UserWidget_eventOnDragDetected_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.PointerEvent=PointerEvent;
		Parms.Operation=Operation;
		ProcessEvent(FindFunctionChecked(UMG_OnDragDetected),&Parms);
		Operation=Parms.Operation;
	}
	void UUserWidget::OnDragEnter(FGeometry MyGeometry, FPointerEvent PointerEvent, UDragDropOperation* Operation)
	{
		UserWidget_eventOnDragEnter_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.PointerEvent=PointerEvent;
		Parms.Operation=Operation;
		ProcessEvent(FindFunctionChecked(UMG_OnDragEnter),&Parms);
	}
	void UUserWidget::OnDragLeave(FPointerEvent PointerEvent, UDragDropOperation* Operation)
	{
		UserWidget_eventOnDragLeave_Parms Parms;
		Parms.PointerEvent=PointerEvent;
		Parms.Operation=Operation;
		ProcessEvent(FindFunctionChecked(UMG_OnDragLeave),&Parms);
	}
	bool UUserWidget::OnDragOver(FGeometry MyGeometry, FPointerEvent PointerEvent, UDragDropOperation* Operation)
	{
		UserWidget_eventOnDragOver_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.PointerEvent=PointerEvent;
		Parms.Operation=Operation;
		ProcessEvent(FindFunctionChecked(UMG_OnDragOver),&Parms);
		return !!Parms.ReturnValue;
	}
	bool UUserWidget::OnDrop(FGeometry MyGeometry, FPointerEvent PointerEvent, UDragDropOperation* Operation)
	{
		UserWidget_eventOnDrop_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.PointerEvent=PointerEvent;
		Parms.Operation=Operation;
		ProcessEvent(FindFunctionChecked(UMG_OnDrop),&Parms);
		return !!Parms.ReturnValue;
	}
	void UUserWidget::OnFocusLost(FFocusEvent InFocusEvent)
	{
		UserWidget_eventOnFocusLost_Parms Parms;
		Parms.InFocusEvent=InFocusEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnFocusLost),&Parms);
	}
	FEventReply UUserWidget::OnFocusReceived(FGeometry MyGeometry, FFocusEvent InFocusEvent)
	{
		UserWidget_eventOnFocusReceived_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InFocusEvent=InFocusEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnFocusReceived),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnKeyChar(FGeometry MyGeometry, FCharacterEvent InCharacterEvent)
	{
		UserWidget_eventOnKeyChar_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InCharacterEvent=InCharacterEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnKeyChar),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent)
	{
		UserWidget_eventOnKeyDown_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InKeyEvent=InKeyEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnKeyDown),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnKeyUp(FGeometry MyGeometry, FKeyEvent InKeyEvent)
	{
		UserWidget_eventOnKeyUp_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InKeyEvent=InKeyEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnKeyUp),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnMotionDetected(FGeometry MyGeometry, FMotionEvent InMotionEvent)
	{
		UserWidget_eventOnMotionDetected_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InMotionEvent=InMotionEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnMotionDetected),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnMouseButtonDoubleClick(FGeometry InMyGeometry, const FPointerEvent& InMouseEvent)
	{
		UserWidget_eventOnMouseButtonDoubleClick_Parms Parms;
		Parms.InMyGeometry=InMyGeometry;
		Parms.InMouseEvent=InMouseEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnMouseButtonDoubleClick),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnMouseButtonDown(FGeometry MyGeometry, const FPointerEvent& MouseEvent)
	{
		UserWidget_eventOnMouseButtonDown_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.MouseEvent=MouseEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnMouseButtonDown),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnMouseButtonUp(FGeometry MyGeometry, const FPointerEvent& MouseEvent)
	{
		UserWidget_eventOnMouseButtonUp_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.MouseEvent=MouseEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnMouseButtonUp),&Parms);
		return Parms.ReturnValue;
	}
	void UUserWidget::OnMouseEnter(FGeometry MyGeometry, const FPointerEvent& MouseEvent)
	{
		UserWidget_eventOnMouseEnter_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.MouseEvent=MouseEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnMouseEnter),&Parms);
	}
	void UUserWidget::OnMouseLeave(const FPointerEvent& MouseEvent)
	{
		UserWidget_eventOnMouseLeave_Parms Parms;
		Parms.MouseEvent=MouseEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnMouseLeave),&Parms);
	}
	FEventReply UUserWidget::OnMouseMove(FGeometry MyGeometry, const FPointerEvent& MouseEvent)
	{
		UserWidget_eventOnMouseMove_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.MouseEvent=MouseEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnMouseMove),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnMouseWheel(FGeometry MyGeometry, const FPointerEvent& MouseEvent)
	{
		UserWidget_eventOnMouseWheel_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.MouseEvent=MouseEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnMouseWheel),&Parms);
		return Parms.ReturnValue;
	}
	void UUserWidget::OnPaint(FPaintContext& Context) const
	{
		UserWidget_eventOnPaint_Parms Parms;
		Parms.Context=Context;
		const_cast<UUserWidget*>(this)->ProcessEvent(FindFunctionChecked(UMG_OnPaint),&Parms);
		Context=Parms.Context;
	}
	FEventReply UUserWidget::OnPreviewKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent)
	{
		UserWidget_eventOnPreviewKeyDown_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InKeyEvent=InKeyEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnPreviewKeyDown),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnPreviewMouseButtonDown(FGeometry MyGeometry, const FPointerEvent& MouseEvent)
	{
		UserWidget_eventOnPreviewMouseButtonDown_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.MouseEvent=MouseEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnPreviewMouseButtonDown),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnTouchEnded(FGeometry MyGeometry, const FPointerEvent& InTouchEvent)
	{
		UserWidget_eventOnTouchEnded_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InTouchEvent=InTouchEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnTouchEnded),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnTouchGesture(FGeometry MyGeometry, const FPointerEvent& GestureEvent)
	{
		UserWidget_eventOnTouchGesture_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.GestureEvent=GestureEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnTouchGesture),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnTouchMoved(FGeometry MyGeometry, const FPointerEvent& InTouchEvent)
	{
		UserWidget_eventOnTouchMoved_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InTouchEvent=InTouchEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnTouchMoved),&Parms);
		return Parms.ReturnValue;
	}
	FEventReply UUserWidget::OnTouchStarted(FGeometry MyGeometry, const FPointerEvent& InTouchEvent)
	{
		UserWidget_eventOnTouchStarted_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InTouchEvent=InTouchEvent;
		ProcessEvent(FindFunctionChecked(UMG_OnTouchStarted),&Parms);
		return Parms.ReturnValue;
	}
	void UUserWidget::Tick(FGeometry MyGeometry, float InDeltaTime)
	{
		UserWidget_eventTick_Parms Parms;
		Parms.MyGeometry=MyGeometry;
		Parms.InDeltaTime=InDeltaTime;
		ProcessEvent(FindFunctionChecked(UMG_Tick),&Parms);
	}
	void UUserWidget::StaticRegisterNativesUUserWidget()
	{
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"AddToPlayerScreen",(Native)&UUserWidget::execAddToPlayerScreen);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"AddToViewport",(Native)&UUserWidget::execAddToViewport);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"GetIsVisible",(Native)&UUserWidget::execGetIsVisible);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"GetOwningLocalPlayer",(Native)&UUserWidget::execGetOwningLocalPlayer);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"GetOwningPlayer",(Native)&UUserWidget::execGetOwningPlayer);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"GetOwningPlayerPawn",(Native)&UUserWidget::execGetOwningPlayerPawn);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"IsInViewport",(Native)&UUserWidget::execIsInViewport);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"OnAnimationFinished",(Native)&UUserWidget::execOnAnimationFinished);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"OnAnimationStarted",(Native)&UUserWidget::execOnAnimationStarted);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"PauseAnimation",(Native)&UUserWidget::execPauseAnimation);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"PlayAnimation",(Native)&UUserWidget::execPlayAnimation);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"PlaySound",(Native)&UUserWidget::execPlaySound);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"RemoveFromViewport",(Native)&UUserWidget::execRemoveFromViewport);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"SetAlignmentInViewport",(Native)&UUserWidget::execSetAlignmentInViewport);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"SetAnchorsInViewport",(Native)&UUserWidget::execSetAnchorsInViewport);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"SetColorAndOpacity",(Native)&UUserWidget::execSetColorAndOpacity);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"SetDesiredSizeInViewport",(Native)&UUserWidget::execSetDesiredSizeInViewport);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"SetForegroundColor",(Native)&UUserWidget::execSetForegroundColor);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"SetOwningLocalPlayer",(Native)&UUserWidget::execSetOwningLocalPlayer);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"SetPositionInViewport",(Native)&UUserWidget::execSetPositionInViewport);
		FNativeFunctionRegistrar::RegisterFunction(UUserWidget::StaticClass(),"StopAnimation",(Native)&UUserWidget::execStopAnimation);
	}
	IMPLEMENT_CLASS(UUserWidget, 778180233);
class UScriptStruct* FWidgetAnimationBinding::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FWidgetAnimationBinding();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FWidgetAnimationBinding_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FWidgetAnimationBinding, Z_Construct_UPackage_UMG(), TEXT("WidgetAnimationBinding"), sizeof(FWidgetAnimationBinding), Get_Z_Construct_UScriptStruct_FWidgetAnimationBinding_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FWidgetAnimationBinding(FWidgetAnimationBinding::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFWidgetAnimationBinding
{
	FScriptStruct_UMG_StaticRegisterNativesFWidgetAnimationBinding()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("WidgetAnimationBinding")),new UScriptStruct::TCppStructOps<FWidgetAnimationBinding>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFWidgetAnimationBinding;
	void UWidgetAnimation::StaticRegisterNativesUWidgetAnimation()
	{
		FNativeFunctionRegistrar::RegisterFunction(UWidgetAnimation::StaticClass(),"GetEndTime",(Native)&UWidgetAnimation::execGetEndTime);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetAnimation::StaticClass(),"GetStartTime",(Native)&UWidgetAnimation::execGetStartTime);
	}
	IMPLEMENT_CLASS(UWidgetAnimation, 1782954209);
static class UEnum* EBindingKind_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UEnum* Z_Construct_UEnum_UMG_EBindingKind();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticEnum(Z_Construct_UEnum_UMG_EBindingKind, Z_Construct_UPackage_UMG(), TEXT("EBindingKind"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EBindingKind(EBindingKind_StaticEnum, TEXT("/Script/UMG"));
class UScriptStruct* FDelegateRuntimeBinding::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FDelegateRuntimeBinding();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FDelegateRuntimeBinding_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDelegateRuntimeBinding, Z_Construct_UPackage_UMG(), TEXT("DelegateRuntimeBinding"), sizeof(FDelegateRuntimeBinding), Get_Z_Construct_UScriptStruct_FDelegateRuntimeBinding_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDelegateRuntimeBinding(FDelegateRuntimeBinding::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFDelegateRuntimeBinding
{
	FScriptStruct_UMG_StaticRegisterNativesFDelegateRuntimeBinding()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DelegateRuntimeBinding")),new UScriptStruct::TCppStructOps<FDelegateRuntimeBinding>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFDelegateRuntimeBinding;
	void UWidgetBlueprintGeneratedClass::StaticRegisterNativesUWidgetBlueprintGeneratedClass()
	{
	}
	IMPLEMENT_CLASS(UWidgetBlueprintGeneratedClass, 3758827821);
	void UWidgetBlueprintLibrary::StaticRegisterNativesUWidgetBlueprintLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"CancelDragDrop",(Native)&UWidgetBlueprintLibrary::execCancelDragDrop);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"CaptureJoystick",(Native)&UWidgetBlueprintLibrary::execCaptureJoystick);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"CaptureMouse",(Native)&UWidgetBlueprintLibrary::execCaptureMouse);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"ClearUserFocus",(Native)&UWidgetBlueprintLibrary::execClearUserFocus);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"Create",(Native)&UWidgetBlueprintLibrary::execCreate);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"CreateDragDropOperation",(Native)&UWidgetBlueprintLibrary::execCreateDragDropOperation);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"DetectDrag",(Native)&UWidgetBlueprintLibrary::execDetectDrag);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"DetectDragIfPressed",(Native)&UWidgetBlueprintLibrary::execDetectDragIfPressed);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"DismissAllMenus",(Native)&UWidgetBlueprintLibrary::execDismissAllMenus);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"DrawBox",(Native)&UWidgetBlueprintLibrary::execDrawBox);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"DrawLine",(Native)&UWidgetBlueprintLibrary::execDrawLine);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"DrawLines",(Native)&UWidgetBlueprintLibrary::execDrawLines);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"DrawText",(Native)&UWidgetBlueprintLibrary::execDrawText);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"DrawTextFormatted",(Native)&UWidgetBlueprintLibrary::execDrawTextFormatted);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"EndDragDrop",(Native)&UWidgetBlueprintLibrary::execEndDragDrop);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetAllWidgetsOfClass",(Native)&UWidgetBlueprintLibrary::execGetAllWidgetsOfClass);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetAllWidgetsWithInterface",(Native)&UWidgetBlueprintLibrary::execGetAllWidgetsWithInterface);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetBrushResource",(Native)&UWidgetBlueprintLibrary::execGetBrushResource);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetBrushResourceAsMaterial",(Native)&UWidgetBlueprintLibrary::execGetBrushResourceAsMaterial);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetBrushResourceAsTexture2D",(Native)&UWidgetBlueprintLibrary::execGetBrushResourceAsTexture2D);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetDragDroppingContent",(Native)&UWidgetBlueprintLibrary::execGetDragDroppingContent);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetDynamicMaterial",(Native)&UWidgetBlueprintLibrary::execGetDynamicMaterial);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetInputEventFromCharacterEvent",(Native)&UWidgetBlueprintLibrary::execGetInputEventFromCharacterEvent);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetInputEventFromControllerEvent",(Native)&UWidgetBlueprintLibrary::execGetInputEventFromControllerEvent);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetInputEventFromKeyEvent",(Native)&UWidgetBlueprintLibrary::execGetInputEventFromKeyEvent);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetInputEventFromNavigationEvent",(Native)&UWidgetBlueprintLibrary::execGetInputEventFromNavigationEvent);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetInputEventFromPointerEvent",(Native)&UWidgetBlueprintLibrary::execGetInputEventFromPointerEvent);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"GetKeyEventFromAnalogInputEvent",(Native)&UWidgetBlueprintLibrary::execGetKeyEventFromAnalogInputEvent);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"Handled",(Native)&UWidgetBlueprintLibrary::execHandled);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"IsDragDropping",(Native)&UWidgetBlueprintLibrary::execIsDragDropping);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"LockMouse",(Native)&UWidgetBlueprintLibrary::execLockMouse);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"MakeBrushFromAsset",(Native)&UWidgetBlueprintLibrary::execMakeBrushFromAsset);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"MakeBrushFromMaterial",(Native)&UWidgetBlueprintLibrary::execMakeBrushFromMaterial);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"MakeBrushFromTexture",(Native)&UWidgetBlueprintLibrary::execMakeBrushFromTexture);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"NoResourceBrush",(Native)&UWidgetBlueprintLibrary::execNoResourceBrush);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"ReleaseJoystickCapture",(Native)&UWidgetBlueprintLibrary::execReleaseJoystickCapture);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"ReleaseMouseCapture",(Native)&UWidgetBlueprintLibrary::execReleaseMouseCapture);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"SetBrushResourceToMaterial",(Native)&UWidgetBlueprintLibrary::execSetBrushResourceToMaterial);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"SetBrushResourceToTexture",(Native)&UWidgetBlueprintLibrary::execSetBrushResourceToTexture);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"SetFocusToGameViewport",(Native)&UWidgetBlueprintLibrary::execSetFocusToGameViewport);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"SetInputMode_GameAndUI",(Native)&UWidgetBlueprintLibrary::execSetInputMode_GameAndUI);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"SetInputMode_GameOnly",(Native)&UWidgetBlueprintLibrary::execSetInputMode_GameOnly);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"SetInputMode_UIOnly",(Native)&UWidgetBlueprintLibrary::execSetInputMode_UIOnly);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"SetMousePosition",(Native)&UWidgetBlueprintLibrary::execSetMousePosition);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"SetUserFocus",(Native)&UWidgetBlueprintLibrary::execSetUserFocus);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"Unhandled",(Native)&UWidgetBlueprintLibrary::execUnhandled);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetBlueprintLibrary::StaticClass(),"UnlockMouse",(Native)&UWidgetBlueprintLibrary::execUnlockMouse);
	}
	IMPLEMENT_CLASS(UWidgetBlueprintLibrary, 2465962611);
static class UEnum* EWidgetBlendMode_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetBlendMode();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticEnum(Z_Construct_UEnum_UMG_EWidgetBlendMode, Z_Construct_UPackage_UMG(), TEXT("EWidgetBlendMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EWidgetBlendMode(EWidgetBlendMode_StaticEnum, TEXT("/Script/UMG"));
static class UEnum* EWidgetSpace_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetSpace();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticEnum(Z_Construct_UEnum_UMG_EWidgetSpace, Z_Construct_UPackage_UMG(), TEXT("EWidgetSpace"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EWidgetSpace(EWidgetSpace_StaticEnum, TEXT("/Script/UMG"));
	void UWidgetComponent::StaticRegisterNativesUWidgetComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UWidgetComponent::StaticClass(),"GetDrawSize",(Native)&UWidgetComponent::execGetDrawSize);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetComponent::StaticClass(),"GetMaxInteractionDistance",(Native)&UWidgetComponent::execGetMaxInteractionDistance);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetComponent::StaticClass(),"GetOwnerPlayer",(Native)&UWidgetComponent::execGetOwnerPlayer);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetComponent::StaticClass(),"GetUserWidgetObject",(Native)&UWidgetComponent::execGetUserWidgetObject);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetComponent::StaticClass(),"SetDrawSize",(Native)&UWidgetComponent::execSetDrawSize);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetComponent::StaticClass(),"SetMaxInteractionDistance",(Native)&UWidgetComponent::execSetMaxInteractionDistance);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetComponent::StaticClass(),"SetOwnerPlayer",(Native)&UWidgetComponent::execSetOwnerPlayer);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetComponent::StaticClass(),"SetWidget",(Native)&UWidgetComponent::execSetWidget);
	}
	IMPLEMENT_CLASS(UWidgetComponent, 219816410);
	void UWidgetLayoutLibrary::StaticRegisterNativesUWidgetLayoutLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"GetMousePositionScaledByDPI",(Native)&UWidgetLayoutLibrary::execGetMousePositionScaledByDPI);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"GetViewportScale",(Native)&UWidgetLayoutLibrary::execGetViewportScale);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"GetViewportSize",(Native)&UWidgetLayoutLibrary::execGetViewportSize);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"ProjectWorldLocationToWidgetPosition",(Native)&UWidgetLayoutLibrary::execProjectWorldLocationToWidgetPosition);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"RemoveAllWidgets",(Native)&UWidgetLayoutLibrary::execRemoveAllWidgets);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"SlotAsCanvasSlot",(Native)&UWidgetLayoutLibrary::execSlotAsCanvasSlot);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"SlotAsGridSlot",(Native)&UWidgetLayoutLibrary::execSlotAsGridSlot);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"SlotAsHorizontalBoxSlot",(Native)&UWidgetLayoutLibrary::execSlotAsHorizontalBoxSlot);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"SlotAsOverlaySlot",(Native)&UWidgetLayoutLibrary::execSlotAsOverlaySlot);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"SlotAsUniformGridSlot",(Native)&UWidgetLayoutLibrary::execSlotAsUniformGridSlot);
		FNativeFunctionRegistrar::RegisterFunction(UWidgetLayoutLibrary::StaticClass(),"SlotAsVerticalBoxSlot",(Native)&UWidgetLayoutLibrary::execSlotAsVerticalBoxSlot);
	}
	IMPLEMENT_CLASS(UWidgetLayoutLibrary, 2407773000);
class UScriptStruct* FWidgetNavigationData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FWidgetNavigationData();
		extern UMG_API uint32 Get_Z_Construct_UScriptStruct_FWidgetNavigationData_CRC();
		extern UMG_API class UPackage* Z_Construct_UPackage_UMG();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FWidgetNavigationData, Z_Construct_UPackage_UMG(), TEXT("WidgetNavigationData"), sizeof(FWidgetNavigationData), Get_Z_Construct_UScriptStruct_FWidgetNavigationData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FWidgetNavigationData(FWidgetNavigationData::StaticStruct, TEXT("/Script/UMG"));
static struct FScriptStruct_UMG_StaticRegisterNativesFWidgetNavigationData
{
	FScriptStruct_UMG_StaticRegisterNativesFWidgetNavigationData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("WidgetNavigationData")),new UScriptStruct::TCppStructOps<FWidgetNavigationData>);
	}
} ScriptStruct_UMG_StaticRegisterNativesFWidgetNavigationData;
	void UWidgetNavigation::StaticRegisterNativesUWidgetNavigation()
	{
	}
	IMPLEMENT_CLASS(UWidgetNavigation, 1462470177);
	void UWidgetTree::StaticRegisterNativesUWidgetTree()
	{
	}
	IMPLEMENT_CLASS(UWidgetTree, 3083099704);
FName UMG_Construct = FName(TEXT("Construct"));
FName UMG_Destruct = FName(TEXT("Destruct"));
FName UMG_DragCancelled = FName(TEXT("DragCancelled"));
FName UMG_Dragged = FName(TEXT("Dragged"));
FName UMG_Drop = FName(TEXT("Drop"));
FName UMG_IsInteractable = FName(TEXT("IsInteractable"));
FName UMG_OnAnalogValueChanged = FName(TEXT("OnAnalogValueChanged"));
FName UMG_OnAnimationFinished = FName(TEXT("OnAnimationFinished"));
FName UMG_OnAnimationStarted = FName(TEXT("OnAnimationStarted"));
FName UMG_OnControllerAnalogValueChanged = FName(TEXT("OnControllerAnalogValueChanged"));
FName UMG_OnControllerButtonPressed = FName(TEXT("OnControllerButtonPressed"));
FName UMG_OnControllerButtonReleased = FName(TEXT("OnControllerButtonReleased"));
FName UMG_OnDragCancelled = FName(TEXT("OnDragCancelled"));
FName UMG_OnDragDetected = FName(TEXT("OnDragDetected"));
FName UMG_OnDragEnter = FName(TEXT("OnDragEnter"));
FName UMG_OnDragLeave = FName(TEXT("OnDragLeave"));
FName UMG_OnDragOver = FName(TEXT("OnDragOver"));
FName UMG_OnDrop = FName(TEXT("OnDrop"));
FName UMG_OnFocusLost = FName(TEXT("OnFocusLost"));
FName UMG_OnFocusReceived = FName(TEXT("OnFocusReceived"));
FName UMG_OnKeyChar = FName(TEXT("OnKeyChar"));
FName UMG_OnKeyDown = FName(TEXT("OnKeyDown"));
FName UMG_OnKeyUp = FName(TEXT("OnKeyUp"));
FName UMG_OnMotionDetected = FName(TEXT("OnMotionDetected"));
FName UMG_OnMouseButtonDoubleClick = FName(TEXT("OnMouseButtonDoubleClick"));
FName UMG_OnMouseButtonDown = FName(TEXT("OnMouseButtonDown"));
FName UMG_OnMouseButtonUp = FName(TEXT("OnMouseButtonUp"));
FName UMG_OnMouseEnter = FName(TEXT("OnMouseEnter"));
FName UMG_OnMouseLeave = FName(TEXT("OnMouseLeave"));
FName UMG_OnMouseMove = FName(TEXT("OnMouseMove"));
FName UMG_OnMouseWheel = FName(TEXT("OnMouseWheel"));
FName UMG_OnPaint = FName(TEXT("OnPaint"));
FName UMG_OnPreviewKeyDown = FName(TEXT("OnPreviewKeyDown"));
FName UMG_OnPreviewMouseButtonDown = FName(TEXT("OnPreviewMouseButtonDown"));
FName UMG_OnTouchEnded = FName(TEXT("OnTouchEnded"));
FName UMG_OnTouchGesture = FName(TEXT("OnTouchGesture"));
FName UMG_OnTouchMoved = FName(TEXT("OnTouchMoved"));
FName UMG_OnTouchStarted = FName(TEXT("OnTouchStarted"));
FName UMG_Tick = FName(TEXT("Tick"));
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintAsyncActionBase();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointerEvent();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneSection();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRichCurve();
	MOVIESCENETRACKS_API class UClass* Z_Construct_UClass_UMovieScenePropertyTrack();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateBrush();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ECheckBoxState();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateColor();
	COREUOBJECT_API class UEnum* Z_Construct_UEnum_CoreUObject_EMouseCursor();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FGeometry();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EHorizontalAlignment();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FMargin();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EVerticalAlignment();
	SLATE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnchors();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USlateBrushAsset_NoRegister();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ESelectInfo();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FComboBoxStyle();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_ETextCommit();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateFontInfo();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextBoxStyle();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_ETextJustify();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FTextBlockStyle();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonTouchMethod();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EButtonClickMethod();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FButtonStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCheckBoxStyle();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EMenuPlacement();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_EStretch();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_EStretchDirection();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_UWorld_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EConsumeMouseWheel();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EOrientation();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBarStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FScrollBoxStyle();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_EProgressBarFillType();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FProgressBarStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSliderStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSpinBoxStyle();
	SLATE_API class UEnum* Z_Construct_UEnum_Slate_ESelectionMode();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APawn_NoRegister();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FAnalogInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FControllerEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FFocusEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCharacterEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FMotionEvent();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FGuid();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieSceneSequence();
	MOVIESCENE_API class UClass* Z_Construct_UClass_UMovieScene_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintGeneratedClass();
	INPUTCORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKey();
	ENGINE_API class UClass* Z_Construct_UClass_UFont_NoRegister();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FInputEvent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FNavigationEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FIntPoint();
	SLATECORE_API class UEnum* Z_Construct_UEnum_SlateCore_EUINavigationRule();

	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_DownloadImageDelegate__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UAsyncTaskDownloadImage_DownloadImage();
	UMG_API class UClass* Z_Construct_UClass_UAsyncTaskDownloadImage_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UAsyncTaskDownloadImage();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnDragDropMulticast__DelegateSignature();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EDragPivot();
	UMG_API class UFunction* Z_Construct_UFunction_UDragDropOperation_DragCancelled();
	UMG_API class UFunction* Z_Construct_UFunction_UDragDropOperation_Dragged();
	UMG_API class UFunction* Z_Construct_UFunction_UDragDropOperation_Drop();
	UMG_API class UClass* Z_Construct_UClass_UDragDropOperation_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UDragDropOperation();
	UMG_API class UClass* Z_Construct_UClass_UMovieScene2DTransformSection_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMovieScene2DTransformSection();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FWidgetTransform();
	UMG_API class UClass* Z_Construct_UClass_UMovieScene2DTransformTrack_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMovieScene2DTransformTrack();
	UMG_API class UClass* Z_Construct_UClass_UMovieSceneMarginSection_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMovieSceneMarginSection();
	UMG_API class UClass* Z_Construct_UClass_UMovieSceneMarginTrack_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMovieSceneMarginTrack();
	UMG_API class UClass* Z_Construct_UClass_UNamedSlotInterface_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UNamedSlotInterface();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FDynamicPropertyPath();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FPropertyPathSegment();
	UMG_API class UClass* Z_Construct_UClass_UPropertyBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UPropertyBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UBoolBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UBoolBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UBoolBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UBrushBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UBrushBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UBrushBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckedStateBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UCheckedStateBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UCheckedStateBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UColorBinding_GetLinearValue();
	UMG_API class UFunction* Z_Construct_UFunction_UColorBinding_GetSlateValue();
	UMG_API class UClass* Z_Construct_UClass_UColorBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UColorBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UFloatBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UFloatBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UFloatBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UInt32Binding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UInt32Binding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UInt32Binding();
	UMG_API class UFunction* Z_Construct_UFunction_UMouseCursorBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UMouseCursorBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMouseCursorBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBinding_GetStringValue();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBinding_GetTextValue();
	UMG_API class UClass* Z_Construct_UClass_UTextBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UTextBinding();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_ESlateSizeRule();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_ESlateVisibility();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateChildSize();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FEventReply();
	UMG_API class UFunction* Z_Construct_UFunction_UVisibilityBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UVisibilityBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UVisibilityBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBinding_GetValue();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBinding_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBinding();
	UMG_API class UClass* Z_Construct_UClass_URichTextBlockDecorator_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_URichTextBlockDecorator();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_AbsoluteToLocal();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_AbsoluteToViewport();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_GetLocalSize();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_IsUnderLocation();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_LocalToAbsolute();
	UMG_API class UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_LocalToViewport();
	UMG_API class UClass* Z_Construct_UClass_USlateBlueprintLibrary_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USlateBlueprintLibrary();
	UMG_API class UClass* Z_Construct_UClass_UUMGSequencePlayer_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UUMGSequencePlayer();
	UMG_API class UClass* Z_Construct_UClass_UVisual_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UVisual();
	UMG_API class UClass* Z_Construct_UClass_UPanelSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UPanelSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UBorderSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UBorderSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UBorderSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UBorderSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UBorderSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UButtonSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UButtonSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UButtonSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UButtonSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UButtonSlot();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FAnchorData();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAnchors();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAutoSize();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetLayout();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetOffsets();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetPosition();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetSize();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetZOrder();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAnchors();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAutoSize();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetLayout();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetMaximum();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetMinimum();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetOffsets();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetPosition();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetSize();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetZOrder();
	UMG_API class UClass* Z_Construct_UClass_UCanvasPanelSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UCanvasPanelSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetColumn();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetColumnSpan();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetRow();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetRowSpan();
	UMG_API class UFunction* Z_Construct_UFunction_UGridSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UGridSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UGridSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetSize();
	UMG_API class UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UHorizontalBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UHorizontalBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UOverlaySlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UOverlaySlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UOverlaySlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UOverlaySlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UOverlaySlot();
	UMG_API class UClass* Z_Construct_UClass_USafeZoneSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USafeZoneSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UScaleBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UScaleBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBoxSlot_SetPadding();
	UMG_API class UClass* Z_Construct_UClass_UScrollBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UScrollBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBoxSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBoxSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_USizeBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USizeBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridSlot_SetColumn();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridSlot_SetRow();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UUniformGridSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UUniformGridSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetSize();
	UMG_API class UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UVerticalBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UVerticalBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UWidgetSwitcherSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetSwitcherSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetFillEmptySpace();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetFillSpanWhenLessThan();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UWrapBoxSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWrapBoxSlot();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_OnReply__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForObject__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForString__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetWidget__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetCheckBoxState__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetMouseCursor__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetSlateVisibility__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetSlateColor__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetInt32__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UWidget_GetBool__DelegateSignature();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetDesignFlags();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_ForceLayoutPrepass();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_ForceVolatile();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_GetDesiredSize();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_GetIsEnabled();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_GetParent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_GetVisibility();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasAnyUserFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasFocusedDescendants();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasKeyboardFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasMouseCapture();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasUserFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_HasUserFocusedDescendants();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_InvalidateLayoutAndVolatility();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_IsHovered();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_IsVisible();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_RemoveFromParent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_ResetCursor();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetCursor();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetIsEnabled();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetKeyboardFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderAngle();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderScale();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderShear();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderTransform();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderTransformPivot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetRenderTranslation();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetToolTip();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetToolTipText();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetUserFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidget_SetVisibility();
	UMG_API class UClass* Z_Construct_UClass_UWidget_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidget();
	UMG_API class UFunction* Z_Construct_UFunction_UCircularThrobber_SetNumberOfPieces();
	UMG_API class UFunction* Z_Construct_UFunction_UCircularThrobber_SetPeriod();
	UMG_API class UFunction* Z_Construct_UFunction_UCircularThrobber_SetRadius();
	UMG_API class UClass* Z_Construct_UClass_UCircularThrobber_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UCircularThrobber();
	UMG_API class UClass* Z_Construct_UClass_UComboBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UComboBox();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_AddOption();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_ClearOptions();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_ClearSelection();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_FindOptionIndex();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_GetOptionAtIndex();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_GetOptionCount();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_GetSelectedOption();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_RefreshOptions();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_RemoveOption();
	UMG_API class UFunction* Z_Construct_UFunction_UComboBoxString_SetSelectedOption();
	UMG_API class UClass* Z_Construct_UClass_UComboBoxString_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UComboBoxString();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableText_GetText();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableText_SetHintText();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableText_SetIsPassword();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableText_SetIsReadOnly();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableText_SetText();
	UMG_API class UClass* Z_Construct_UClass_UEditableText_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UEditableText();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableTextBox_ClearError();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableTextBox_GetText();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableTextBox_SetError();
	UMG_API class UFunction* Z_Construct_UFunction_UEditableTextBox_SetText();
	UMG_API class UClass* Z_Construct_UClass_UEditableTextBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UEditableTextBox();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnExpandableAreaExpansionChanged__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UExpandableArea_GetIsExpanded();
	UMG_API class UFunction* Z_Construct_UFunction_UExpandableArea_SetIsExpanded();
	UMG_API class UClass* Z_Construct_UClass_UExpandableArea_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UExpandableArea();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_GetDynamicMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetBrush();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetBrushFromAsset();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetBrushFromMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetBrushFromTexture();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UImage_SetOpacity();
	UMG_API class UClass* Z_Construct_UClass_UImage_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UImage();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UMultiLineEditableText_GetText();
	UMG_API class UFunction* Z_Construct_UFunction_UMultiLineEditableText_SetText();
	UMG_API class UClass* Z_Construct_UClass_UMultiLineEditableText_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMultiLineEditableText();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_GetText();
	UMG_API class UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_SetError();
	UMG_API class UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_SetText();
	UMG_API class UClass* Z_Construct_UClass_UMultiLineEditableTextBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMultiLineEditableTextBox();
	UMG_API class UClass* Z_Construct_UClass_UNativeWidgetHost_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UNativeWidgetHost();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_AddChild();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_ClearChildren();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_GetChildAt();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_GetChildIndex();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_GetChildrenCount();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_HasAnyChildren();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_HasChild();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_RemoveChild();
	UMG_API class UFunction* Z_Construct_UFunction_UPanelWidget_RemoveChildAt();
	UMG_API class UClass* Z_Construct_UClass_UPanelWidget_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UPanelWidget();
	UMG_API class UFunction* Z_Construct_UFunction_UCanvasPanel_AddChildToCanvas();
	UMG_API class UClass* Z_Construct_UClass_UCanvasPanel_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UCanvasPanel();
	UMG_API class UFunction* Z_Construct_UFunction_UContentWidget_GetContentSlot();
	UMG_API class UClass* Z_Construct_UClass_UContentWidget_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UContentWidget();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_GetDynamicMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetBrush();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetBrushColor();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetBrushFromAsset();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetBrushFromMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetBrushFromTexture();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetContentColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetHorizontalAlignment();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetPadding();
	UMG_API class UFunction* Z_Construct_UFunction_UBorder_SetVerticalAlignment();
	UMG_API class UClass* Z_Construct_UClass_UBorder_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UBorder();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonReleasedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonPressedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonClickedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UButton_IsPressed();
	UMG_API class UFunction* Z_Construct_UFunction_UButton_SetBackgroundColor();
	UMG_API class UFunction* Z_Construct_UFunction_UButton_SetColorAndOpacity();
	UMG_API class UClass* Z_Construct_UClass_UButton_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UButton();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnCheckBoxComponentStateChanged__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckBox_GetCheckedState();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckBox_IsChecked();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckBox_IsPressed();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckBox_SetCheckedState();
	UMG_API class UFunction* Z_Construct_UFunction_UCheckBox_SetIsChecked();
	UMG_API class UClass* Z_Construct_UClass_UCheckBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UCheckBox();
	UMG_API class UFunction* Z_Construct_UFunction_UInvalidationBox_InvalidateCache();
	UMG_API class UClass* Z_Construct_UClass_UInvalidationBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UInvalidationBox();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnMenuOpenChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_Close();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_GetMenuPosition();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_HasOpenSubMenus();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_IsOpen();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_Open();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_ShouldOpenDueToClick();
	UMG_API class UFunction* Z_Construct_UFunction_UMenuAnchor_ToggleOpen();
	UMG_API class UClass* Z_Construct_UClass_UMenuAnchor_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UMenuAnchor();
	UMG_API class UClass* Z_Construct_UClass_UNamedSlot_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UNamedSlot();
	UMG_API class UClass* Z_Construct_UClass_USafeZone_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USafeZone();
	UMG_API class UClass* Z_Construct_UClass_UScaleBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UScaleBox();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearHeightOverride();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearMaxDesiredHeight();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearMaxDesiredWidth();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearMinDesiredHeight();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearMinDesiredWidth();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_ClearWidthOverride();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetHeightOverride();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetMaxDesiredHeight();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetMaxDesiredWidth();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetMinDesiredHeight();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetMinDesiredWidth();
	UMG_API class UFunction* Z_Construct_UFunction_USizeBox_SetWidthOverride();
	UMG_API class UClass* Z_Construct_UClass_USizeBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USizeBox();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_GetViewLocation();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_GetViewportWorld();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_GetViewRotation();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_SetViewLocation();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_SetViewRotation();
	UMG_API class UFunction* Z_Construct_UFunction_UViewport_Spawn();
	UMG_API class UClass* Z_Construct_UClass_UViewport_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UGridPanel_AddChildToGrid();
	UMG_API class UClass* Z_Construct_UClass_UGridPanel_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UGridPanel();
	UMG_API class UFunction* Z_Construct_UFunction_UHorizontalBox_AddChildToHorizontalBox();
	UMG_API class UClass* Z_Construct_UClass_UHorizontalBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UHorizontalBox();
	UMG_API class UFunction* Z_Construct_UFunction_UOverlay_AddChildToOverlay();
	UMG_API class UClass* Z_Construct_UClass_UOverlay_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UOverlay();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBox_GetScrollOffset();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBox_ScrollToEnd();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBox_ScrollToStart();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBox_ScrollWidgetIntoView();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBox_SetScrollOffset();
	UMG_API class UClass* Z_Construct_UClass_UScrollBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UScrollBox();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridPanel_AddChildToUniformGrid();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotHeight();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotWidth();
	UMG_API class UFunction* Z_Construct_UFunction_UUniformGridPanel_SetSlotPadding();
	UMG_API class UClass* Z_Construct_UClass_UUniformGridPanel_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UUniformGridPanel();
	UMG_API class UFunction* Z_Construct_UFunction_UVerticalBox_AddChildToVerticalBox();
	UMG_API class UClass* Z_Construct_UClass_UVerticalBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UVerticalBox();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetActiveWidgetIndex();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetNumWidgets();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetWidgetAtIndex();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidget();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidgetIndex();
	UMG_API class UClass* Z_Construct_UClass_UWidgetSwitcher_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetSwitcher();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBox_AddChildWrapBox();
	UMG_API class UFunction* Z_Construct_UFunction_UWrapBox_SetInnerSlotPadding();
	UMG_API class UClass* Z_Construct_UClass_UWrapBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWrapBox();
	UMG_API class UFunction* Z_Construct_UFunction_UProgressBar_SetFillColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UProgressBar_SetIsMarquee();
	UMG_API class UFunction* Z_Construct_UFunction_UProgressBar_SetPercent();
	UMG_API class UClass* Z_Construct_UClass_UProgressBar_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UProgressBar();
	UMG_API class UClass* Z_Construct_UClass_URichTextBlock_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_URichTextBlock();
	UMG_API class UFunction* Z_Construct_UFunction_UScrollBar_SetState();
	UMG_API class UClass* Z_Construct_UClass_UScrollBar_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UScrollBar();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnFloatValueChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnMouseCaptureEndEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnMouseCaptureBeginEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_GetValue();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_SetIndentHandle();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_SetLocked();
	UMG_API class UFunction* Z_Construct_UFunction_USlider_SetValue();
	UMG_API class UClass* Z_Construct_UClass_USlider_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USlider();
	UMG_API class UFunction* Z_Construct_UFunction_USpacer_SetSize();
	UMG_API class UClass* Z_Construct_UClass_USpacer_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USpacer();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_ClearMaxSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_ClearMaxValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_ClearMinSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_ClearMinValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_GetMaxSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_GetMaxValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_GetMinSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_GetMinValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_GetValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetForegroundColor();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetMaxSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetMaxValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetMinSliderValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetMinValue();
	UMG_API class UFunction* Z_Construct_UFunction_USpinBox_SetValue();
	UMG_API class UClass* Z_Construct_UClass_USpinBox_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_USpinBox();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature();
	UMG_API class UClass* Z_Construct_UClass_UTableViewBase_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UTableViewBase();
	UMG_API class UClass* Z_Construct_UClass_UListView_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UListView();
	UMG_API class UFunction* Z_Construct_UFunction_UTileView_RequestListRefresh();
	UMG_API class UFunction* Z_Construct_UFunction_UTileView_SetItemHeight();
	UMG_API class UFunction* Z_Construct_UFunction_UTileView_SetItemWidth();
	UMG_API class UClass* Z_Construct_UClass_UTileView_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UTileView();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_GetText();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetFont();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetJustification();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetShadowColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetShadowOffset();
	UMG_API class UFunction* Z_Construct_UFunction_UTextBlock_SetText();
	UMG_API class UClass* Z_Construct_UClass_UTextBlock_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UTextBlock();
	UMG_API class UFunction* Z_Construct_UFunction_UThrobber_SetAnimateHorizontally();
	UMG_API class UFunction* Z_Construct_UFunction_UThrobber_SetAnimateOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UThrobber_SetAnimateVertically();
	UMG_API class UFunction* Z_Construct_UFunction_UThrobber_SetNumberOfPieces();
	UMG_API class UClass* Z_Construct_UClass_UThrobber_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UThrobber();
	UMG_API class UFunction* Z_Construct_UDelegateFunction_UMG_OnConstructEvent__DelegateSignature();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EDesignPreviewSizeMode();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EUMGSequencePlayMode();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FNamedSlotBinding();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FPaintContext();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_AddToPlayerScreen();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_AddToViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_Construct();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_Destruct();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_GetIsVisible();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_GetOwningLocalPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_GetOwningPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_GetOwningPlayerPawn();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_IsInteractable();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_IsInViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnAnalogValueChanged();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnAnimationFinished();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnAnimationStarted();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnControllerAnalogValueChanged();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnControllerButtonPressed();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnControllerButtonReleased();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDragCancelled();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDragDetected();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDragEnter();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDragLeave();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDragOver();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnDrop();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnFocusLost();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnFocusReceived();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnKeyChar();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnKeyDown();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnKeyUp();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMotionDetected();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseButtonDoubleClick();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseButtonDown();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseButtonUp();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseEnter();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseLeave();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseMove();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnMouseWheel();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnPaint();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnPreviewKeyDown();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnPreviewMouseButtonDown();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnTouchEnded();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnTouchGesture();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnTouchMoved();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_OnTouchStarted();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_PauseAnimation();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_PlayAnimation();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_PlaySound();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_RemoveFromViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetAlignmentInViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetAnchorsInViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetColorAndOpacity();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetDesiredSizeInViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetForegroundColor();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetOwningLocalPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_SetPositionInViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_StopAnimation();
	UMG_API class UFunction* Z_Construct_UFunction_UUserWidget_Tick();
	UMG_API class UClass* Z_Construct_UClass_UUserWidget_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UUserWidget();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FWidgetAnimationBinding();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetAnimation_GetEndTime();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetAnimation_GetStartTime();
	UMG_API class UClass* Z_Construct_UClass_UWidgetAnimation_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetAnimation();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EBindingKind();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FDelegateRuntimeBinding();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBlueprintGeneratedClass_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBlueprintGeneratedClass();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CancelDragDrop();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureJoystick();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureMouse();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ClearUserFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Create();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CreateDragDropOperation();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDrag();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDragIfPressed();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DismissAllMenus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawBox();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLine();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLines();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawText();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawTextFormatted();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_EndDragDrop();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsOfClass();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsWithInterface();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResource();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsTexture2D();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDragDroppingContent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDynamicMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromCharacterEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromControllerEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromKeyEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromNavigationEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromPointerEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetKeyEventFromAnalogInputEvent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Handled();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_IsDragDropping();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_LockMouse();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromAsset();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromTexture();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_NoResourceBrush();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseJoystickCapture();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseMouseCapture();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToMaterial();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToTexture();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetFocusToGameViewport();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUI();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameOnly();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnly();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetMousePosition();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetUserFocus();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Unhandled();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_UnlockMouse();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBlueprintLibrary_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetBlueprintLibrary();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetBlendMode();
	UMG_API class UEnum* Z_Construct_UEnum_UMG_EWidgetSpace();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_GetDrawSize();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_GetMaxInteractionDistance();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_GetOwnerPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_GetUserWidgetObject();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_SetDrawSize();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_SetMaxInteractionDistance();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_SetOwnerPlayer();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetComponent_SetWidget();
	UMG_API class UClass* Z_Construct_UClass_UWidgetComponent_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetComponent();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetMousePositionScaledByDPI();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportScale();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportSize();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_ProjectWorldLocationToWidgetPosition();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_RemoveAllWidgets();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsCanvasSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsGridSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsHorizontalBoxSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsOverlaySlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsUniformGridSlot();
	UMG_API class UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsVerticalBoxSlot();
	UMG_API class UClass* Z_Construct_UClass_UWidgetLayoutLibrary_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetLayoutLibrary();
	UMG_API class UScriptStruct* Z_Construct_UScriptStruct_FWidgetNavigationData();
	UMG_API class UClass* Z_Construct_UClass_UWidgetNavigation_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetNavigation();
	UMG_API class UClass* Z_Construct_UClass_UWidgetTree_NoRegister();
	UMG_API class UClass* Z_Construct_UClass_UWidgetTree();
	UMG_API class UPackage* Z_Construct_UPackage_UMG();
	UFunction* Z_Construct_UDelegateFunction_UMG_DownloadImageDelegate__DelegateSignature()
	{
		struct _Script_UMG_eventDownloadImageDelegate_Parms
		{
			UTexture2D* Texture;
		};
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DownloadImageDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventDownloadImageDelegate_Parms));
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Texture, _Script_UMG_eventDownloadImageDelegate_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/AsyncTaskDownloadImage.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UAsyncTaskDownloadImage_DownloadImage()
	{
		struct AsyncTaskDownloadImage_eventDownloadImage_Parms
		{
			FString URL;
			UAsyncTaskDownloadImage* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UAsyncTaskDownloadImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DownloadImage"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(AsyncTaskDownloadImage_eventDownloadImage_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, AsyncTaskDownloadImage_eventDownloadImage_Parms), 0x0000000000000580, Z_Construct_UClass_UAsyncTaskDownloadImage_NoRegister());
			UProperty* NewProp_URL = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("URL"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(URL, AsyncTaskDownloadImage_eventDownloadImage_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/AsyncTaskDownloadImage.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UAsyncTaskDownloadImage_NoRegister()
	{
		return UAsyncTaskDownloadImage::StaticClass();
	}
	UClass* Z_Construct_UClass_UAsyncTaskDownloadImage()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintAsyncActionBase();
			Z_Construct_UPackage_UMG();
			OuterClass = UAsyncTaskDownloadImage::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UAsyncTaskDownloadImage_DownloadImage());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnFail = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnFail"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnFail, UAsyncTaskDownloadImage), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_DownloadImageDelegate__DelegateSignature());
				UProperty* NewProp_OnSuccess = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnSuccess"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnSuccess, UAsyncTaskDownloadImage), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_DownloadImageDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UAsyncTaskDownloadImage_DownloadImage()); // 896525750
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/AsyncTaskDownloadImage.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/AsyncTaskDownloadImage.h"));
				MetaData->SetValue(NewProp_OnFail, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/AsyncTaskDownloadImage.h"));
				MetaData->SetValue(NewProp_OnSuccess, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/AsyncTaskDownloadImage.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UAsyncTaskDownloadImage(Z_Construct_UClass_UAsyncTaskDownloadImage, TEXT("UAsyncTaskDownloadImage"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UAsyncTaskDownloadImage);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnDragDropMulticast__DelegateSignature()
	{
		struct _Script_UMG_eventOnDragDropMulticast_Parms
		{
			UDragDropOperation* Operation;
		};
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnDragDropMulticast__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventOnDragDropMulticast_Parms));
			UProperty* NewProp_Operation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Operation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Operation, _Script_UMG_eventOnDragDropMulticast_Parms), 0x0000000000000080, Z_Construct_UClass_UDragDropOperation_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_UMG_EDragPivot()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EDragPivot_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EDragPivot"), 0, Get_Z_Construct_UEnum_UMG_EDragPivot_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDragPivot"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::MouseDown")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::TopLeft")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::TopCenter")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::TopRight")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::CenterLeft")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::CenterCenter")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::CenterRight")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::BottomLeft")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::BottomCenter")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::BottomRight")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDragPivot::EDragPivot_MAX")), 10));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Controls where the drag widget visual will appear when dragged relative to the pointer performing\nthe drag operation."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EDragPivot_CRC() { return 1638625737U; }
	UFunction* Z_Construct_UFunction_UDragDropOperation_DragCancelled()
	{
		UObject* Outer=Z_Construct_UClass_UDragDropOperation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DragCancelled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420C00, 65535, sizeof(DragDropOperation_eventDragCancelled_Parms));
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, DragDropOperation_eventDragCancelled_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UDragDropOperation_Dragged()
	{
		UObject* Outer=Z_Construct_UClass_UDragDropOperation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Dragged"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420C00, 65535, sizeof(DragDropOperation_eventDragged_Parms));
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, DragDropOperation_eventDragged_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UDragDropOperation_Drop()
	{
		UObject* Outer=Z_Construct_UClass_UDragDropOperation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Drop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420C00, 65535, sizeof(DragDropOperation_eventDrop_Parms));
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, DragDropOperation_eventDrop_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UDragDropOperation_NoRegister()
	{
		return UDragDropOperation::StaticClass();
	}
	UClass* Z_Construct_UClass_UDragDropOperation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_UMG();
			OuterClass = UDragDropOperation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UDragDropOperation_DragCancelled());
				OuterClass->LinkChild(Z_Construct_UFunction_UDragDropOperation_Dragged());
				OuterClass->LinkChild(Z_Construct_UFunction_UDragDropOperation_Drop());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnDragged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnDragged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnDragged, UDragDropOperation), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnDragDropMulticast__DelegateSignature());
				UProperty* NewProp_OnDragCancelled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnDragCancelled"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnDragCancelled, UDragDropOperation), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnDragDropMulticast__DelegateSignature());
				UProperty* NewProp_OnDrop = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnDrop"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnDrop, UDragDropOperation), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnDragDropMulticast__DelegateSignature());
				UProperty* NewProp_Offset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Offset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Offset, UDragDropOperation), 0x0001040000000005, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Pivot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pivot"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Pivot, UDragDropOperation), 0x0001000000000005, Z_Construct_UEnum_UMG_EDragPivot());
				UProperty* NewProp_DefaultDragVisual = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultDragVisual"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultDragVisual, UDragDropOperation), 0x0001000000000015, Z_Construct_UClass_UWidget_NoRegister());
				UProperty* NewProp_Payload = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Payload"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Payload, UDragDropOperation), 0x0001000000000005, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_Tag = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tag"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Tag, UDragDropOperation), 0x0001000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UDragDropOperation_DragCancelled()); // 2791740716
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UDragDropOperation_Dragged()); // 3934055390
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UDragDropOperation_Drop()); // 981321332
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("DontUseGenericSpawnObject"), TEXT("True"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/DragDropOperation.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This class is the base drag drop operation for UMG, extend it to add additional data and add new functionality."));
				MetaData->SetValue(NewProp_OnDragged, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
				MetaData->SetValue(NewProp_OnDragCancelled, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
				MetaData->SetValue(NewProp_OnDrop, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
				MetaData->SetValue(NewProp_Offset, TEXT("Category"), TEXT("Drag and Drop"));
				MetaData->SetValue(NewProp_Offset, TEXT("ExposeOnSpawn"), TEXT("true"));
				MetaData->SetValue(NewProp_Offset, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
				MetaData->SetValue(NewProp_Offset, TEXT("ToolTip"), TEXT("A percentage offset (-1..+1) from the Pivot location, the percentage is of the desired size of the dragged visual."));
				MetaData->SetValue(NewProp_Pivot, TEXT("Category"), TEXT("Drag and Drop"));
				MetaData->SetValue(NewProp_Pivot, TEXT("ExposeOnSpawn"), TEXT("true"));
				MetaData->SetValue(NewProp_Pivot, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
				MetaData->SetValue(NewProp_Pivot, TEXT("ToolTip"), TEXT("Controls where the drag widget visual will appear when dragged relative to the pointer performing\nthe drag operation."));
				MetaData->SetValue(NewProp_DefaultDragVisual, TEXT("Category"), TEXT("Drag and Drop"));
				MetaData->SetValue(NewProp_DefaultDragVisual, TEXT("DisplayName"), TEXT("Drag Visual"));
				MetaData->SetValue(NewProp_DefaultDragVisual, TEXT("ExposeOnSpawn"), TEXT("true"));
				MetaData->SetValue(NewProp_DefaultDragVisual, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
				MetaData->SetValue(NewProp_DefaultDragVisual, TEXT("ToolTip"), TEXT("The Drag Visual is the widget to display when dragging the item.  Normally people create a new widget to represent the\ntemporary drag."));
				MetaData->SetValue(NewProp_Payload, TEXT("Category"), TEXT("Drag and Drop"));
				MetaData->SetValue(NewProp_Payload, TEXT("ExposeOnSpawn"), TEXT("true"));
				MetaData->SetValue(NewProp_Payload, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
				MetaData->SetValue(NewProp_Payload, TEXT("ToolTip"), TEXT("The payload of the drag operation.  This can be any UObject that you want to pass along as dragged data.  If you\nwere building an inventory screen this would be the UObject representing the item being moved to another slot."));
				MetaData->SetValue(NewProp_Tag, TEXT("Category"), TEXT("Drag and Drop"));
				MetaData->SetValue(NewProp_Tag, TEXT("ExposeOnSpawn"), TEXT("true"));
				MetaData->SetValue(NewProp_Tag, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/DragDropOperation.h"));
				MetaData->SetValue(NewProp_Tag, TEXT("ToolTip"), TEXT("A simple string tag you can optionally use to provide extra metadata about the operation."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDragDropOperation(Z_Construct_UClass_UDragDropOperation, TEXT("UDragDropOperation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UDragDropOperation);
	UClass* Z_Construct_UClass_UMovieScene2DTransformSection_NoRegister()
	{
		return UMovieScene2DTransformSection::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieScene2DTransformSection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneSection();
			Z_Construct_UPackage_UMG();
			OuterClass = UMovieScene2DTransformSection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Shear = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Shear"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Shear, UMovieScene2DTransformSection), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
				NewProp_Shear->ArrayDim = CPP_ARRAY_DIM(Shear, UMovieScene2DTransformSection);
				UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, UMovieScene2DTransformSection), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
				NewProp_Scale->ArrayDim = CPP_ARRAY_DIM(Scale, UMovieScene2DTransformSection);
				UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, UMovieScene2DTransformSection), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
				UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Translation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Translation, UMovieScene2DTransformSection), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
				NewProp_Translation->ArrayDim = CPP_ARRAY_DIM(Translation, UMovieScene2DTransformSection);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/MovieScene2DTransformSection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieScene2DTransformSection.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A transform section"));
				MetaData->SetValue(NewProp_Shear, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieScene2DTransformSection.h"));
				MetaData->SetValue(NewProp_Shear, TEXT("ToolTip"), TEXT("Shear curve"));
				MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieScene2DTransformSection.h"));
				MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("Scale curves"));
				MetaData->SetValue(NewProp_Rotation, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieScene2DTransformSection.h"));
				MetaData->SetValue(NewProp_Rotation, TEXT("ToolTip"), TEXT("Rotation curve"));
				MetaData->SetValue(NewProp_Translation, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieScene2DTransformSection.h"));
				MetaData->SetValue(NewProp_Translation, TEXT("ToolTip"), TEXT("Translation curves"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieScene2DTransformSection(Z_Construct_UClass_UMovieScene2DTransformSection, TEXT("UMovieScene2DTransformSection"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieScene2DTransformSection);
	UScriptStruct* Z_Construct_UScriptStruct_FWidgetTransform()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FWidgetTransform_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("WidgetTransform"), sizeof(FWidgetTransform), Get_Z_Construct_UScriptStruct_FWidgetTransform_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WidgetTransform"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWidgetTransform>, EStructFlags(0x00000001));
			UProperty* NewProp_Angle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Angle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Angle, FWidgetTransform), 0x0000000000000005);
			UProperty* NewProp_Shear = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Shear"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Shear, FWidgetTransform), 0x0000000000000005, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, FWidgetTransform), 0x0000000000000005, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Translation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Translation, FWidgetTransform), 0x0000000000000005, Z_Construct_UScriptStruct_FVector2D());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Slate/WidgetTransform.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Describes the standard transformation of a widget"));
			MetaData->SetValue(NewProp_Angle, TEXT("Category"), TEXT("Transform"));
			MetaData->SetValue(NewProp_Angle, TEXT("Delta"), TEXT("1"));
			MetaData->SetValue(NewProp_Angle, TEXT("ModuleRelativePath"), TEXT("Public/Slate/WidgetTransform.h"));
			MetaData->SetValue(NewProp_Angle, TEXT("ToolTip"), TEXT("The angle in degrees to rotate"));
			MetaData->SetValue(NewProp_Angle, TEXT("UIMax"), TEXT("180"));
			MetaData->SetValue(NewProp_Angle, TEXT("UIMin"), TEXT("-180"));
			MetaData->SetValue(NewProp_Shear, TEXT("Category"), TEXT("Transform"));
			MetaData->SetValue(NewProp_Shear, TEXT("ClampMax"), TEXT("89"));
			MetaData->SetValue(NewProp_Shear, TEXT("ClampMin"), TEXT("-89"));
			MetaData->SetValue(NewProp_Shear, TEXT("Delta"), TEXT("1"));
			MetaData->SetValue(NewProp_Shear, TEXT("ModuleRelativePath"), TEXT("Public/Slate/WidgetTransform.h"));
			MetaData->SetValue(NewProp_Shear, TEXT("ToolTip"), TEXT("The amount to shear the widget in slate units"));
			MetaData->SetValue(NewProp_Shear, TEXT("UIMax"), TEXT("89"));
			MetaData->SetValue(NewProp_Shear, TEXT("UIMin"), TEXT("-89"));
			MetaData->SetValue(NewProp_Scale, TEXT("Category"), TEXT("Transform"));
			MetaData->SetValue(NewProp_Scale, TEXT("Delta"), TEXT("0.05"));
			MetaData->SetValue(NewProp_Scale, TEXT("ModuleRelativePath"), TEXT("Public/Slate/WidgetTransform.h"));
			MetaData->SetValue(NewProp_Scale, TEXT("ToolTip"), TEXT("The scale to apply to the widget"));
			MetaData->SetValue(NewProp_Scale, TEXT("UIMax"), TEXT("5"));
			MetaData->SetValue(NewProp_Scale, TEXT("UIMin"), TEXT("-5"));
			MetaData->SetValue(NewProp_Translation, TEXT("Category"), TEXT("Transform"));
			MetaData->SetValue(NewProp_Translation, TEXT("Delta"), TEXT("1"));
			MetaData->SetValue(NewProp_Translation, TEXT("ModuleRelativePath"), TEXT("Public/Slate/WidgetTransform.h"));
			MetaData->SetValue(NewProp_Translation, TEXT("ToolTip"), TEXT("The amount to translate the widget in slate units"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWidgetTransform_CRC() { return 4006661571U; }
	UClass* Z_Construct_UClass_UMovieScene2DTransformTrack_NoRegister()
	{
		return UMovieScene2DTransformTrack::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieScene2DTransformTrack()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieScenePropertyTrack();
			Z_Construct_UPackage_UMG();
			OuterClass = UMovieScene2DTransformTrack::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/MovieScene2DTransformTrack.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieScene2DTransformTrack.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Handles manipulation of 2D transforms in a movie scene"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieScene2DTransformTrack(Z_Construct_UClass_UMovieScene2DTransformTrack, TEXT("UMovieScene2DTransformTrack"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieScene2DTransformTrack);
	UClass* Z_Construct_UClass_UMovieSceneMarginSection_NoRegister()
	{
		return UMovieSceneMarginSection::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneMarginSection()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneSection();
			Z_Construct_UPackage_UMG();
			OuterClass = UMovieSceneMarginSection::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BottomCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BottomCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BottomCurve, UMovieSceneMarginSection), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
				UProperty* NewProp_RightCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RightCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RightCurve, UMovieSceneMarginSection), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
				UProperty* NewProp_LeftCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LeftCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LeftCurve, UMovieSceneMarginSection), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
				UProperty* NewProp_TopCurve = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TopCurve"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TopCurve, UMovieSceneMarginSection), 0x0000000000000000, Z_Construct_UScriptStruct_FRichCurve());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/MovieSceneMarginSection.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieSceneMarginSection.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A section in a Margin track"));
				MetaData->SetValue(NewProp_BottomCurve, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieSceneMarginSection.h"));
				MetaData->SetValue(NewProp_BottomCurve, TEXT("ToolTip"), TEXT("Alpha curve data"));
				MetaData->SetValue(NewProp_RightCurve, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieSceneMarginSection.h"));
				MetaData->SetValue(NewProp_RightCurve, TEXT("ToolTip"), TEXT("Blue curve data"));
				MetaData->SetValue(NewProp_LeftCurve, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieSceneMarginSection.h"));
				MetaData->SetValue(NewProp_LeftCurve, TEXT("ToolTip"), TEXT("Green curve data"));
				MetaData->SetValue(NewProp_TopCurve, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieSceneMarginSection.h"));
				MetaData->SetValue(NewProp_TopCurve, TEXT("ToolTip"), TEXT("Red curve data"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneMarginSection(Z_Construct_UClass_UMovieSceneMarginSection, TEXT("UMovieSceneMarginSection"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneMarginSection);
	UClass* Z_Construct_UClass_UMovieSceneMarginTrack_NoRegister()
	{
		return UMovieSceneMarginTrack::StaticClass();
	}
	UClass* Z_Construct_UClass_UMovieSceneMarginTrack()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieScenePropertyTrack();
			Z_Construct_UPackage_UMG();
			OuterClass = UMovieSceneMarginTrack::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/MovieSceneMarginTrack.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Animation/MovieSceneMarginTrack.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Handles manipulation of FMargins in a movie scene"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMovieSceneMarginTrack(Z_Construct_UClass_UMovieSceneMarginTrack, TEXT("UMovieSceneMarginTrack"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMovieSceneMarginTrack);
	UClass* Z_Construct_UClass_UNamedSlotInterface_NoRegister()
	{
		return UNamedSlotInterface::StaticClass();
	}
	UClass* Z_Construct_UClass_UNamedSlotInterface()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			UInterface::StaticClass();
			Z_Construct_UPackage_UMG();
			OuterClass = UNamedSlotInterface::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20104081;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("CannotImplementInterfaceInBlueprint"), TEXT(""));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNamedSlotInterface(Z_Construct_UClass_UNamedSlotInterface, TEXT("UNamedSlotInterface"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNamedSlotInterface);
	UScriptStruct* Z_Construct_UScriptStruct_FDynamicPropertyPath()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FDynamicPropertyPath_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DynamicPropertyPath"), sizeof(FDynamicPropertyPath), Get_Z_Construct_UScriptStruct_FDynamicPropertyPath_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DynamicPropertyPath"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDynamicPropertyPath>, EStructFlags(0x00000201));
			UProperty* NewProp_Segments = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Segments"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Segments, FDynamicPropertyPath), 0x0000000000000000);
			UProperty* NewProp_Segments_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Segments, TEXT("Segments"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPropertyPathSegment());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Binding/DynamicPropertyPath.h"));
			MetaData->SetValue(NewProp_Segments, TEXT("ModuleRelativePath"), TEXT("Public/Binding/DynamicPropertyPath.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDynamicPropertyPath_CRC() { return 382318484U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPropertyPathSegment()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FPropertyPathSegment_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PropertyPathSegment"), sizeof(FPropertyPathSegment), Get_Z_Construct_UScriptStruct_FPropertyPathSegment_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PropertyPathSegment"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPropertyPathSegment>, EStructFlags(0x00000201));
			UProperty* NewProp_Field = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Field"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Field, FPropertyPathSegment), 0x0000000000002000, UField::StaticClass());
			UProperty* NewProp_Struct = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Struct"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Struct, FPropertyPathSegment), 0x0000000000002000, UStruct::StaticClass());
			UProperty* NewProp_ArrayIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ArrayIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ArrayIndex, FPropertyPathSegment), 0x0000000000000000);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FPropertyPathSegment), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Binding/DynamicPropertyPath.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A struct used for caching part of a property path.  Don't use this class directly."));
			MetaData->SetValue(NewProp_Field, TEXT("ModuleRelativePath"), TEXT("Public/Binding/DynamicPropertyPath.h"));
			MetaData->SetValue(NewProp_Field, TEXT("ToolTip"), TEXT("The cached property on the Struct that this Name resolved to on it last time Resolve was called, if\nthe Struct doesn't change, this value is returned to avoid performing another Field lookup."));
			MetaData->SetValue(NewProp_Struct, TEXT("ModuleRelativePath"), TEXT("Public/Binding/DynamicPropertyPath.h"));
			MetaData->SetValue(NewProp_Struct, TEXT("ToolTip"), TEXT("The cached Class or ScriptStruct that was used last to resolve Name to a property."));
			MetaData->SetValue(NewProp_ArrayIndex, TEXT("ModuleRelativePath"), TEXT("Public/Binding/DynamicPropertyPath.h"));
			MetaData->SetValue(NewProp_ArrayIndex, TEXT("ToolTip"), TEXT("The optional array index."));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Public/Binding/DynamicPropertyPath.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ToolTip"), TEXT("The sub-component of the property path, a single value between .'s of the path"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPropertyPathSegment_CRC() { return 3627594835U; }
	UClass* Z_Construct_UClass_UPropertyBinding_NoRegister()
	{
		return UPropertyBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UPropertyBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_UMG();
			OuterClass = UPropertyBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_DestinationProperty = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DestinationProperty"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(DestinationProperty, UPropertyBinding), 0x0000000000000000);
				UProperty* NewProp_SourcePath = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourcePath"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourcePath, UPropertyBinding), 0x0000000000000000, Z_Construct_UScriptStruct_FDynamicPropertyPath());
				UProperty* NewProp_SourceObject = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SourceObject"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(SourceObject, UPropertyBinding), 0x0004000000000000, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/PropertyBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/PropertyBinding.h"));
				MetaData->SetValue(NewProp_DestinationProperty, TEXT("ModuleRelativePath"), TEXT("Public/Binding/PropertyBinding.h"));
				MetaData->SetValue(NewProp_DestinationProperty, TEXT("ToolTip"), TEXT("Used to determine if a binding already exists on the object and if this binding can be safely removed."));
				MetaData->SetValue(NewProp_SourcePath, TEXT("ModuleRelativePath"), TEXT("Public/Binding/PropertyBinding.h"));
				MetaData->SetValue(NewProp_SourcePath, TEXT("ToolTip"), TEXT("The property path to trace to resolve this binding on the Source Object"));
				MetaData->SetValue(NewProp_SourceObject, TEXT("ModuleRelativePath"), TEXT("Public/Binding/PropertyBinding.h"));
				MetaData->SetValue(NewProp_SourceObject, TEXT("ToolTip"), TEXT("The source object to use as the initial container to resolve the Source Property Path on."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPropertyBinding(Z_Construct_UClass_UPropertyBinding, TEXT("UPropertyBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPropertyBinding);
	UFunction* Z_Construct_UFunction_UBoolBinding_GetValue()
	{
		struct BoolBinding_eventGetValue_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBoolBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(BoolBinding_eventGetValue_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BoolBinding_eventGetValue_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BoolBinding_eventGetValue_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BoolBinding_eventGetValue_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/BoolBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBoolBinding_NoRegister()
	{
		return UBoolBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UBoolBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPropertyBinding();
			Z_Construct_UPackage_UMG();
			OuterClass = UBoolBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBoolBinding_GetValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBoolBinding_GetValue()); // 2513674723
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/BoolBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/BoolBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBoolBinding(Z_Construct_UClass_UBoolBinding, TEXT("UBoolBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBoolBinding);
	UFunction* Z_Construct_UFunction_UBrushBinding_GetValue()
	{
		struct BrushBinding_eventGetValue_Parms
		{
			FSlateBrush ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBrushBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(BrushBinding_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, BrushBinding_eventGetValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/BrushBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBrushBinding_NoRegister()
	{
		return UBrushBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UBrushBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPropertyBinding();
			Z_Construct_UPackage_UMG();
			OuterClass = UBrushBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBrushBinding_GetValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBrushBinding_GetValue()); // 3968144821
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/BrushBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/BrushBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBrushBinding(Z_Construct_UClass_UBrushBinding, TEXT("UBrushBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBrushBinding);
	UFunction* Z_Construct_UFunction_UCheckedStateBinding_GetValue()
	{
		struct CheckedStateBinding_eventGetValue_Parms
		{
			TEnumAsByte<ECheckBoxState> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCheckedStateBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(CheckedStateBinding_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, CheckedStateBinding_eventGetValue_Parms), 0x0000000000000580, Z_Construct_UEnum_SlateCore_ECheckBoxState());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/CheckedStateBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCheckedStateBinding_NoRegister()
	{
		return UCheckedStateBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UCheckedStateBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPropertyBinding();
			Z_Construct_UPackage_UMG();
			OuterClass = UCheckedStateBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCheckedStateBinding_GetValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheckedStateBinding_GetValue()); // 2067103496
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/CheckedStateBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/CheckedStateBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCheckedStateBinding(Z_Construct_UClass_UCheckedStateBinding, TEXT("UCheckedStateBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCheckedStateBinding);
	UFunction* Z_Construct_UFunction_UColorBinding_GetLinearValue()
	{
		struct ColorBinding_eventGetLinearValue_Parms
		{
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UColorBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLinearValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40820401, 65535, sizeof(ColorBinding_eventGetLinearValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, ColorBinding_eventGetLinearValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/ColorBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UColorBinding_GetSlateValue()
	{
		struct ColorBinding_eventGetSlateValue_Parms
		{
			FSlateColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UColorBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSlateValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(ColorBinding_eventGetSlateValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, ColorBinding_eventGetSlateValue_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FSlateColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/ColorBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UColorBinding_NoRegister()
	{
		return UColorBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UColorBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPropertyBinding();
			Z_Construct_UPackage_UMG();
			OuterClass = UColorBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UColorBinding_GetLinearValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UColorBinding_GetSlateValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UColorBinding_GetLinearValue()); // 1326801823
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UColorBinding_GetSlateValue()); // 2111215204
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/ColorBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/ColorBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UColorBinding(Z_Construct_UClass_UColorBinding, TEXT("UColorBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UColorBinding);
	UFunction* Z_Construct_UFunction_UFloatBinding_GetValue()
	{
		struct FloatBinding_eventGetValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UFloatBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(FloatBinding_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, FloatBinding_eventGetValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/FloatBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UFloatBinding_NoRegister()
	{
		return UFloatBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UFloatBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPropertyBinding();
			Z_Construct_UPackage_UMG();
			OuterClass = UFloatBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UFloatBinding_GetValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UFloatBinding_GetValue()); // 1192835725
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/FloatBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/FloatBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFloatBinding(Z_Construct_UClass_UFloatBinding, TEXT("UFloatBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFloatBinding);
	UFunction* Z_Construct_UFunction_UInt32Binding_GetValue()
	{
		struct Int32Binding_eventGetValue_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UInt32Binding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(Int32Binding_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, Int32Binding_eventGetValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/Int32Binding.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UInt32Binding_NoRegister()
	{
		return UInt32Binding::StaticClass();
	}
	UClass* Z_Construct_UClass_UInt32Binding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPropertyBinding();
			Z_Construct_UPackage_UMG();
			OuterClass = UInt32Binding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UInt32Binding_GetValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UInt32Binding_GetValue()); // 2773894151
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/Int32Binding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/Int32Binding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInt32Binding(Z_Construct_UClass_UInt32Binding, TEXT("UInt32Binding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInt32Binding);
	UFunction* Z_Construct_UFunction_UMouseCursorBinding_GetValue()
	{
		struct MouseCursorBinding_eventGetValue_Parms
		{
			TEnumAsByte<EMouseCursor::Type> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMouseCursorBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(MouseCursorBinding_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, MouseCursorBinding_eventGetValue_Parms), 0x0000000000000580, Z_Construct_UEnum_CoreUObject_EMouseCursor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/MouseCursorBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMouseCursorBinding_NoRegister()
	{
		return UMouseCursorBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UMouseCursorBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPropertyBinding();
			Z_Construct_UPackage_UMG();
			OuterClass = UMouseCursorBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMouseCursorBinding_GetValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMouseCursorBinding_GetValue()); // 2808750460
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/MouseCursorBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/MouseCursorBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMouseCursorBinding(Z_Construct_UClass_UMouseCursorBinding, TEXT("UMouseCursorBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMouseCursorBinding);
	UFunction* Z_Construct_UFunction_UTextBinding_GetStringValue()
	{
		struct TextBinding_eventGetStringValue_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTextBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetStringValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(TextBinding_eventGetStringValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, TextBinding_eventGetStringValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/TextBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBinding_GetTextValue()
	{
		struct TextBinding_eventGetTextValue_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTextBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTextValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(TextBinding_eventGetTextValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, TextBinding_eventGetTextValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/TextBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTextBinding_NoRegister()
	{
		return UTextBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPropertyBinding();
			Z_Construct_UPackage_UMG();
			OuterClass = UTextBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTextBinding_GetStringValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBinding_GetTextValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTextBinding_GetStringValue()); // 1900285556
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTextBinding_GetTextValue()); // 1673322131
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/TextBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/TextBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextBinding(Z_Construct_UClass_UTextBinding, TEXT("UTextBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextBinding);
	UEnum* Z_Construct_UEnum_UMG_ESlateSizeRule()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_ESlateSizeRule_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESlateSizeRule"), 0, Get_Z_Construct_UEnum_UMG_ESlateSizeRule_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESlateSizeRule"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateSizeRule::Automatic")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateSizeRule::Fill")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateSizeRule::ESlateSizeRule_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Automatic.ToolTip"), TEXT("Only requests as much room as it needs based on the widgets desired size."));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Fill.ToolTip"), TEXT("Greedily attempts to fill all available room based on the percentage value 0..1"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/SlateWrapperTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The sizing options of UWidgets"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_ESlateSizeRule_CRC() { return 1476912708U; }
	UEnum* Z_Construct_UEnum_UMG_ESlateVisibility()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_ESlateVisibility_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("ESlateVisibility"), 0, Get_Z_Construct_UEnum_UMG_ESlateVisibility_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESlateVisibility"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateVisibility::Visible")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateVisibility::Collapsed")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateVisibility::Hidden")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateVisibility::HitTestInvisible")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateVisibility::SelfHitTestInvisible")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ESlateVisibility::ESlateVisibility_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Collapsed.ToolTip"), TEXT("Not visible and takes up no space in the layout; can never be clicked on because it takes up no space."));
			MetaData->SetValue(ReturnEnum, TEXT("Hidden.ToolTip"), TEXT("Not visible, but occupies layout space. Not interactive for obvious reasons."));
			MetaData->SetValue(ReturnEnum, TEXT("HitTestInvisible.ToolTip"), TEXT("Visible to the user, but only as art. The cursors hit tests will never see this widget."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/SlateWrapperTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SelfHitTestInvisible.ToolTip"), TEXT("Same as HitTestInvisible, but doesn't apply to child widgets."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Is an entity visible?"));
			MetaData->SetValue(ReturnEnum, TEXT("Visible.ToolTip"), TEXT("Default widget visibility - visible and can interactive with the cursor"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_ESlateVisibility_CRC() { return 1381657283U; }
	UScriptStruct* Z_Construct_UScriptStruct_FSlateChildSize()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FSlateChildSize_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("SlateChildSize"), sizeof(FSlateChildSize), Get_Z_Construct_UScriptStruct_FSlateChildSize_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlateChildSize"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSlateChildSize>, EStructFlags(0x00000001));
			UProperty* NewProp_SizeRule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SizeRule"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SizeRule, FSlateChildSize), 0x0000000000000005, Z_Construct_UEnum_UMG_ESlateSizeRule());
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, FSlateChildSize), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Components/SlateWrapperTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A struct exposing size param related properties to UMG."));
			MetaData->SetValue(NewProp_SizeRule, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_SizeRule, TEXT("ModuleRelativePath"), TEXT("Public/Components/SlateWrapperTypes.h"));
			MetaData->SetValue(NewProp_SizeRule, TEXT("ToolTip"), TEXT("The sizing rule of the content."));
			MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Public/Components/SlateWrapperTypes.h"));
			MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("The parameter of the size rule."));
			MetaData->SetValue(NewProp_Value, TEXT("UIMax"), TEXT("1"));
			MetaData->SetValue(NewProp_Value, TEXT("UIMin"), TEXT("0"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSlateChildSize_CRC() { return 1116046018U; }
	UScriptStruct* Z_Construct_UScriptStruct_FEventReply()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FEventReply_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("EventReply"), sizeof(FEventReply), Get_Z_Construct_UScriptStruct_FEventReply_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EventReply"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FEventReply>, EStructFlags(0x00000001));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Components/SlateWrapperTypes.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Allows users to handle events and return information to the underlying UI layer."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FEventReply_CRC() { return 2067944968U; }
	UFunction* Z_Construct_UFunction_UVisibilityBinding_GetValue()
	{
		struct VisibilityBinding_eventGetValue_Parms
		{
			TEnumAsByte<ESlateVisibility> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVisibilityBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(VisibilityBinding_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, VisibilityBinding_eventGetValue_Parms), 0x0000000000000580, Z_Construct_UEnum_UMG_ESlateVisibility());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/VisibilityBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVisibilityBinding_NoRegister()
	{
		return UVisibilityBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UVisibilityBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPropertyBinding();
			Z_Construct_UPackage_UMG();
			OuterClass = UVisibilityBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UVisibilityBinding_GetValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVisibilityBinding_GetValue()); // 3089862726
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/VisibilityBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/VisibilityBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVisibilityBinding(Z_Construct_UClass_UVisibilityBinding, TEXT("UVisibilityBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVisibilityBinding);
	UFunction* Z_Construct_UFunction_UWidgetBinding_GetValue()
	{
		struct WidgetBinding_eventGetValue_Parms
		{
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBinding();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x40020401, 65535, sizeof(WidgetBinding_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBinding_eventGetValue_Parms), 0x0000000000000580, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Binding/WidgetBinding.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetBinding_NoRegister()
	{
		return UWidgetBinding::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetBinding()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPropertyBinding();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidgetBinding::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBinding_GetValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBinding_GetValue()); // 1182951928
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Binding/WidgetBinding.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Binding/WidgetBinding.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetBinding(Z_Construct_UClass_UWidgetBinding, TEXT("UWidgetBinding"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetBinding);
	UClass* Z_Construct_UClass_URichTextBlockDecorator_NoRegister()
	{
		return URichTextBlockDecorator::StaticClass();
	}
	UClass* Z_Construct_UClass_URichTextBlockDecorator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_UMG();
			OuterClass = URichTextBlockDecorator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20101080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RevealedIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RevealedIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RevealedIndex, URichTextBlockDecorator), 0x0000000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bReveal, URichTextBlockDecorator, bool);
				UProperty* NewProp_bReveal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bReveal"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bReveal, URichTextBlockDecorator), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bReveal, URichTextBlockDecorator), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/RichTextBlockDecorator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlockDecorator.h"));
				MetaData->SetValue(NewProp_RevealedIndex, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_RevealedIndex, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlockDecorator.h"));
				MetaData->SetValue(NewProp_bReveal, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_bReveal, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlockDecorator.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URichTextBlockDecorator(Z_Construct_UClass_URichTextBlockDecorator, TEXT("URichTextBlockDecorator"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(URichTextBlockDecorator);
	UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_AbsoluteToLocal()
	{
		struct SlateBlueprintLibrary_eventAbsoluteToLocal_Parms
		{
			FGeometry Geometry;
			FVector2D AbsoluteCoordinate;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USlateBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbsoluteToLocal"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SlateBlueprintLibrary_eventAbsoluteToLocal_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SlateBlueprintLibrary_eventAbsoluteToLocal_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_AbsoluteCoordinate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbsoluteCoordinate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbsoluteCoordinate, SlateBlueprintLibrary_eventAbsoluteToLocal_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Geometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Geometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Geometry, SlateBlueprintLibrary_eventAbsoluteToLocal_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Geometry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/SlateBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Absolute coordinates could be either desktop or window space depending on what space the root of the widget hierarchy is in.\n\n@return Transforms AbsoluteCoordinate into the local space of this Geometry."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_AbsoluteToViewport()
	{
		struct SlateBlueprintLibrary_eventAbsoluteToViewport_Parms
		{
			UObject* WorldContextObject;
			FVector2D AbsoluteDesktopCoordinate;
			FVector2D PixelPosition;
			FVector2D ViewportPosition;
		};
		UObject* Outer=Z_Construct_UClass_USlateBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AbsoluteToViewport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SlateBlueprintLibrary_eventAbsoluteToViewport_Parms));
			UProperty* NewProp_ViewportPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewportPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ViewportPosition, SlateBlueprintLibrary_eventAbsoluteToViewport_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_PixelPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PixelPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PixelPosition, SlateBlueprintLibrary_eventAbsoluteToViewport_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_AbsoluteDesktopCoordinate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbsoluteDesktopCoordinate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbsoluteDesktopCoordinate, SlateBlueprintLibrary_eventAbsoluteToViewport_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, SlateBlueprintLibrary_eventAbsoluteToViewport_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Geometry"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/SlateBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Translates absolute coordinate in desktop space of the geometry provided into local viewport coordinates.\n\n@param PixelPosition The position in the game's viewport, usable for line traces and\nother uses where you need a coordinate in the space of viewport resolution units.\n@param ViewportPosition The position in the space of other widgets in the viewport.  Like if you wanted\nto add another widget to the viewport at the same position in viewport space as this location, this is\nwhat you would use."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_GetLocalSize()
	{
		struct SlateBlueprintLibrary_eventGetLocalSize_Parms
		{
			FGeometry Geometry;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USlateBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLocalSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SlateBlueprintLibrary_eventGetLocalSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SlateBlueprintLibrary_eventGetLocalSize_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Geometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Geometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Geometry, SlateBlueprintLibrary_eventGetLocalSize_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Geometry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/SlateBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the size of the geometry in local space."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_IsUnderLocation()
	{
		struct SlateBlueprintLibrary_eventIsUnderLocation_Parms
		{
			FGeometry Geometry;
			FVector2D AbsoluteCoordinate;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USlateBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsUnderLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SlateBlueprintLibrary_eventIsUnderLocation_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SlateBlueprintLibrary_eventIsUnderLocation_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SlateBlueprintLibrary_eventIsUnderLocation_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SlateBlueprintLibrary_eventIsUnderLocation_Parms), sizeof(bool), true);
			UProperty* NewProp_AbsoluteCoordinate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AbsoluteCoordinate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AbsoluteCoordinate, SlateBlueprintLibrary_eventIsUnderLocation_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Geometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Geometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Geometry, SlateBlueprintLibrary_eventIsUnderLocation_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Geometry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/SlateBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Absolute coordinates could be either desktop or window space depending on what space the root of the widget hierarchy is in.\n\n@return true if the provided location in absolute coordinates is within the bounds of this geometry."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_LocalToAbsolute()
	{
		struct SlateBlueprintLibrary_eventLocalToAbsolute_Parms
		{
			FGeometry Geometry;
			FVector2D LocalCoordinate;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USlateBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LocalToAbsolute"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SlateBlueprintLibrary_eventLocalToAbsolute_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SlateBlueprintLibrary_eventLocalToAbsolute_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_LocalCoordinate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocalCoordinate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LocalCoordinate, SlateBlueprintLibrary_eventLocalToAbsolute_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Geometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Geometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Geometry, SlateBlueprintLibrary_eventLocalToAbsolute_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Geometry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/SlateBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Translates local coordinates into absolute coordinates\n\nAbsolute coordinates could be either desktop or window space depending on what space the root of the widget hierarchy is in.\n\n@return  Absolute coordinates"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlateBlueprintLibrary_LocalToViewport()
	{
		struct SlateBlueprintLibrary_eventLocalToViewport_Parms
		{
			UObject* WorldContextObject;
			FGeometry Geometry;
			FVector2D LocalCoordinate;
			FVector2D PixelPosition;
			FVector2D ViewportPosition;
		};
		UObject* Outer=Z_Construct_UClass_USlateBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LocalToViewport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(SlateBlueprintLibrary_eventLocalToViewport_Parms));
			UProperty* NewProp_ViewportPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ViewportPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ViewportPosition, SlateBlueprintLibrary_eventLocalToViewport_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_PixelPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PixelPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PixelPosition, SlateBlueprintLibrary_eventLocalToViewport_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_LocalCoordinate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocalCoordinate"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LocalCoordinate, SlateBlueprintLibrary_eventLocalToViewport_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Geometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Geometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Geometry, SlateBlueprintLibrary_eventLocalToViewport_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FGeometry());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, SlateBlueprintLibrary_eventLocalToViewport_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Geometry"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/SlateBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Translates local coordinate of the geometry provided into local viewport coordinates.\n\n@param PixelPosition The position in the game's viewport, usable for line traces and\nother uses where you need a coordinate in the space of viewport resolution units.\n@param ViewportPosition The position in the space of other widgets in the viewport.  Like if you wanted\nto add another widget to the viewport at the same position in viewport space as this location, this is\nwhat you would use."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USlateBlueprintLibrary_NoRegister()
	{
		return USlateBlueprintLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_USlateBlueprintLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_UMG();
			OuterClass = USlateBlueprintLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_USlateBlueprintLibrary_AbsoluteToLocal());
				OuterClass->LinkChild(Z_Construct_UFunction_USlateBlueprintLibrary_AbsoluteToViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_USlateBlueprintLibrary_GetLocalSize());
				OuterClass->LinkChild(Z_Construct_UFunction_USlateBlueprintLibrary_IsUnderLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_USlateBlueprintLibrary_LocalToAbsolute());
				OuterClass->LinkChild(Z_Construct_UFunction_USlateBlueprintLibrary_LocalToViewport());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USlateBlueprintLibrary_AbsoluteToLocal()); // 319386134
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USlateBlueprintLibrary_AbsoluteToViewport()); // 3146240986
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USlateBlueprintLibrary_GetLocalSize()); // 2578894423
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USlateBlueprintLibrary_IsUnderLocation()); // 1483074662
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USlateBlueprintLibrary_LocalToAbsolute()); // 3188488888
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USlateBlueprintLibrary_LocalToViewport()); // 717985321
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/SlateBlueprintLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/SlateBlueprintLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USlateBlueprintLibrary(Z_Construct_UClass_USlateBlueprintLibrary, TEXT("USlateBlueprintLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USlateBlueprintLibrary);
	UClass* Z_Construct_UClass_UUMGSequencePlayer_NoRegister()
	{
		return UUMGSequencePlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_UUMGSequencePlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_UMG();
			OuterClass = UUMGSequencePlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100088;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Animation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Animation, UUMGSequencePlayer), 0x0000000000000000, Z_Construct_UClass_UWidgetAnimation_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/UMGSequencePlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Animation/UMGSequencePlayer.h"));
				MetaData->SetValue(NewProp_Animation, TEXT("ModuleRelativePath"), TEXT("Public/Animation/UMGSequencePlayer.h"));
				MetaData->SetValue(NewProp_Animation, TEXT("ToolTip"), TEXT("Animation being played"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUMGSequencePlayer(Z_Construct_UClass_UUMGSequencePlayer, TEXT("UUMGSequencePlayer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUMGSequencePlayer);
	UClass* Z_Construct_UClass_UVisual_NoRegister()
	{
		return UVisual::StaticClass();
	}
	UClass* Z_Construct_UClass_UVisual()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_UMG();
			OuterClass = UVisual::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Visual.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Visual.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The base class for elements in UMG: slots and widgets."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVisual(Z_Construct_UClass_UVisual, TEXT("UVisual"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVisual);
	UClass* Z_Construct_UClass_UPanelSlot_NoRegister()
	{
		return UPanelSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UPanelSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UVisual();
			Z_Construct_UPackage_UMG();
			OuterClass = UPanelSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, UPanelSlot), 0x0000000000000000, Z_Construct_UClass_UWidget_NoRegister());
				UProperty* NewProp_Parent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Parent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Parent, UPanelSlot), 0x0000000000000000, Z_Construct_UClass_UPanelWidget_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/PanelSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The base class for all Slots in UMG."));
				MetaData->SetValue(NewProp_Content, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelSlot.h"));
				MetaData->SetValue(NewProp_Parent, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelSlot.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPanelSlot(Z_Construct_UClass_UPanelSlot, TEXT("UPanelSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPanelSlot);
	UFunction* Z_Construct_UFunction_UBorderSlot_SetHorizontalAlignment()
	{
		struct BorderSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBorderSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BorderSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, BorderSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Border Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorderSlot_SetPadding()
	{
		struct BorderSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UBorderSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BorderSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, BorderSlot_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Border Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorderSlot_SetVerticalAlignment()
	{
		struct BorderSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBorderSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BorderSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, BorderSlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Border Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBorderSlot_NoRegister()
	{
		return UBorderSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UBorderSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UBorderSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBorderSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorderSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorderSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UBorderSlot), 0x0000080000000001, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UBorderSlot), 0x0000080000000001, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, UBorderSlot), 0x0000080000000001, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorderSlot_SetHorizontalAlignment()); // 1434579392
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorderSlot_SetPadding()); // 90330897
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorderSlot_SetVerticalAlignment()); // 3657561292
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/BorderSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UBorderSlot, contains the widget displayed in a border's single slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Border Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Border Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Border Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/BorderSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBorderSlot(Z_Construct_UClass_UBorderSlot, TEXT("UBorderSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBorderSlot);
	UFunction* Z_Construct_UFunction_UButtonSlot_SetHorizontalAlignment()
	{
		struct ButtonSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UButtonSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ButtonSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, ButtonSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Button Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButtonSlot_SetPadding()
	{
		struct ButtonSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UButtonSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ButtonSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, ButtonSlot_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Button Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButtonSlot_SetVerticalAlignment()
	{
		struct ButtonSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UButtonSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ButtonSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, ButtonSlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Button Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UButtonSlot_NoRegister()
	{
		return UButtonSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UButtonSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UButtonSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UButtonSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UButtonSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UButtonSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UButtonSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UButtonSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, UButtonSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UButtonSlot_SetHorizontalAlignment()); // 3659114522
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UButtonSlot_SetPadding()); // 3156640610
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UButtonSlot_SetVerticalAlignment()); // 70490896
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ButtonSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UButtonSlot, contains the widget displayed in a button's single slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Button Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Button Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Button Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ButtonSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UButtonSlot(Z_Construct_UClass_UButtonSlot, TEXT("UButtonSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UButtonSlot);
	UScriptStruct* Z_Construct_UScriptStruct_FAnchorData()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FAnchorData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("AnchorData"), sizeof(FAnchorData), Get_Z_Construct_UScriptStruct_FAnchorData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AnchorData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FAnchorData>, EStructFlags(0x00000001));
			UProperty* NewProp_Alignment = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Alignment"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Alignment, FAnchorData), 0x0000000000000005, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Anchors = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Anchors"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Anchors, FAnchorData), 0x0000000000000005, Z_Construct_UScriptStruct_FAnchors());
			UProperty* NewProp_Offsets = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Offsets"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Offsets, FAnchorData), 0x0000000000000005, Z_Construct_UScriptStruct_FMargin());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(NewProp_Alignment, TEXT("Category"), TEXT("AnchorData"));
			MetaData->SetValue(NewProp_Alignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(NewProp_Alignment, TEXT("ToolTip"), TEXT("Alignment is the pivot point of the widget.  Starting in the upper left at (0,0),\nending in the lower right at (1,1).  Moving the alignment point allows you to move\nthe origin of the widget."));
			MetaData->SetValue(NewProp_Anchors, TEXT("Category"), TEXT("AnchorData"));
			MetaData->SetValue(NewProp_Anchors, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(NewProp_Anchors, TEXT("ToolTip"), TEXT("Anchors."));
			MetaData->SetValue(NewProp_Offsets, TEXT("Category"), TEXT("AnchorData"));
			MetaData->SetValue(NewProp_Offsets, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(NewProp_Offsets, TEXT("ToolTip"), TEXT("Offset."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FAnchorData_CRC() { return 3080391027U; }
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAlignment()
	{
		struct CanvasPanelSlot_eventGetAlignment_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CanvasPanelSlot_eventGetAlignment_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetAlignment_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the alignment on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAnchors()
	{
		struct CanvasPanelSlot_eventGetAnchors_Parms
		{
			FAnchors ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAnchors"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CanvasPanelSlot_eventGetAnchors_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetAnchors_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FAnchors());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the anchors on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetAutoSize()
	{
		struct CanvasPanelSlot_eventGetAutoSize_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAutoSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CanvasPanelSlot_eventGetAutoSize_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, CanvasPanelSlot_eventGetAutoSize_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, CanvasPanelSlot_eventGetAutoSize_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, CanvasPanelSlot_eventGetAutoSize_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets if the slot to be auto-sized"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetLayout()
	{
		struct CanvasPanelSlot_eventGetLayout_Parms
		{
			FAnchorData ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLayout"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CanvasPanelSlot_eventGetLayout_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetLayout_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FAnchorData());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the layout data of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetOffsets()
	{
		struct CanvasPanelSlot_eventGetOffsets_Parms
		{
			FMargin ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOffsets"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CanvasPanelSlot_eventGetOffsets_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetOffsets_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the offset data of the slot, which could be position and size, or margins depending on the anchor points"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetPosition()
	{
		struct CanvasPanelSlot_eventGetPosition_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CanvasPanelSlot_eventGetPosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetPosition_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the position of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetSize()
	{
		struct CanvasPanelSlot_eventGetSize_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CanvasPanelSlot_eventGetSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetSize_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the size of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_GetZOrder()
	{
		struct CanvasPanelSlot_eventGetZOrder_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetZOrder"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CanvasPanelSlot_eventGetZOrder_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanelSlot_eventGetZOrder_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the z-order on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAlignment()
	{
		struct CanvasPanelSlot_eventSetAlignment_Parms
		{
			FVector2D InAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(CanvasPanelSlot_eventSetAlignment_Parms));
			UProperty* NewProp_InAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAlignment"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InAlignment, CanvasPanelSlot_eventSetAlignment_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the alignment on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAnchors()
	{
		struct CanvasPanelSlot_eventSetAnchors_Parms
		{
			FAnchors InAnchors;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnchors"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CanvasPanelSlot_eventSetAnchors_Parms));
			UProperty* NewProp_InAnchors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAnchors"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InAnchors, CanvasPanelSlot_eventSetAnchors_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FAnchors());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the anchors on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetAutoSize()
	{
		struct CanvasPanelSlot_eventSetAutoSize_Parms
		{
			bool InbAutoSize;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAutoSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CanvasPanelSlot_eventSetAutoSize_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InbAutoSize, CanvasPanelSlot_eventSetAutoSize_Parms, bool);
			UProperty* NewProp_InbAutoSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InbAutoSize"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InbAutoSize, CanvasPanelSlot_eventSetAutoSize_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InbAutoSize, CanvasPanelSlot_eventSetAutoSize_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets if the slot to be auto-sized"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetLayout()
	{
		struct CanvasPanelSlot_eventSetLayout_Parms
		{
			FAnchorData InLayoutData;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLayout"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(CanvasPanelSlot_eventSetLayout_Parms));
			UProperty* NewProp_InLayoutData = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InLayoutData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InLayoutData, CanvasPanelSlot_eventSetLayout_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FAnchorData());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the layout data of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetMaximum()
	{
		struct CanvasPanelSlot_eventSetMaximum_Parms
		{
			FVector2D InMaximumAnchors;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaximum"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00820401, 65535, sizeof(CanvasPanelSlot_eventSetMaximum_Parms));
			UProperty* NewProp_InMaximumAnchors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMaximumAnchors"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InMaximumAnchors, CanvasPanelSlot_eventSetMaximum_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the anchors on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetMinimum()
	{
		struct CanvasPanelSlot_eventSetMinimum_Parms
		{
			FVector2D InMinimumAnchors;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinimum"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00820401, 65535, sizeof(CanvasPanelSlot_eventSetMinimum_Parms));
			UProperty* NewProp_InMinimumAnchors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinimumAnchors"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InMinimumAnchors, CanvasPanelSlot_eventSetMinimum_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the anchors on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetOffsets()
	{
		struct CanvasPanelSlot_eventSetOffsets_Parms
		{
			FMargin InOffset;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOffsets"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CanvasPanelSlot_eventSetOffsets_Parms));
			UProperty* NewProp_InOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InOffset, CanvasPanelSlot_eventSetOffsets_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the offset data of the slot, which could be position and size, or margins depending on the anchor points"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetPosition()
	{
		struct CanvasPanelSlot_eventSetPosition_Parms
		{
			FVector2D InPosition;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(CanvasPanelSlot_eventSetPosition_Parms));
			UProperty* NewProp_InPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPosition, CanvasPanelSlot_eventSetPosition_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the position of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetSize()
	{
		struct CanvasPanelSlot_eventSetSize_Parms
		{
			FVector2D InSize;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(CanvasPanelSlot_eventSetSize_Parms));
			UProperty* NewProp_InSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InSize, CanvasPanelSlot_eventSetSize_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the size of the slot"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCanvasPanelSlot_SetZOrder()
	{
		struct CanvasPanelSlot_eventSetZOrder_Parms
		{
			int32 InZOrder;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanelSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetZOrder"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CanvasPanelSlot_eventSetZOrder_Parms));
			UProperty* NewProp_InZOrder = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InZOrder"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InZOrder, CanvasPanelSlot_eventSetZOrder_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Canvas Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the z-order on the slot"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCanvasPanelSlot_NoRegister()
	{
		return UCanvasPanelSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UCanvasPanelSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UCanvasPanelSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetAnchors());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetAutoSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetLayout());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetOffsets());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_GetZOrder());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetAnchors());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetAutoSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetLayout());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetMaximum());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetMinimum());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetOffsets());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanelSlot_SetZOrder());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ZOrder = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ZOrder"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ZOrder, UCanvasPanelSlot), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoSize, UCanvasPanelSlot, bool);
				UProperty* NewProp_bAutoSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoSize"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoSize, UCanvasPanelSlot), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(bAutoSize, UCanvasPanelSlot), sizeof(bool), true);
				UProperty* NewProp_LayoutData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LayoutData"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LayoutData, UCanvasPanelSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FAnchorData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_GetAlignment()); // 2485765334
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_GetAnchors()); // 1628831903
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_GetAutoSize()); // 2906678538
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_GetLayout()); // 2324682263
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_GetOffsets()); // 2874433121
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_GetPosition()); // 2713615324
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_GetSize()); // 2529045762
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_GetZOrder()); // 1382803757
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_SetAlignment()); // 320504517
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_SetAnchors()); // 1129198960
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_SetAutoSize()); // 1299571034
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_SetLayout()); // 1720593310
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_SetMaximum()); // 107819905
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_SetMinimum()); // 2423311740
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_SetOffsets()); // 1609465110
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_SetPosition()); // 2196386973
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_SetSize()); // 4153458800
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanelSlot_SetZOrder()); // 203913579
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/CanvasPanelSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
				MetaData->SetValue(NewProp_ZOrder, TEXT("Category"), TEXT("Layout|Canvas Slot"));
				MetaData->SetValue(NewProp_ZOrder, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
				MetaData->SetValue(NewProp_ZOrder, TEXT("ToolTip"), TEXT("The order priority this widget is rendered in.  Higher values are rendered last (and so they will appear to be on top)."));
				MetaData->SetValue(NewProp_bAutoSize, TEXT("Category"), TEXT("Layout|Canvas Slot"));
				MetaData->SetValue(NewProp_bAutoSize, TEXT("DisplayName"), TEXT("Size To Content"));
				MetaData->SetValue(NewProp_bAutoSize, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
				MetaData->SetValue(NewProp_bAutoSize, TEXT("ToolTip"), TEXT("When AutoSize is true we use the widget's desired size"));
				MetaData->SetValue(NewProp_LayoutData, TEXT("Category"), TEXT("Layout|Canvas Slot"));
				MetaData->SetValue(NewProp_LayoutData, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanelSlot.h"));
				MetaData->SetValue(NewProp_LayoutData, TEXT("ToolTip"), TEXT("The anchoring information for the slot"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCanvasPanelSlot(Z_Construct_UClass_UCanvasPanelSlot, TEXT("UCanvasPanelSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCanvasPanelSlot);
	UFunction* Z_Construct_UFunction_UGridSlot_SetColumn()
	{
		struct GridSlot_eventSetColumn_Parms
		{
			int32 InColumn;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColumn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetColumn_Parms));
			UProperty* NewProp_InColumn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColumn"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InColumn, GridSlot_eventSetColumn_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the column index of the slot, this determines what cell the slot is in the panel"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetColumnSpan()
	{
		struct GridSlot_eventSetColumnSpan_Parms
		{
			int32 InColumnSpan;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColumnSpan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetColumnSpan_Parms));
			UProperty* NewProp_InColumnSpan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColumnSpan"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InColumnSpan, GridSlot_eventSetColumnSpan_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("How many columns this slot spans over"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetHorizontalAlignment()
	{
		struct GridSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, GridSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetRow()
	{
		struct GridSlot_eventSetRow_Parms
		{
			int32 InRow;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRow"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetRow_Parms));
			UProperty* NewProp_InRow = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRow"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InRow, GridSlot_eventSetRow_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the row index of the slot, this determines what cell the slot is in the panel"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetRowSpan()
	{
		struct GridSlot_eventSetRowSpan_Parms
		{
			int32 InRowSpan;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRowSpan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetRowSpan_Parms));
			UProperty* NewProp_InRowSpan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRowSpan"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InRowSpan, GridSlot_eventSetRowSpan_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("How many rows this this slot spans over"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGridSlot_SetVerticalAlignment()
	{
		struct GridSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, GridSlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGridSlot_NoRegister()
	{
		return UGridSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UGridSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UGridSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetColumn());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetColumnSpan());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetRow());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetRowSpan());
				OuterClass->LinkChild(Z_Construct_UFunction_UGridSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Nudge = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Nudge"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Nudge, UGridSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Layer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Layer"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Layer, UGridSlot), 0x0000000000000015);
				UProperty* NewProp_ColumnSpan = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColumnSpan"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ColumnSpan, UGridSlot), 0x0000000000000015);
				UProperty* NewProp_Column = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Column"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Column, UGridSlot), 0x0000000000000015);
				UProperty* NewProp_RowSpan = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RowSpan"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RowSpan, UGridSlot), 0x0000000000000015);
				UProperty* NewProp_Row = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Row"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Row, UGridSlot), 0x0000000000000015);
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UGridSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UGridSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGridSlot_SetColumn()); // 1481271351
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGridSlot_SetColumnSpan()); // 1740908917
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGridSlot_SetHorizontalAlignment()); // 275119409
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGridSlot_SetRow()); // 1814985625
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGridSlot_SetRowSpan()); // 1161529286
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGridSlot_SetVerticalAlignment()); // 2459276514
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/GridSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A slot for UGridPanel, these slots all share the same size as the largest slot\nin the grid."));
				MetaData->SetValue(NewProp_Nudge, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_Nudge, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Nudge, TEXT("ToolTip"), TEXT("Offset this slot's content by some amount; positive values offset to lower right"));
				MetaData->SetValue(NewProp_Layer, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_Layer, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Layer, TEXT("ToolTip"), TEXT("Positive values offset this cell to be hit-tested and drawn on top of others. Default is 0; i.e. no offset."));
				MetaData->SetValue(NewProp_ColumnSpan, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_ColumnSpan, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Column, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_Column, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Column, TEXT("ToolTip"), TEXT("The column index of the cell this slot is in"));
				MetaData->SetValue(NewProp_Column, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RowSpan, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_RowSpan, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Row, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_Row, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_Row, TEXT("ToolTip"), TEXT("The row index of the cell this slot is in"));
				MetaData->SetValue(NewProp_Row, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Grid Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGridSlot(Z_Construct_UClass_UGridSlot, TEXT("UGridSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGridSlot);
	UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetHorizontalAlignment()
	{
		struct HorizontalBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UHorizontalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HorizontalBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, HorizontalBoxSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetPadding()
	{
		struct HorizontalBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UHorizontalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HorizontalBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, HorizontalBoxSlot_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetSize()
	{
		struct HorizontalBoxSlot_eventSetSize_Parms
		{
			FSlateChildSize InSize;
		};
		UObject* Outer=Z_Construct_UClass_UHorizontalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HorizontalBoxSlot_eventSetSize_Parms));
			UProperty* NewProp_InSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InSize, HorizontalBoxSlot_eventSetSize_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FSlateChildSize());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UHorizontalBoxSlot_SetVerticalAlignment()
	{
		struct HorizontalBoxSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UHorizontalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HorizontalBoxSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, HorizontalBoxSlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UHorizontalBoxSlot_NoRegister()
	{
		return UHorizontalBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UHorizontalBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UHorizontalBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UHorizontalBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UHorizontalBoxSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UHorizontalBoxSlot_SetSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UHorizontalBoxSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UHorizontalBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UHorizontalBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Size"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Size, UHorizontalBoxSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateChildSize());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, UHorizontalBoxSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHorizontalBoxSlot_SetHorizontalAlignment()); // 4245081958
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHorizontalBoxSlot_SetPadding()); // 1830900319
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHorizontalBoxSlot_SetSize()); // 1192840362
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHorizontalBoxSlot_SetVerticalAlignment()); // 526827626
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(NewProp_Size, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
				MetaData->SetValue(NewProp_Size, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(NewProp_Size, TEXT("ToolTip"), TEXT("How much space this slot should occupy in the direction of the panel."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Horizontal Box Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The amount of padding between the slots parent and the content."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHorizontalBoxSlot(Z_Construct_UClass_UHorizontalBoxSlot, TEXT("UHorizontalBoxSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHorizontalBoxSlot);
	UFunction* Z_Construct_UFunction_UOverlaySlot_SetHorizontalAlignment()
	{
		struct OverlaySlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UOverlaySlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(OverlaySlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, OverlaySlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Overlay Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UOverlaySlot_SetPadding()
	{
		struct OverlaySlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UOverlaySlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(OverlaySlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, OverlaySlot_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Overlay Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UOverlaySlot_SetVerticalAlignment()
	{
		struct OverlaySlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UOverlaySlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(OverlaySlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, OverlaySlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Overlay Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UOverlaySlot_NoRegister()
	{
		return UOverlaySlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UOverlaySlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UOverlaySlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UOverlaySlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UOverlaySlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UOverlaySlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UOverlaySlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UOverlaySlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, UOverlaySlot), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UOverlaySlot_SetHorizontalAlignment()); // 1025877575
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UOverlaySlot_SetPadding()); // 1662177659
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UOverlaySlot_SetVerticalAlignment()); // 3287962209
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/OverlaySlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Slot for the UOverlay panel.  Allows content to be hover above other content."));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Overlay Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Overlay Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Overlay Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/OverlaySlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOverlaySlot(Z_Construct_UClass_UOverlaySlot, TEXT("UOverlaySlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOverlaySlot);
	UClass* Z_Construct_UClass_USafeZoneSlot_NoRegister()
	{
		return USafeZoneSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_USafeZoneSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = USafeZoneSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, USafeZoneSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_VAlign = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VAlign"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VAlign, USafeZoneSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HAlign = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HAlign"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HAlign, USafeZoneSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTitleSafe, USafeZoneSlot, bool);
				UProperty* NewProp_bIsTitleSafe = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsTitleSafe"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTitleSafe, USafeZoneSlot), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bIsTitleSafe, USafeZoneSlot), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/SafeZoneSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
				MetaData->SetValue(NewProp_VAlign, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_VAlign, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
				MetaData->SetValue(NewProp_HAlign, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_HAlign, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
				MetaData->SetValue(NewProp_bIsTitleSafe, TEXT("Category"), TEXT("SafeZone"));
				MetaData->SetValue(NewProp_bIsTitleSafe, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZoneSlot.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USafeZoneSlot(Z_Construct_UClass_USafeZoneSlot, TEXT("USafeZoneSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USafeZoneSlot);
	UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetHorizontalAlignment()
	{
		struct ScaleBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UScaleBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScaleBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, ScaleBoxSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetPadding()
	{
		struct ScaleBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UScaleBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScaleBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, ScaleBoxSlot_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScaleBoxSlot_SetVerticalAlignment()
	{
		struct ScaleBoxSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UScaleBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScaleBoxSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, ScaleBoxSlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UScaleBoxSlot_NoRegister()
	{
		return UScaleBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UScaleBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UScaleBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UScaleBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UScaleBoxSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UScaleBoxSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UScaleBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UScaleBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, UScaleBoxSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScaleBoxSlot_SetHorizontalAlignment()); // 2782046998
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScaleBoxSlot_SetPadding()); // 3378151706
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScaleBoxSlot_SetVerticalAlignment()); // 3228807396
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ScaleBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UScaleBoxSlot, contains the widget displayed in a button's single slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|ScaleBox Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScaleBoxSlot(Z_Construct_UClass_UScaleBoxSlot, TEXT("UScaleBoxSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScaleBoxSlot);
	UFunction* Z_Construct_UFunction_UScrollBoxSlot_SetHorizontalAlignment()
	{
		struct ScrollBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScrollBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, ScrollBoxSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|ScrollBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScrollBoxSlot_SetPadding()
	{
		struct ScrollBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScrollBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, ScrollBoxSlot_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|ScrollBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UScrollBoxSlot_NoRegister()
	{
		return UScrollBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UScrollBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UScrollBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBoxSlot_SetPadding());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UScrollBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, UScrollBoxSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScrollBoxSlot_SetHorizontalAlignment()); // 1854516682
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScrollBoxSlot_SetPadding()); // 3698080384
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ScrollBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UScrollBox, contains the widget that are scrollable"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|ScrollBox Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|ScrollBox Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScrollBoxSlot(Z_Construct_UClass_UScrollBoxSlot, TEXT("UScrollBoxSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScrollBoxSlot);
	UFunction* Z_Construct_UFunction_USizeBoxSlot_SetHorizontalAlignment()
	{
		struct SizeBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_USizeBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, SizeBoxSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBoxSlot_SetPadding()
	{
		struct SizeBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_USizeBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, SizeBoxSlot_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBoxSlot_SetVerticalAlignment()
	{
		struct SizeBoxSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_USizeBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBoxSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, SizeBoxSlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USizeBoxSlot_NoRegister()
	{
		return USizeBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_USizeBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = USizeBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_USizeBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBoxSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBoxSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, USizeBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, USizeBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, USizeBoxSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBoxSlot_SetHorizontalAlignment()); // 1819406625
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBoxSlot_SetPadding()); // 2896514837
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBoxSlot_SetVerticalAlignment()); // 4158879215
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/SizeBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the USizeBoxSlot, contains the widget displayed in a button's single slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|SizeBox Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USizeBoxSlot(Z_Construct_UClass_USizeBoxSlot, TEXT("USizeBoxSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USizeBoxSlot);
	UFunction* Z_Construct_UFunction_UUniformGridSlot_SetColumn()
	{
		struct UniformGridSlot_eventSetColumn_Parms
		{
			int32 InColumn;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColumn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridSlot_eventSetColumn_Parms));
			UProperty* NewProp_InColumn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColumn"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InColumn, UniformGridSlot_eventSetColumn_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the column index of the slot, this determines what cell the slot is in the panel"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridSlot_SetHorizontalAlignment()
	{
		struct UniformGridSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, UniformGridSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridSlot_SetRow()
	{
		struct UniformGridSlot_eventSetRow_Parms
		{
			int32 InRow;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRow"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridSlot_eventSetRow_Parms));
			UProperty* NewProp_InRow = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRow"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InRow, UniformGridSlot_eventSetRow_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the row index of the slot, this determines what cell the slot is in the panel"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridSlot_SetVerticalAlignment()
	{
		struct UniformGridSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, UniformGridSlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UUniformGridSlot_NoRegister()
	{
		return UUniformGridSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UUniformGridSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UUniformGridSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridSlot_SetColumn());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridSlot_SetRow());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Column = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Column"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Column, UUniformGridSlot), 0x0000000000000015);
				UProperty* NewProp_Row = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Row"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Row, UUniformGridSlot), 0x0000000000000015);
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UUniformGridSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UUniformGridSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUniformGridSlot_SetColumn()); // 1894325776
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUniformGridSlot_SetHorizontalAlignment()); // 2733612000
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUniformGridSlot_SetRow()); // 1043203160
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUniformGridSlot_SetVerticalAlignment()); // 4143439216
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/UniformGridSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A slot for UUniformGridPanel, these slots all share the same size as the largest slot\nin the grid."));
				MetaData->SetValue(NewProp_Column, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
				MetaData->SetValue(NewProp_Column, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
				MetaData->SetValue(NewProp_Column, TEXT("ToolTip"), TEXT("The column index of the cell this slot is in"));
				MetaData->SetValue(NewProp_Column, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Row, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
				MetaData->SetValue(NewProp_Row, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
				MetaData->SetValue(NewProp_Row, TEXT("ToolTip"), TEXT("The row index of the cell this slot is in"));
				MetaData->SetValue(NewProp_Row, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Uniform Grid Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUniformGridSlot(Z_Construct_UClass_UUniformGridSlot, TEXT("UUniformGridSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUniformGridSlot);
	UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetHorizontalAlignment()
	{
		struct VerticalBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UVerticalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VerticalBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, VerticalBoxSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetPadding()
	{
		struct VerticalBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UVerticalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VerticalBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, VerticalBoxSlot_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetSize()
	{
		struct VerticalBoxSlot_eventSetSize_Parms
		{
			FSlateChildSize InSize;
		};
		UObject* Outer=Z_Construct_UClass_UVerticalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VerticalBoxSlot_eventSetSize_Parms));
			UProperty* NewProp_InSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InSize, VerticalBoxSlot_eventSetSize_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FSlateChildSize());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVerticalBoxSlot_SetVerticalAlignment()
	{
		struct VerticalBoxSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UVerticalBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VerticalBoxSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, VerticalBoxSlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVerticalBoxSlot_NoRegister()
	{
		return UVerticalBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UVerticalBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UVerticalBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UVerticalBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UVerticalBoxSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UVerticalBoxSlot_SetSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UVerticalBoxSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UVerticalBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UVerticalBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Size"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Size, UVerticalBoxSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateChildSize());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, UVerticalBoxSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVerticalBoxSlot_SetHorizontalAlignment()); // 1992787131
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVerticalBoxSlot_SetPadding()); // 1222237418
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVerticalBoxSlot_SetSize()); // 806233506
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVerticalBoxSlot_SetVerticalAlignment()); // 2669909936
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/VerticalBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UVerticalBox, contains the widget that is flowed vertically"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Size, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
				MetaData->SetValue(NewProp_Size, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
				MetaData->SetValue(NewProp_Size, TEXT("ToolTip"), TEXT("How much space this slot should occupy in the direction of the panel."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Vertical Box Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVerticalBoxSlot(Z_Construct_UClass_UVerticalBoxSlot, TEXT("UVerticalBoxSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVerticalBoxSlot);
	UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetHorizontalAlignment()
	{
		struct WidgetSwitcherSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcherSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetSwitcherSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, WidgetSwitcherSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetPadding()
	{
		struct WidgetSwitcherSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcherSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetSwitcherSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, WidgetSwitcherSlot_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcherSlot_SetVerticalAlignment()
	{
		struct WidgetSwitcherSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcherSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetSwitcherSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, WidgetSwitcherSlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetSwitcherSlot_NoRegister()
	{
		return UWidgetSwitcherSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetSwitcherSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidgetSwitcherSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcherSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcherSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcherSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UWidgetSwitcherSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UWidgetSwitcherSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, UWidgetSwitcherSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetSwitcherSlot_SetHorizontalAlignment()); // 3945184860
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetSwitcherSlot_SetPadding()); // 233826710
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetSwitcherSlot_SetVerticalAlignment()); // 600705650
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WidgetSwitcherSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UWidgetSwitcher, contains the widget that is flowed vertically"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Widget Switcher Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcherSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetSwitcherSlot(Z_Construct_UClass_UWidgetSwitcherSlot, TEXT("UWidgetSwitcherSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetSwitcherSlot);
	UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetFillEmptySpace()
	{
		struct WrapBoxSlot_eventSetFillEmptySpace_Parms
		{
			bool InbFillEmptySpace;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFillEmptySpace"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBoxSlot_eventSetFillEmptySpace_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InbFillEmptySpace, WrapBoxSlot_eventSetFillEmptySpace_Parms, bool);
			UProperty* NewProp_InbFillEmptySpace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InbFillEmptySpace"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InbFillEmptySpace, WrapBoxSlot_eventSetFillEmptySpace_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InbFillEmptySpace, WrapBoxSlot_eventSetFillEmptySpace_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetFillSpanWhenLessThan()
	{
		struct WrapBoxSlot_eventSetFillSpanWhenLessThan_Parms
		{
			float InFillSpanWhenLessThan;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFillSpanWhenLessThan"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBoxSlot_eventSetFillSpanWhenLessThan_Parms));
			UProperty* NewProp_InFillSpanWhenLessThan = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFillSpanWhenLessThan"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InFillSpanWhenLessThan, WrapBoxSlot_eventSetFillSpanWhenLessThan_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetHorizontalAlignment()
	{
		struct WrapBoxSlot_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBoxSlot_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, WrapBoxSlot_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetPadding()
	{
		struct WrapBoxSlot_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBoxSlot_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, WrapBoxSlot_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWrapBoxSlot_SetVerticalAlignment()
	{
		struct WrapBoxSlot_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBoxSlot();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBoxSlot_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, WrapBoxSlot_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWrapBoxSlot_NoRegister()
	{
		return UWrapBoxSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UWrapBoxSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelSlot();
			Z_Construct_UPackage_UMG();
			OuterClass = UWrapBoxSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBoxSlot_SetFillEmptySpace());
				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBoxSlot_SetFillSpanWhenLessThan());
				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBoxSlot_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBoxSlot_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBoxSlot_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UWrapBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UWrapBoxSlot), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_FillSpanWhenLessThan = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FillSpanWhenLessThan"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FillSpanWhenLessThan, UWrapBoxSlot), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFillEmptySpace, UWrapBoxSlot, bool);
				UProperty* NewProp_bFillEmptySpace = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFillEmptySpace"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFillEmptySpace, UWrapBoxSlot), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bFillEmptySpace, UWrapBoxSlot), sizeof(bool), true);
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, UWrapBoxSlot), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWrapBoxSlot_SetFillEmptySpace()); // 307615755
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWrapBoxSlot_SetFillSpanWhenLessThan()); // 3130121057
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWrapBoxSlot_SetHorizontalAlignment()); // 3459216839
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWrapBoxSlot_SetPadding()); // 1095829664
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWrapBoxSlot_SetVerticalAlignment()); // 508952619
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WrapBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Slot for the UWrapBox, contains the widget that is flowed vertically"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the object horizontally."));
				MetaData->SetValue(NewProp_FillSpanWhenLessThan, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
				MetaData->SetValue(NewProp_FillSpanWhenLessThan, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(NewProp_FillSpanWhenLessThan, TEXT("ToolTip"), TEXT("If the total available space in the wrap panel drops below this threshold, this slot will attempt to fill an entire line.\nNOTE: A value of 0, denotes no filling will occur."));
				MetaData->SetValue(NewProp_bFillEmptySpace, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
				MetaData->SetValue(NewProp_bFillEmptySpace, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(NewProp_bFillEmptySpace, TEXT("ToolTip"), TEXT("Should this slot fill the remaining space on the line?"));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Layout|Wrap Box Slot"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBoxSlot.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWrapBoxSlot(Z_Construct_UClass_UWrapBoxSlot, TEXT("UWrapBoxSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWrapBoxSlot);
	UFunction* Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature()
	{
		struct Widget_eventOnPointerEvent_Parms
		{
			FGeometry MyGeometry;
			FPointerEvent MouseEvent;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnPointerEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00520000, 65535, sizeof(Widget_eventOnPointerEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventOnPointerEvent_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_MouseEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MouseEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MouseEvent, Widget_eventOnPointerEvent_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, Widget_eventOnPointerEvent_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_OnReply__DelegateSignature()
	{
		struct Widget_eventOnReply_Parms
		{
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnReply__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventOnReply_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventOnReply_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Events"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForObject__DelegateSignature()
	{
		struct Widget_eventGenerateWidgetForObject_Parms
		{
			UObject* Item;
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GenerateWidgetForObject__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGenerateWidgetForObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGenerateWidgetForObject_Parms), 0x0000000000000580, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Item = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Item, Widget_eventGenerateWidgetForObject_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForString__DelegateSignature()
	{
		struct Widget_eventGenerateWidgetForString_Parms
		{
			FString Item;
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GenerateWidgetForString__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGenerateWidgetForString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGenerateWidgetForString_Parms), 0x0000000000000580, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Item = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Item, Widget_eventGenerateWidgetForString_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Events"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetWidget__DelegateSignature()
	{
		struct Widget_eventGetWidget_Parms
		{
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetWidget__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGetWidget_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetWidget_Parms), 0x0000000000000580, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetCheckBoxState__DelegateSignature()
	{
		struct Widget_eventGetCheckBoxState_Parms
		{
			TEnumAsByte<ECheckBoxState> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCheckBoxState__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGetCheckBoxState_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetCheckBoxState_Parms), 0x0000000000000580, Z_Construct_UEnum_SlateCore_ECheckBoxState());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetMouseCursor__DelegateSignature()
	{
		struct Widget_eventGetMouseCursor_Parms
		{
			TEnumAsByte<EMouseCursor::Type> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMouseCursor__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGetMouseCursor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetMouseCursor_Parms), 0x0000000000000580, Z_Construct_UEnum_CoreUObject_EMouseCursor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetSlateVisibility__DelegateSignature()
	{
		struct Widget_eventGetSlateVisibility_Parms
		{
			TEnumAsByte<ESlateVisibility> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSlateVisibility__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGetSlateVisibility_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetSlateVisibility_Parms), 0x0000000000000580, Z_Construct_UEnum_UMG_ESlateVisibility());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature()
	{
		struct Widget_eventGetSlateBrush_Parms
		{
			FSlateBrush ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSlateBrush__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGetSlateBrush_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetSlateBrush_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature()
	{
		struct Widget_eventGetLinearColor_Parms
		{
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLinearColor__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00920000, 65535, sizeof(Widget_eventGetLinearColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetLinearColor_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetSlateColor__DelegateSignature()
	{
		struct Widget_eventGetSlateColor_Parms
		{
			FSlateColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSlateColor__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGetSlateColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetSlateColor_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FSlateColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature()
	{
		struct Widget_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetText_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetInt32__DelegateSignature()
	{
		struct Widget_eventGetInt32_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInt32__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGetInt32_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetInt32_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature()
	{
		struct Widget_eventGetFloat_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetFloat__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGetFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetFloat_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UWidget_GetBool__DelegateSignature()
	{
		struct Widget_eventGetBool_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBool__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(Widget_eventGetBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Widget_eventGetBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Widget_eventGetBool_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Widget_eventGetBool_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Common Bindings - If you add any new common binding, you must provide a UPropertyBinder for it.\n                  all primitive binding in UMG goes through native binding evaluators to prevent\n                  thunking through the VM."));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_UMG_EWidgetDesignFlags()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EWidgetDesignFlags_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EWidgetDesignFlags"), 0, Get_Z_Construct_UEnum_UMG_EWidgetDesignFlags_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EWidgetDesignFlags"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetDesignFlags::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetDesignFlags::Designing")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetDesignFlags::ShowOutline")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetDesignFlags::EWidgetDesignFlags_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Flags used by the widget designer."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EWidgetDesignFlags_CRC() { return 1055852479U; }
	UFunction* Z_Construct_UFunction_UWidget_ForceLayoutPrepass()
	{
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ForceLayoutPrepass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Forces a pre-pass.  A pre-pass caches the desired size of the widget hierarchy owned by this widget.\nOne pre-pass is already happens for every widget before Tick occurs.  You only need to perform another\npre-pass if you are adding child widgets this frame and want them to immediately be visible this frame."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_ForceVolatile()
	{
		struct Widget_eventForceVolatile_Parms
		{
			bool bForce;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ForceVolatile"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Widget_eventForceVolatile_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForce, Widget_eventForceVolatile_Parms, bool);
			UProperty* NewProp_bForce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bForce"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForce, Widget_eventForceVolatile_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bForce, Widget_eventForceVolatile_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the forced volatility of the widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_GetDesiredSize()
	{
		struct Widget_eventGetDesiredSize_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDesiredSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(Widget_eventGetDesiredSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetDesiredSize_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the widgets desired size.\nNOTE: The underlying Slate widget must exist and be valid, also at least one pre-pass must\n      have occurred before this value will be of any use.\n\n@return The widget's desired size"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_GetIsEnabled()
	{
		struct Widget_eventGetIsEnabled_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIsEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventGetIsEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Widget_eventGetIsEnabled_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Widget_eventGetIsEnabled_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Widget_eventGetIsEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the current enabled status of the widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_GetParent()
	{
		struct Widget_eventGetParent_Parms
		{
			UPanelWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetParent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventGetParent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetParent_Parms), 0x0000000000000580, Z_Construct_UClass_UPanelWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the parent widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_GetVisibility()
	{
		struct Widget_eventGetVisibility_Parms
		{
			TEnumAsByte<ESlateVisibility> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVisibility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventGetVisibility_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, Widget_eventGetVisibility_Parms), 0x0000000000000580, Z_Construct_UEnum_UMG_ESlateVisibility());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the current visibility of the widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_HasAnyUserFocus()
	{
		struct Widget_eventHasAnyUserFocus_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasAnyUserFocus"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventHasAnyUserFocus_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Widget_eventHasAnyUserFocus_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Widget_eventHasAnyUserFocus_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Widget_eventHasAnyUserFocus_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if this widget is focused by any user."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_HasFocusedDescendants()
	{
		struct Widget_eventHasFocusedDescendants_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasFocusedDescendants"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventHasFocusedDescendants_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Widget_eventHasFocusedDescendants_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Widget_eventHasFocusedDescendants_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Widget_eventHasFocusedDescendants_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("HasAnyUserFocusedDescendants"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if any descendant widget is focused by any user."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_HasKeyboardFocus()
	{
		struct Widget_eventHasKeyboardFocus_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasKeyboardFocus"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventHasKeyboardFocus_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Widget_eventHasKeyboardFocus_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Widget_eventHasKeyboardFocus_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Widget_eventHasKeyboardFocus_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks to see if this widget currently has the keyboard focus\n\n@return  True if this widget has keyboard focus"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_HasMouseCapture()
	{
		struct Widget_eventHasMouseCapture_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasMouseCapture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventHasMouseCapture_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Widget_eventHasMouseCapture_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Widget_eventHasMouseCapture_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Widget_eventHasMouseCapture_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks to see if this widget is the current mouse captor\n@return  True if this widget has captured the mouse"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_HasUserFocus()
	{
		struct Widget_eventHasUserFocus_Parms
		{
			APlayerController* PlayerController;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasUserFocus"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventHasUserFocus_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Widget_eventHasUserFocus_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Widget_eventHasUserFocus_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Widget_eventHasUserFocus_Parms), sizeof(bool), true);
			UProperty* NewProp_PlayerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerController"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PlayerController, Widget_eventHasUserFocus_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if this widget is focused by a specific user."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_HasUserFocusedDescendants()
	{
		struct Widget_eventHasUserFocusedDescendants_Parms
		{
			APlayerController* PlayerController;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasUserFocusedDescendants"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventHasUserFocusedDescendants_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Widget_eventHasUserFocusedDescendants_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Widget_eventHasUserFocusedDescendants_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Widget_eventHasUserFocusedDescendants_Parms), sizeof(bool), true);
			UProperty* NewProp_PlayerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerController"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PlayerController, Widget_eventHasUserFocusedDescendants_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if any descendant widget is focused by a specific user."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_InvalidateLayoutAndVolatility()
	{
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InvalidateLayoutAndVolatility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Invalidates the widget from the view of a layout caching widget that may own this widget.\nwill force the owning widget to redraw and cache children on the next paint pass."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_IsHovered()
	{
		struct Widget_eventIsHovered_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsHovered"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventIsHovered_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Widget_eventIsHovered_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Widget_eventIsHovered_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Widget_eventIsHovered_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if the widget is currently being hovered by a pointer device"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_IsVisible()
	{
		struct Widget_eventIsVisible_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsVisible"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Widget_eventIsVisible_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Widget_eventIsVisible_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Widget_eventIsVisible_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Widget_eventIsVisible_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if the widget is Visible, HitTestInvisible or SelfHitTestInvisible."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_RemoveFromParent()
	{
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveFromParent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes the widget from its parent widget.  If this widget was added to the player's screen or the viewport\nit will also be removed from those containers."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_ResetCursor()
	{
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ResetCursor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Resets the cursor to use on the widget, removing any customization for it."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetCursor()
	{
		struct Widget_eventSetCursor_Parms
		{
			TEnumAsByte<EMouseCursor::Type> InCursor;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCursor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Widget_eventSetCursor_Parms));
			UProperty* NewProp_InCursor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InCursor"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InCursor, Widget_eventSetCursor_Parms), 0x0000000000000080, Z_Construct_UEnum_CoreUObject_EMouseCursor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the cursor to show over the widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetIsEnabled()
	{
		struct Widget_eventSetIsEnabled_Parms
		{
			bool bInIsEnabled;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsEnabled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Widget_eventSetIsEnabled_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInIsEnabled, Widget_eventSetIsEnabled_Parms, bool);
			UProperty* NewProp_bInIsEnabled = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInIsEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInIsEnabled, Widget_eventSetIsEnabled_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInIsEnabled, Widget_eventSetIsEnabled_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the current enabled status of the widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetKeyboardFocus()
	{
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetKeyboardFocus"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the focus to this widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetRenderAngle()
	{
		struct Widget_eventSetRenderAngle_Parms
		{
			float Angle;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRenderAngle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Widget_eventSetRenderAngle_Parms));
			UProperty* NewProp_Angle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Angle"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Angle, Widget_eventSetRenderAngle_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetRenderScale()
	{
		struct Widget_eventSetRenderScale_Parms
		{
			FVector2D Scale;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRenderScale"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Widget_eventSetRenderScale_Parms));
			UProperty* NewProp_Scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Scale"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Scale, Widget_eventSetRenderScale_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetRenderShear()
	{
		struct Widget_eventSetRenderShear_Parms
		{
			FVector2D Shear;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRenderShear"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Widget_eventSetRenderShear_Parms));
			UProperty* NewProp_Shear = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Shear"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Shear, Widget_eventSetRenderShear_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetRenderTransform()
	{
		struct Widget_eventSetRenderTransform_Parms
		{
			FWidgetTransform InTransform;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRenderTransform"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Widget_eventSetRenderTransform_Parms));
			UProperty* NewProp_InTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InTransform, Widget_eventSetRenderTransform_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FWidgetTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetRenderTransformPivot()
	{
		struct Widget_eventSetRenderTransformPivot_Parms
		{
			FVector2D Pivot;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRenderTransformPivot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Widget_eventSetRenderTransformPivot_Parms));
			UProperty* NewProp_Pivot = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Pivot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Pivot, Widget_eventSetRenderTransformPivot_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetRenderTranslation()
	{
		struct Widget_eventSetRenderTranslation_Parms
		{
			FVector2D Translation;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRenderTranslation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Widget_eventSetRenderTranslation_Parms));
			UProperty* NewProp_Translation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Translation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Translation, Widget_eventSetRenderTranslation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Transform"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetToolTip()
	{
		struct Widget_eventSetToolTip_Parms
		{
			UWidget* Widget;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetToolTip"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Widget_eventSetToolTip_Parms));
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Widget, Widget_eventSetToolTip_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets a custom widget as the tooltip of the widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetToolTipText()
	{
		struct Widget_eventSetToolTipText_Parms
		{
			FText InToolTipText;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetToolTipText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(Widget_eventSetToolTipText_Parms));
			UProperty* NewProp_InToolTipText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InToolTipText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InToolTipText, Widget_eventSetToolTipText_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the tooltip text for the widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetUserFocus()
	{
		struct Widget_eventSetUserFocus_Parms
		{
			APlayerController* PlayerController;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetUserFocus"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Widget_eventSetUserFocus_Parms));
			UProperty* NewProp_PlayerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerController"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PlayerController, Widget_eventSetUserFocus_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the focus to this widget for a specific user"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidget_SetVisibility()
	{
		struct Widget_eventSetVisibility_Parms
		{
			TEnumAsByte<ESlateVisibility> InVisibility;
		};
		UObject* Outer=Z_Construct_UClass_UWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVisibility"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Widget_eventSetVisibility_Parms));
			UProperty* NewProp_InVisibility = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVisibility"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVisibility, Widget_eventSetVisibility_Parms), 0x0000000000000080, Z_Construct_UEnum_UMG_ESlateVisibility());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the visibility of the widget."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidget_NoRegister()
	{
		return UWidget::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UVisual();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_ForceLayoutPrepass());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_ForceVolatile());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForObject__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForString__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetBool__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetCheckBoxState__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_GetDesiredSize());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetInt32__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_GetIsEnabled());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetMouseCursor__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_GetParent());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetSlateColor__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetSlateVisibility__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_GetVisibility());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_GetWidget__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_HasAnyUserFocus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_HasFocusedDescendants());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_HasKeyboardFocus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_HasMouseCapture());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_HasUserFocus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_HasUserFocusedDescendants());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_InvalidateLayoutAndVolatility());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_IsHovered());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_IsVisible());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UWidget_OnReply__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_RemoveFromParent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_ResetCursor());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetCursor());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetIsEnabled());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetKeyboardFocus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetRenderAngle());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetRenderScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetRenderShear());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetRenderTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetRenderTransformPivot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetRenderTranslation());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetToolTip());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetToolTipText());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetUserFocus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidget_SetVisibility());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_DesignerFlags = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DesignerFlags"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DesignerFlags, UWidget), 0x0000000800002000, Z_Construct_UEnum_UMG_EWidgetDesignFlags());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_NativeBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NativeBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(NativeBindings, UWidget), 0x0000080000002000);
				UProperty* NewProp_NativeBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NativeBindings, TEXT("NativeBindings"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UPropertyBinding_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_WidgetGeneratedBy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetGeneratedBy"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WidgetGeneratedBy, UWidget), 0x0000000800002000, Z_Construct_UClass_UObject_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bExpandedInDesigner, UWidget, bool);
				UProperty* NewProp_bExpandedInDesigner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bExpandedInDesigner"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bExpandedInDesigner, UWidget), 0x0000000800000000, CPP_BOOL_PROPERTY_BITMASK(bExpandedInDesigner, UWidget), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHiddenInDesigner, UWidget, bool);
				UProperty* NewProp_bHiddenInDesigner = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHiddenInDesigner"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHiddenInDesigner, UWidget), 0x0000000800000000, CPP_BOOL_PROPERTY_BITMASK(bHiddenInDesigner, UWidget), sizeof(bool), true);
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Navigation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Navigation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Navigation, UWidget), 0x000200000008001d, Z_Construct_UClass_UWidgetNavigation_NoRegister());
				UProperty* NewProp_RenderTransformPivot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderTransformPivot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RenderTransformPivot, UWidget), 0x0000000000000015, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_RenderTransform = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderTransform"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RenderTransform, UWidget), 0x0000000000000015, Z_Construct_UScriptStruct_FWidgetTransform());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsVolatile, UWidget, bool);
				UProperty* NewProp_bIsVolatile = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsVolatile"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsVolatile, UWidget), 0x0000080000000015, CPP_BOOL_PROPERTY_BITMASK(bIsVolatile, UWidget), sizeof(bool), true);
				UProperty* NewProp_Cursor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Cursor"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Cursor, UWidget), 0x0000040000000015, Z_Construct_UEnum_CoreUObject_EMouseCursor());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_Cursor, UWidget, uint8);
				UProperty* NewProp_bOverride_Cursor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_Cursor"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_Cursor, UWidget), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_Cursor, UWidget), sizeof(uint8), false);
				UProperty* NewProp_VisibilityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VisibilityDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(VisibilityDelegate, UWidget), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetSlateVisibility__DelegateSignature());
				UProperty* NewProp_Visibility = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Visibility"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Visibility, UWidget), 0x0000000000000001, Z_Construct_UEnum_UMG_ESlateVisibility());
				UProperty* NewProp_Visiblity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Visiblity"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Visiblity_DEPRECATED, UWidget), 0x0000000020000000, Z_Construct_UEnum_UMG_ESlateVisibility());
				UProperty* NewProp_ToolTipWidgetDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ToolTipWidgetDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(ToolTipWidgetDelegate, UWidget), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetWidget__DelegateSignature());
				UProperty* NewProp_ToolTipWidget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ToolTipWidget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ToolTipWidget, UWidget), 0x0000040000000015, Z_Construct_UClass_UWidget_NoRegister());
				UProperty* NewProp_ToolTipTextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ToolTipTextDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(ToolTipTextDelegate, UWidget), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_ToolTipText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ToolTipText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ToolTipText, UWidget), 0x0000000000000015);
				UProperty* NewProp_bIsEnabledDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsEnabledDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(bIsEnabledDelegate, UWidget), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetBool__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsEnabled, UWidget, bool);
				UProperty* NewProp_bIsEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsEnabled, UWidget), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bIsEnabled, UWidget), sizeof(bool), true);
				UProperty* NewProp_Slot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Slot"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Slot, UWidget), 0x000200000008001d, Z_Construct_UClass_UPanelSlot_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCreatedByConstructionScript, UWidget, bool);
				UProperty* NewProp_bCreatedByConstructionScript = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCreatedByConstructionScript"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCreatedByConstructionScript, UWidget), 0x0000000000002000, CPP_BOOL_PROPERTY_BITMASK(bCreatedByConstructionScript, UWidget), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsVariable, UWidget, bool);
				UProperty* NewProp_bIsVariable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsVariable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsVariable, UWidget), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsVariable, UWidget), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_ForceLayoutPrepass()); // 786223107
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_ForceVolatile()); // 2143632063
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForObject__DelegateSignature()); // 890822112
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForString__DelegateSignature()); // 4033804787
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetBool__DelegateSignature()); // 274275269
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetCheckBoxState__DelegateSignature()); // 3962108130
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_GetDesiredSize()); // 626549990
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature()); // 1001176990
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetInt32__DelegateSignature()); // 444320385
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_GetIsEnabled()); // 245313354
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature()); // 1001599904
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetMouseCursor__DelegateSignature()); // 2668278148
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_GetParent()); // 3391841403
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature()); // 1474300121
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetSlateColor__DelegateSignature()); // 1108320662
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetSlateVisibility__DelegateSignature()); // 422134603
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature()); // 2656284693
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_GetVisibility()); // 2527771753
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_GetWidget__DelegateSignature()); // 4183491342
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_HasAnyUserFocus()); // 3561208406
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_HasFocusedDescendants()); // 580135046
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_HasKeyboardFocus()); // 2939376136
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_HasMouseCapture()); // 1142613104
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_HasUserFocus()); // 3530723382
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_HasUserFocusedDescendants()); // 555062162
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_InvalidateLayoutAndVolatility()); // 79524540
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_IsHovered()); // 688703444
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_IsVisible()); // 2283206270
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature()); // 3660405143
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UWidget_OnReply__DelegateSignature()); // 4251178443
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_RemoveFromParent()); // 938580322
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_ResetCursor()); // 669398878
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetCursor()); // 2307783478
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetIsEnabled()); // 808547535
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetKeyboardFocus()); // 1902819858
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetRenderAngle()); // 1040984528
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetRenderScale()); // 2251521094
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetRenderShear()); // 2370890884
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetRenderTransform()); // 905010528
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetRenderTransformPivot()); // 1638042642
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetRenderTranslation()); // 1338506639
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetToolTip()); // 341414856
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetToolTipText()); // 3891114465
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetUserFocus()); // 3412599188
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidget_SetVisibility()); // 4181102787
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Widget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("This is the base class for all wrapped Slate controls that are exposed to UObjects."));
				MetaData->SetValue(NewProp_DesignerFlags, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_DesignerFlags, TEXT("ToolTip"), TEXT("Any flags used by the designer at edit time."));
				MetaData->SetValue(NewProp_NativeBindings, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_NativeBindings, TEXT("ToolTip"), TEXT("Native property bindings."));
				MetaData->SetValue(NewProp_WidgetGeneratedBy, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_WidgetGeneratedBy, TEXT("ToolTip"), TEXT("Stores a reference to the asset responsible for this widgets construction."));
				MetaData->SetValue(NewProp_bExpandedInDesigner, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_bExpandedInDesigner, TEXT("ToolTip"), TEXT("Stores the design time flag setting if the widget is expanded inside the designer"));
				MetaData->SetValue(NewProp_bHiddenInDesigner, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_bHiddenInDesigner, TEXT("ToolTip"), TEXT("Stores the design time flag setting if the widget is hidden inside the designer"));
				MetaData->SetValue(NewProp_Navigation, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Navigation, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Navigation, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_Navigation, TEXT("ToolTip"), TEXT("The navigation object for this widget is optionally created if the user has configured custom\nnavigation rules for this widget in the widget designer.  Those rules determine how navigation transitions\ncan occur between widgets."));
				MetaData->SetValue(NewProp_RenderTransformPivot, TEXT("Category"), TEXT("Render Transform"));
				MetaData->SetValue(NewProp_RenderTransformPivot, TEXT("DisplayName"), TEXT("Pivot"));
				MetaData->SetValue(NewProp_RenderTransformPivot, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_RenderTransformPivot, TEXT("ToolTip"), TEXT("The render transform pivot controls the location about which transforms are applied.\nThis value is a normalized coordinate about which things like rotations will occur."));
				MetaData->SetValue(NewProp_RenderTransform, TEXT("Category"), TEXT("Render Transform"));
				MetaData->SetValue(NewProp_RenderTransform, TEXT("DisplayName"), TEXT("Transform"));
				MetaData->SetValue(NewProp_RenderTransform, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_RenderTransform, TEXT("ToolTip"), TEXT("The render transform of the widget allows for arbitrary 2D transforms to be applied to the widget."));
				MetaData->SetValue(NewProp_bIsVolatile, TEXT("Category"), TEXT("Performance"));
				MetaData->SetValue(NewProp_bIsVolatile, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_bIsVolatile, TEXT("ToolTip"), TEXT("If true prevents the widget or its child's geometry or layout information from being cached.  If this widget\nchanges every frame, but you want it to still be in an invalidation panel you should make it as volatile\ninstead of invalidating it every frame, which would prevent the invalidation panel from actually\never caching anything."));
				MetaData->SetValue(NewProp_Cursor, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_Cursor, TEXT("editcondition"), TEXT("bOverride_Cursor"));
				MetaData->SetValue(NewProp_Cursor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_Cursor, TEXT("ToolTip"), TEXT("The cursor to show when the mouse is over the widget"));
				MetaData->SetValue(NewProp_bOverride_Cursor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_VisibilityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_VisibilityDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for Visibility"));
				MetaData->SetValue(NewProp_Visibility, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_Visibility, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_Visibility, TEXT("ToolTip"), TEXT("The visibility of the widget"));
				MetaData->SetValue(NewProp_Visiblity, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_Visiblity, TEXT("ToolTip"), TEXT("The visibility of the widget"));
				MetaData->SetValue(NewProp_ToolTipWidgetDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_ToolTipWidgetDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for ToolTipWidget"));
				MetaData->SetValue(NewProp_ToolTipWidget, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_ToolTipWidget, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_ToolTipWidget, TEXT("ToolTip"), TEXT("Tooltip widget to show when the user hovers over the widget with the mouse"));
				MetaData->SetValue(NewProp_ToolTipTextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_ToolTipTextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for ToolTipText"));
				MetaData->SetValue(NewProp_ToolTipText, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_ToolTipText, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_ToolTipText, TEXT("MultiLine"), TEXT("TRUE"));
				MetaData->SetValue(NewProp_ToolTipText, TEXT("ToolTip"), TEXT("Tooltip text to show when the user hovers over the widget with the mouse"));
				MetaData->SetValue(NewProp_bIsEnabledDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_bIsEnabledDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for bIsEnabled"));
				MetaData->SetValue(NewProp_bIsEnabled, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_bIsEnabled, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_bIsEnabled, TEXT("ToolTip"), TEXT("Sets whether this widget can be modified interactively by the user"));
				MetaData->SetValue(NewProp_Slot, TEXT("Category"), TEXT("Layout"));
				MetaData->SetValue(NewProp_Slot, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Slot, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_Slot, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_Slot, TEXT("ToolTip"), TEXT("The parent slot of the UWidget.  Allows us to easily inline edit the layout controlling this widget."));
				MetaData->SetValue(NewProp_bCreatedByConstructionScript, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_bCreatedByConstructionScript, TEXT("ToolTip"), TEXT("Flag if the Widget was created from a blueprint"));
				MetaData->SetValue(NewProp_bIsVariable, TEXT("ModuleRelativePath"), TEXT("Public/Components/Widget.h"));
				MetaData->SetValue(NewProp_bIsVariable, TEXT("ToolTip"), TEXT("Allows controls to be exposed as variables in a blueprint.  Not all controls need to be exposed\nas variables, so this allows only the most useful ones to end up being exposed."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidget(Z_Construct_UClass_UWidget, TEXT("UWidget"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidget);
	UFunction* Z_Construct_UFunction_UCircularThrobber_SetNumberOfPieces()
	{
		struct CircularThrobber_eventSetNumberOfPieces_Parms
		{
			int32 InNumberOfPieces;
		};
		UObject* Outer=Z_Construct_UClass_UCircularThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetNumberOfPieces"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CircularThrobber_eventSetNumberOfPieces_Parms));
			UProperty* NewProp_InNumberOfPieces = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InNumberOfPieces"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InNumberOfPieces, CircularThrobber_eventSetNumberOfPieces_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets how many pieces there are."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCircularThrobber_SetPeriod()
	{
		struct CircularThrobber_eventSetPeriod_Parms
		{
			float InPeriod;
		};
		UObject* Outer=Z_Construct_UClass_UCircularThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPeriod"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CircularThrobber_eventSetPeriod_Parms));
			UProperty* NewProp_InPeriod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPeriod"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPeriod, CircularThrobber_eventSetPeriod_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the amount of time for a full circle (in seconds)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCircularThrobber_SetRadius()
	{
		struct CircularThrobber_eventSetRadius_Parms
		{
			float InRadius;
		};
		UObject* Outer=Z_Construct_UClass_UCircularThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetRadius"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CircularThrobber_eventSetRadius_Parms));
			UProperty* NewProp_InRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InRadius, CircularThrobber_eventSetRadius_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the radius of the circle."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCircularThrobber_NoRegister()
	{
		return UCircularThrobber::StaticClass();
	}
	UClass* Z_Construct_UClass_UCircularThrobber()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UCircularThrobber::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCircularThrobber_SetNumberOfPieces());
				OuterClass->LinkChild(Z_Construct_UFunction_UCircularThrobber_SetPeriod());
				OuterClass->LinkChild(Z_Construct_UFunction_UCircularThrobber_SetRadius());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Image = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Image"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Image, UCircularThrobber), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateBrush());
				UProperty* NewProp_PieceImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PieceImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PieceImage_DEPRECATED, UCircularThrobber), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, UCircularThrobber), 0x0000000000000015);
				UProperty* NewProp_Period = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Period"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Period, UCircularThrobber), 0x0000000000000015);
				UProperty* NewProp_NumberOfPieces = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumberOfPieces"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumberOfPieces, UCircularThrobber), 0x0000000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCircularThrobber_SetNumberOfPieces()); // 1027138328
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCircularThrobber_SetPeriod()); // 3961748739
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCircularThrobber_SetRadius()); // 2728243609
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/CircularThrobber.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A throbber widget that orients images in a spinning circle.\n\n\x25cf No Children\n\x25cf Spinner Progress"));
				MetaData->SetValue(NewProp_Image, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Image, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_PieceImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_PieceImage, TEXT("ToolTip"), TEXT("Image to use for each segment of the throbber"));
				MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_Radius, TEXT("ToolTip"), TEXT("The radius of the circle"));
				MetaData->SetValue(NewProp_Period, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Period, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_Period, TEXT("ToolTip"), TEXT("The amount of time for a full circle (in seconds)"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ClampMax"), TEXT("25"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ModuleRelativePath"), TEXT("Public/Components/CircularThrobber.h"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ToolTip"), TEXT("How many pieces there are"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("UIMax"), TEXT("25"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("UIMin"), TEXT("1"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCircularThrobber(Z_Construct_UClass_UCircularThrobber, TEXT("UCircularThrobber"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCircularThrobber);
	UClass* Z_Construct_UClass_UComboBox_NoRegister()
	{
		return UComboBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UComboBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UComboBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnGenerateWidgetEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnGenerateWidgetEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnGenerateWidgetEvent, UComboBox), 0x0000000000080001, Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForObject__DelegateSignature());
				UProperty* NewProp_Items = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Items"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Items, UComboBox), 0x0000000000000005);
				UProperty* NewProp_Items_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Items, TEXT("Items"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("ComboBox (Object)"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ComboBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The combobox allows you to display a list of options to the user in a dropdown menu for them to select one."));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBox.h"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("ToolTip"), TEXT("Called when the widget is needed for the item."));
				MetaData->SetValue(NewProp_Items, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Items, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBox.h"));
				MetaData->SetValue(NewProp_Items, TEXT("ToolTip"), TEXT("The list of items to be displayed on the combobox."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UComboBox(Z_Construct_UClass_UComboBox, TEXT("UComboBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UComboBox);
	UFunction* Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnOpeningEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature()
	{
		struct ComboBoxString_eventOnSelectionChangedEvent_Parms
		{
			FString SelectedItem;
			TEnumAsByte<ESelectInfo::Type> SelectionType;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnSelectionChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(ComboBoxString_eventOnSelectionChangedEvent_Parms));
			UProperty* NewProp_SelectionType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SelectionType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SelectionType, ComboBoxString_eventOnSelectionChangedEvent_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_ESelectInfo());
			UProperty* NewProp_SelectedItem = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SelectedItem"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SelectedItem, ComboBoxString_eventOnSelectionChangedEvent_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_AddOption()
	{
		struct ComboBoxString_eventAddOption_Parms
		{
			FString Option;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddOption"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ComboBoxString_eventAddOption_Parms));
			UProperty* NewProp_Option = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Option"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Option, ComboBoxString_eventAddOption_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_ClearOptions()
	{
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearOptions"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_ClearSelection()
	{
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearSelection"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_FindOptionIndex()
	{
		struct ComboBoxString_eventFindOptionIndex_Parms
		{
			FString Option;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindOptionIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ComboBoxString_eventFindOptionIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, ComboBoxString_eventFindOptionIndex_Parms), 0x0000000000000580);
			UProperty* NewProp_Option = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Option"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Option, ComboBoxString_eventFindOptionIndex_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_GetOptionAtIndex()
	{
		struct ComboBoxString_eventGetOptionAtIndex_Parms
		{
			int32 Index;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOptionAtIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ComboBoxString_eventGetOptionAtIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, ComboBoxString_eventGetOptionAtIndex_Parms), 0x0000000000000580);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, ComboBoxString_eventGetOptionAtIndex_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_GetOptionCount()
	{
		struct ComboBoxString_eventGetOptionCount_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOptionCount"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ComboBoxString_eventGetOptionCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, ComboBoxString_eventGetOptionCount_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The number of options"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_GetSelectedOption()
	{
		struct ComboBoxString_eventGetSelectedOption_Parms
		{
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSelectedOption"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ComboBoxString_eventGetSelectedOption_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, ComboBoxString_eventGetSelectedOption_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_RefreshOptions()
	{
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RefreshOptions"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Refreshes the list of options.  If you added new ones, and want to update the list even if it's\ncurrently being displayed use this."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_RemoveOption()
	{
		struct ComboBoxString_eventRemoveOption_Parms
		{
			FString Option;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveOption"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ComboBoxString_eventRemoveOption_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ComboBoxString_eventRemoveOption_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ComboBoxString_eventRemoveOption_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ComboBoxString_eventRemoveOption_Parms), sizeof(bool), true);
			UProperty* NewProp_Option = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Option"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Option, ComboBoxString_eventRemoveOption_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UComboBoxString_SetSelectedOption()
	{
		struct ComboBoxString_eventSetSelectedOption_Parms
		{
			FString Option;
		};
		UObject* Outer=Z_Construct_UClass_UComboBoxString();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSelectedOption"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ComboBoxString_eventSetSelectedOption_Parms));
			UProperty* NewProp_Option = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Option"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Option, ComboBoxString_eventSetSelectedOption_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("ComboBox"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UComboBoxString_NoRegister()
	{
		return UComboBoxString::StaticClass();
	}
	UClass* Z_Construct_UClass_UComboBoxString()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UComboBoxString::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_AddOption());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_ClearOptions());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_ClearSelection());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_FindOptionIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_GetOptionAtIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_GetOptionCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_GetSelectedOption());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_RefreshOptions());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_RemoveOption());
				OuterClass->LinkChild(Z_Construct_UFunction_UComboBoxString_SetSelectedOption());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnOpening = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnOpening"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnOpening, UComboBoxString), 0x0000000010080000, Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature());
				UProperty* NewProp_OnSelectionChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnSelectionChanged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnSelectionChanged, UComboBoxString), 0x0000000010080000, Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature());
				UProperty* NewProp_OnGenerateWidgetEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnGenerateWidgetEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnGenerateWidgetEvent, UComboBoxString), 0x0000000000080001, Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForString__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(HasDownArrow, UComboBoxString, bool);
				UProperty* NewProp_HasDownArrow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HasDownArrow"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(HasDownArrow, UComboBoxString), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(HasDownArrow, UComboBoxString), sizeof(bool), true);
				UProperty* NewProp_MaxListHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxListHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxListHeight, UComboBoxString), 0x0000040000000015);
				UProperty* NewProp_ContentPadding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ContentPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ContentPadding, UComboBoxString), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UComboBoxString), 0x0000000000000005, Z_Construct_UScriptStruct_FComboBoxStyle());
				UProperty* NewProp_SelectedOption = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectedOption"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(SelectedOption, UComboBoxString), 0x0000000000000001);
				UProperty* NewProp_DefaultOptions = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultOptions"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DefaultOptions, UComboBoxString), 0x0000000000000001);
				UProperty* NewProp_DefaultOptions_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DefaultOptions, TEXT("DefaultOptions"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UComboBoxString_AddOption()); // 2611073281
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UComboBoxString_ClearOptions()); // 895440567
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UComboBoxString_ClearSelection()); // 2006615197
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UComboBoxString_FindOptionIndex()); // 1813067595
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UComboBoxString_GetOptionAtIndex()); // 417068896
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UComboBoxString_GetOptionCount()); // 2031871725
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UComboBoxString_GetSelectedOption()); // 4279405881
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature()); // 256390985
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature()); // 2195479781
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UComboBoxString_RefreshOptions()); // 581338956
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UComboBoxString_RemoveOption()); // 3041476967
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UComboBoxString_SetSelectedOption()); // 936535504
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("ComboBox (String)"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ComboBoxString.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The combobox allows you to display a list of options to the user in a dropdown menu for them to select one."));
				MetaData->SetValue(NewProp_OnOpening, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnOpening, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_OnOpening, TEXT("ToolTip"), TEXT("Called when the combobox is opening"));
				MetaData->SetValue(NewProp_OnSelectionChanged, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnSelectionChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_OnSelectionChanged, TEXT("ToolTip"), TEXT("Called when a new item is selected in the combobox."));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_OnGenerateWidgetEvent, TEXT("ToolTip"), TEXT("Called when the widget is needed for the item."));
				MetaData->SetValue(NewProp_HasDownArrow, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HasDownArrow, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_HasDownArrow, TEXT("ToolTip"), TEXT("When false, the down arrow is not generated and it is up to the API consumer\nto make their own visual hint that this is a drop down."));
				MetaData->SetValue(NewProp_MaxListHeight, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_MaxListHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_MaxListHeight, TEXT("ToolTip"), TEXT("The max height of the combobox list that opens"));
				MetaData->SetValue(NewProp_ContentPadding, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_ContentPadding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
				MetaData->SetValue(NewProp_SelectedOption, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_SelectedOption, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_SelectedOption, TEXT("ToolTip"), TEXT("The item in the combobox to select by default"));
				MetaData->SetValue(NewProp_DefaultOptions, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_DefaultOptions, TEXT("ModuleRelativePath"), TEXT("Public/Components/ComboBoxString.h"));
				MetaData->SetValue(NewProp_DefaultOptions, TEXT("ToolTip"), TEXT("The default list of items to be displayed on the combobox."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UComboBoxString(Z_Construct_UClass_UComboBoxString, TEXT("UComboBoxString"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UComboBoxString);
	UFunction* Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature()
	{
		struct EditableText_eventOnEditableTextCommittedEvent_Parms
		{
			FText Text;
			TEnumAsByte<ETextCommit::Type> CommitMethod;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnEditableTextCommittedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(EditableText_eventOnEditableTextCommittedEvent_Parms));
			UProperty* NewProp_CommitMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommitMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CommitMethod, EditableText_eventOnEditableTextCommittedEvent_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_ETextCommit());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, EditableText_eventOnEditableTextCommittedEvent_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature()
	{
		struct EditableText_eventOnEditableTextChangedEvent_Parms
		{
			FText Text;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnEditableTextChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(EditableText_eventOnEditableTextChangedEvent_Parms));
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, EditableText_eventOnEditableTextChangedEvent_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableText_GetText()
	{
		struct EditableText_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(EditableText_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, EditableText_eventGetText_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetText (Editable Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the widget text\n@return The widget text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableText_SetHintText()
	{
		struct EditableText_eventSetHintText_Parms
		{
			FText InHintText;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHintText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableText_eventSetHintText_Parms));
			UProperty* NewProp_InHintText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHintText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InHintText, EditableText_eventSetHintText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableText_SetIsPassword()
	{
		struct EditableText_eventSetIsPassword_Parms
		{
			bool InbIsPassword;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsPassword"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableText_eventSetIsPassword_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InbIsPassword, EditableText_eventSetIsPassword_Parms, bool);
			UProperty* NewProp_InbIsPassword = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InbIsPassword"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InbIsPassword, EditableText_eventSetIsPassword_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InbIsPassword, EditableText_eventSetIsPassword_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableText_SetIsReadOnly()
	{
		struct EditableText_eventSetIsReadOnly_Parms
		{
			bool InbIsReadyOnly;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsReadOnly"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableText_eventSetIsReadOnly_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InbIsReadyOnly, EditableText_eventSetIsReadOnly_Parms, bool);
			UProperty* NewProp_InbIsReadyOnly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InbIsReadyOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InbIsReadyOnly, EditableText_eventSetIsReadOnly_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InbIsReadyOnly, EditableText_eventSetIsReadOnly_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableText_SetText()
	{
		struct EditableText_eventSetText_Parms
		{
			FText InText;
		};
		UObject* Outer=Z_Construct_UClass_UEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableText_eventSetText_Parms));
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, EditableText_eventSetText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetText (Editable Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Directly sets the widget text.\nWarning: This will wipe any binding created for the Text property!\n@param InText The text to assign to the widget"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UEditableText_NoRegister()
	{
		return UEditableText::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableText()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UEditableText::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UEditableText_GetText());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableText_SetHintText());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableText_SetIsPassword());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableText_SetIsReadOnly());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableText_SetText());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnTextCommitted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextCommitted"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextCommitted, UEditableText), 0x0000000010080000, Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature());
				UProperty* NewProp_OnTextChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextChanged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextChanged, UEditableText), 0x0000000010080000, Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SelectAllTextOnCommit, UEditableText, bool);
				UProperty* NewProp_SelectAllTextOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectAllTextOnCommit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SelectAllTextOnCommit, UEditableText), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(SelectAllTextOnCommit, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ClearKeyboardFocusOnCommit, UEditableText, bool);
				UProperty* NewProp_ClearKeyboardFocusOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearKeyboardFocusOnCommit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ClearKeyboardFocusOnCommit, UEditableText), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(ClearKeyboardFocusOnCommit, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RevertTextOnEscape, UEditableText, bool);
				UProperty* NewProp_RevertTextOnEscape = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RevertTextOnEscape"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RevertTextOnEscape, UEditableText), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(RevertTextOnEscape, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SelectAllTextWhenFocused, UEditableText, bool);
				UProperty* NewProp_SelectAllTextWhenFocused = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectAllTextWhenFocused"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SelectAllTextWhenFocused, UEditableText), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(SelectAllTextWhenFocused, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsCaretMovedWhenGainFocus, UEditableText, bool);
				UProperty* NewProp_IsCaretMovedWhenGainFocus = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsCaretMovedWhenGainFocus"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsCaretMovedWhenGainFocus, UEditableText), 0x0000040000000001, CPP_BOOL_PROPERTY_BITMASK(IsCaretMovedWhenGainFocus, UEditableText), sizeof(bool), true);
				UProperty* NewProp_MinimumDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinimumDesiredWidth, UEditableText), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsPassword, UEditableText, bool);
				UProperty* NewProp_IsPassword = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsPassword"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsPassword, UEditableText), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(IsPassword, UEditableText), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsReadOnly, UEditableText, bool);
				UProperty* NewProp_IsReadOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsReadOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsReadOnly, UEditableText), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(IsReadOnly, UEditableText), sizeof(bool), true);
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity_DEPRECATED, UEditableText), 0x0000000020000000, Z_Construct_UScriptStruct_FSlateColor());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font_DEPRECATED, UEditableText), 0x0000000020000000, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_CaretImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CaretImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CaretImage_DEPRECATED, UEditableText), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_BackgroundImageComposing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundImageComposing"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BackgroundImageComposing_DEPRECATED, UEditableText), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_BackgroundImageSelected = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundImageSelected"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BackgroundImageSelected_DEPRECATED, UEditableText), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UEditableText), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UEditableText), 0x0000000000000005, Z_Construct_UScriptStruct_FEditableTextStyle());
				UProperty* NewProp_HintTextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintTextDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(HintTextDelegate, UEditableText), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_HintText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(HintText, UEditableText), 0x0000000000000015);
				UProperty* NewProp_TextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(TextDelegate, UEditableText), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, UEditableText), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UEditableText_GetText()); // 790812464
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature()); // 3413932639
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature()); // 862123894
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UEditableText_SetHintText()); // 4172543524
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UEditableText_SetIsPassword()); // 98941128
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UEditableText_SetIsReadOnly()); // 211311570
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UEditableText_SetText()); // 1684229168
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/EditableText.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Editable text box widget"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("DisplayName"), TEXT("OnTextCommitted (Editable Text)"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ToolTip"), TEXT("Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus."));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("DisplayName"), TEXT("OnTextChanged (Editable Text)"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ToolTip"), TEXT("Called whenever the text is changed interactively by the user"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ToolTip"), TEXT("Whether to select all text when pressing enter to commit changes"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ToolTip"), TEXT("Whether to clear keyboard focus when pressing enter to commit changes"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("ToolTip"), TEXT("Whether to allow the user to back out of changes when they press the escape key"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("ToolTip"), TEXT("Whether to select all text when the user clicks to give focus on the widget"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("ToolTip"), TEXT("Workaround as we lose focus when the auto completion closes."));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("ToolTip"), TEXT("Minimum width that a text block should be"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("ToolTip"), TEXT("Sets whether this text box is for storing a password"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("ToolTip"), TEXT("Sets whether this text box can actually be modified interactively by the user"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("Text color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_CaretImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_CaretImage, TEXT("ToolTip"), TEXT("Image brush used for the caret (overrides Style)"));
				MetaData->SetValue(NewProp_BackgroundImageComposing, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_BackgroundImageComposing, TEXT("ToolTip"), TEXT("Background image for the composing text (overrides Style)"));
				MetaData->SetValue(NewProp_BackgroundImageSelected, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_BackgroundImageSelected, TEXT("ToolTip"), TEXT("Background image for the selected text (overrides Style)"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("Text style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the hint text of the widget"));
				MetaData->SetValue(NewProp_HintText, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HintText, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_HintText, TEXT("ToolTip"), TEXT("Hint text that appears when there is no text in the text box"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the text of the widget"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableText.h"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text content for this editable text box widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableText(Z_Construct_UClass_UEditableText, TEXT("UEditableText"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableText);
	UFunction* Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature()
	{
		struct EditableTextBox_eventOnEditableTextBoxCommittedEvent_Parms
		{
			FText Text;
			TEnumAsByte<ETextCommit::Type> CommitMethod;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnEditableTextBoxCommittedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(EditableTextBox_eventOnEditableTextBoxCommittedEvent_Parms));
			UProperty* NewProp_CommitMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommitMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CommitMethod, EditableTextBox_eventOnEditableTextBoxCommittedEvent_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_ETextCommit());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, EditableTextBox_eventOnEditableTextBoxCommittedEvent_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature()
	{
		struct EditableTextBox_eventOnEditableTextBoxChangedEvent_Parms
		{
			FText Text;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnEditableTextBoxChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(EditableTextBox_eventOnEditableTextBoxChangedEvent_Parms));
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, EditableTextBox_eventOnEditableTextBoxChangedEvent_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableTextBox_ClearError()
	{
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearError"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableTextBox_GetText()
	{
		struct EditableTextBox_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(EditableTextBox_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, EditableTextBox_eventGetText_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetText (Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableTextBox_SetError()
	{
		struct EditableTextBox_eventSetError_Parms
		{
			FText InError;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetError"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableTextBox_eventSetError_Parms));
			UProperty* NewProp_InError = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InError"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InError, EditableTextBox_eventSetError_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetError (Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UEditableTextBox_SetText()
	{
		struct EditableTextBox_eventSetText_Parms
		{
			FText InText;
		};
		UObject* Outer=Z_Construct_UClass_UEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(EditableTextBox_eventSetText_Parms));
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, EditableTextBox_eventSetText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetText (Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UEditableTextBox_NoRegister()
	{
		return UEditableTextBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UEditableTextBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UEditableTextBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UEditableTextBox_ClearError());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableTextBox_GetText());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableTextBox_SetError());
				OuterClass->LinkChild(Z_Construct_UFunction_UEditableTextBox_SetText());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnTextCommitted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextCommitted"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextCommitted, UEditableTextBox), 0x0000000010080000, Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature());
				UProperty* NewProp_OnTextChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextChanged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextChanged, UEditableTextBox), 0x0000000010080000, Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SelectAllTextOnCommit, UEditableTextBox, bool);
				UProperty* NewProp_SelectAllTextOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectAllTextOnCommit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SelectAllTextOnCommit, UEditableTextBox), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(SelectAllTextOnCommit, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ClearKeyboardFocusOnCommit, UEditableTextBox, bool);
				UProperty* NewProp_ClearKeyboardFocusOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearKeyboardFocusOnCommit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ClearKeyboardFocusOnCommit, UEditableTextBox), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(ClearKeyboardFocusOnCommit, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(RevertTextOnEscape, UEditableTextBox, bool);
				UProperty* NewProp_RevertTextOnEscape = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RevertTextOnEscape"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RevertTextOnEscape, UEditableTextBox), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(RevertTextOnEscape, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SelectAllTextWhenFocused, UEditableTextBox, bool);
				UProperty* NewProp_SelectAllTextWhenFocused = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectAllTextWhenFocused"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SelectAllTextWhenFocused, UEditableTextBox), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(SelectAllTextWhenFocused, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsCaretMovedWhenGainFocus, UEditableTextBox, bool);
				UProperty* NewProp_IsCaretMovedWhenGainFocus = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsCaretMovedWhenGainFocus"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsCaretMovedWhenGainFocus, UEditableTextBox), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(IsCaretMovedWhenGainFocus, UEditableTextBox), sizeof(bool), true);
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding_DEPRECATED, UEditableTextBox), 0x0000000020000000, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_MinimumDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinimumDesiredWidth, UEditableTextBox), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsPassword, UEditableTextBox, bool);
				UProperty* NewProp_IsPassword = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsPassword"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsPassword, UEditableTextBox), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsPassword, UEditableTextBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsReadOnly, UEditableTextBox, bool);
				UProperty* NewProp_IsReadOnly = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsReadOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsReadOnly, UEditableTextBox), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsReadOnly, UEditableTextBox), sizeof(bool), true);
				UProperty* NewProp_ReadOnlyForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReadOnlyForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReadOnlyForegroundColor_DEPRECATED, UEditableTextBox), 0x0000000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor_DEPRECATED, UEditableTextBox), 0x0000000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor_DEPRECATED, UEditableTextBox), 0x0000000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font_DEPRECATED, UEditableTextBox), 0x0000000020000000, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_HintTextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintTextDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(HintTextDelegate, UEditableTextBox), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_HintText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HintText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(HintText, UEditableTextBox), 0x0000000000000015);
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UEditableTextBox), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UEditableTextBox), 0x0000000000000005, Z_Construct_UScriptStruct_FEditableTextBoxStyle());
				UProperty* NewProp_TextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(TextDelegate, UEditableTextBox), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, UEditableTextBox), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UEditableTextBox_ClearError()); // 4049765536
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UEditableTextBox_GetText()); // 3362537095
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature()); // 2226787476
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature()); // 2932839076
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UEditableTextBox_SetError()); // 999933189
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UEditableTextBox_SetText()); // 871474526
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Text Box"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/EditableTextBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows the user to type in custom text.  Only permits a single line of text to be entered.\n\n\x25cf No Children\n\x25cf Text Entry"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("Category"), TEXT("TextBox|Event"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ToolTip"), TEXT("Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus."));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("Category"), TEXT("TextBox|Event"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ToolTip"), TEXT("Called whenever the text is changed interactively by the user"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ToolTip"), TEXT("Whether to select all text when pressing enter to commit changes"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ToolTip"), TEXT("Whether to clear keyboard focus when pressing enter to commit changes"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_RevertTextOnEscape, TEXT("ToolTip"), TEXT("Whether to allow the user to back out of changes when they press the escape key"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_SelectAllTextWhenFocused, TEXT("ToolTip"), TEXT("Whether to select all text when the user clicks to give focus on the widget"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_IsCaretMovedWhenGainFocus, TEXT("ToolTip"), TEXT("Workaround as we lose focus when the auto completion closes."));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("Padding between the box/border and the text widget inside (overrides Style)"));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_MinimumDesiredWidth, TEXT("ToolTip"), TEXT("Minimum width that a text block should be"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_IsPassword, TEXT("ToolTip"), TEXT("Sets whether this text box is for storing a password"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_IsReadOnly, TEXT("ToolTip"), TEXT("Sets whether this text box can actually be modified interactively by the user"));
				MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("ToolTip"), TEXT("Text color and opacity when read-only (overrides Style)"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("The color of the background/border around the editable text (overrides Style)"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("Text color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_HintTextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the hint text of the widget"));
				MetaData->SetValue(NewProp_HintText, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HintText, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_HintText, TEXT("ToolTip"), TEXT("Hint text that appears when there is no text in the text box"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("Style used for the text box"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the text of the widget"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/EditableTextBox.h"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text content for this editable text box widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UEditableTextBox(Z_Construct_UClass_UEditableTextBox, TEXT("UEditableTextBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UEditableTextBox);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnExpandableAreaExpansionChanged__DelegateSignature()
	{
		struct _Script_UMG_eventOnExpandableAreaExpansionChanged_Parms
		{
			bool bIsExpanded;
		};
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnExpandableAreaExpansionChanged__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventOnExpandableAreaExpansionChanged_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsExpanded, _Script_UMG_eventOnExpandableAreaExpansionChanged_Parms, bool);
			UProperty* NewProp_bIsExpanded = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsExpanded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsExpanded, _Script_UMG_eventOnExpandableAreaExpansionChanged_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsExpanded, _Script_UMG_eventOnExpandableAreaExpansionChanged_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UExpandableArea_GetIsExpanded()
	{
		struct ExpandableArea_eventGetIsExpanded_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UExpandableArea();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIsExpanded"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ExpandableArea_eventGetIsExpanded_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ExpandableArea_eventGetIsExpanded_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ExpandableArea_eventGetIsExpanded_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ExpandableArea_eventGetIsExpanded_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Expansion"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UExpandableArea_SetIsExpanded()
	{
		struct ExpandableArea_eventSetIsExpanded_Parms
		{
			bool IsExpanded;
		};
		UObject* Outer=Z_Construct_UClass_UExpandableArea();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsExpanded"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ExpandableArea_eventSetIsExpanded_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsExpanded, ExpandableArea_eventSetIsExpanded_Parms, bool);
			UProperty* NewProp_IsExpanded = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IsExpanded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsExpanded, ExpandableArea_eventSetIsExpanded_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(IsExpanded, ExpandableArea_eventSetIsExpanded_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Expansion"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UExpandableArea_NoRegister()
	{
		return UExpandableArea::StaticClass();
	}
	UClass* Z_Construct_UClass_UExpandableArea()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UExpandableArea::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UExpandableArea_GetIsExpanded());
				OuterClass->LinkChild(Z_Construct_UFunction_UExpandableArea_SetIsExpanded());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BodyContent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BodyContent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BodyContent, UExpandableArea), 0x0000080000000000, Z_Construct_UClass_UWidget_NoRegister());
				UProperty* NewProp_HeaderContent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeaderContent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HeaderContent, UExpandableArea), 0x0000080000000000, Z_Construct_UClass_UWidget_NoRegister());
				UProperty* NewProp_OnExpansionChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnExpansionChanged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnExpansionChanged, UExpandableArea), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnExpandableAreaExpansionChanged__DelegateSignature());
				UProperty* NewProp_AreaPadding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AreaPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AreaPadding, UExpandableArea), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_MaxHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxHeight, UExpandableArea), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsExpanded, UExpandableArea, bool);
				UProperty* NewProp_bIsExpanded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsExpanded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsExpanded, UExpandableArea), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bIsExpanded, UExpandableArea), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UExpandableArea_GetIsExpanded()); // 3906472089
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UExpandableArea_SetIsExpanded()); // 2471844053
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UNamedSlotInterface_NoRegister(), VTABLE_OFFSET(UExpandableArea, INamedSlotInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ExpandableArea.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_BodyContent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_HeaderContent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_OnExpansionChanged, TEXT("Category"), TEXT("ExpandableArea|Event"));
				MetaData->SetValue(NewProp_OnExpansionChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_OnExpansionChanged, TEXT("ToolTip"), TEXT("A bindable delegate for the IsChecked."));
				MetaData->SetValue(NewProp_AreaPadding, TEXT("Category"), TEXT("Expansion"));
				MetaData->SetValue(NewProp_AreaPadding, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_MaxHeight, TEXT("Category"), TEXT("Expansion"));
				MetaData->SetValue(NewProp_MaxHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
				MetaData->SetValue(NewProp_MaxHeight, TEXT("ToolTip"), TEXT("The maximum height of the area"));
				MetaData->SetValue(NewProp_bIsExpanded, TEXT("Category"), TEXT("Expansion"));
				MetaData->SetValue(NewProp_bIsExpanded, TEXT("ModuleRelativePath"), TEXT("Public/Components/ExpandableArea.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UExpandableArea(Z_Construct_UClass_UExpandableArea, TEXT("UExpandableArea"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UExpandableArea);
	UFunction* Z_Construct_UFunction_UImage_GetDynamicMaterial()
	{
		struct Image_eventGetDynamicMaterial_Parms
		{
			UMaterialInstanceDynamic* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDynamicMaterial"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventGetDynamicMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Image_eventGetDynamicMaterial_Parms), 0x0000000000000580, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetBrush()
	{
		struct Image_eventSetBrush_Parms
		{
			FSlateBrush InBrush;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrush"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(Image_eventSetBrush_Parms));
			UProperty* NewProp_InBrush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InBrush, Image_eventSetBrush_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetBrushFromAsset()
	{
		struct Image_eventSetBrushFromAsset_Parms
		{
			USlateBrushAsset* Asset;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromAsset"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventSetBrushFromAsset_Parms));
			UProperty* NewProp_Asset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Asset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Asset, Image_eventSetBrushFromAsset_Parms), 0x0000000000000080, Z_Construct_UClass_USlateBrushAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetBrushFromMaterial()
	{
		struct Image_eventSetBrushFromMaterial_Parms
		{
			UMaterialInterface* Material;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromMaterial"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventSetBrushFromMaterial_Parms));
			UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Material"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Material, Image_eventSetBrushFromMaterial_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetBrushFromTexture()
	{
		struct Image_eventSetBrushFromTexture_Parms
		{
			UTexture2D* Texture;
			bool bMatchSize;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromTexture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventSetBrushFromTexture_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bMatchSize, Image_eventSetBrushFromTexture_Parms, bool);
			UProperty* NewProp_bMatchSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bMatchSize"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bMatchSize, Image_eventSetBrushFromTexture_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bMatchSize, Image_eventSetBrushFromTexture_Parms), sizeof(bool), true);
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Texture, Image_eventSetBrushFromTexture_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bMatchSize"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetColorAndOpacity()
	{
		struct Image_eventSetColorAndOpacity_Parms
		{
			FLinearColor InColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Image_eventSetColorAndOpacity_Parms));
			UProperty* NewProp_InColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InColorAndOpacity, Image_eventSetColorAndOpacity_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UImage_SetOpacity()
	{
		struct Image_eventSetOpacity_Parms
		{
			float InOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UImage();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOpacity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Image_eventSetOpacity_Parms));
			UProperty* NewProp_InOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InOpacity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InOpacity, Image_eventSetOpacity_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UImage_NoRegister()
	{
		return UImage::StaticClass();
	}
	UClass* Z_Construct_UClass_UImage()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UImage::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UImage_GetDynamicMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetBrush());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetBrushFromAsset());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetBrushFromMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetBrushFromTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UImage_SetOpacity());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnMouseButtonDownEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseButtonDownEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnMouseButtonDownEvent, UImage), 0x0000000000080001, Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				UProperty* NewProp_ColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(ColorAndOpacityDelegate, UImage), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, UImage), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BrushDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrushDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(BrushDelegate, UImage), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature());
				UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Brush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Brush, UImage), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateBrush());
				UProperty* NewProp_Image = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Image"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Image_DEPRECATED, UImage), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UImage_GetDynamicMaterial()); // 3925120397
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UImage_SetBrush()); // 1586574904
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UImage_SetBrushFromAsset()); // 2635186811
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UImage_SetBrushFromMaterial()); // 492270252
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UImage_SetBrushFromTexture()); // 1034645520
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UImage_SetColorAndOpacity()); // 4171155990
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UImage_SetOpacity()); // 2244785408
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Image.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The image widget allows you to display a Slate Brush, or texture or material in the UI.\n\n\x25cf No Children"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_ColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_ColorAndOpacityDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the ColorAndOpacity."));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("Color and opacity"));
				MetaData->SetValue(NewProp_BrushDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_BrushDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the Image."));
				MetaData->SetValue(NewProp_Brush, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Brush, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_Brush, TEXT("ToolTip"), TEXT("Image to draw"));
				MetaData->SetValue(NewProp_Image, TEXT("ModuleRelativePath"), TEXT("Public/Components/Image.h"));
				MetaData->SetValue(NewProp_Image, TEXT("ToolTip"), TEXT("Image to draw"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UImage(Z_Construct_UClass_UImage, TEXT("UImage"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UImage);
	UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature()
	{
		struct MultiLineEditableText_eventOnMultiLineEditableTextCommittedEvent_Parms
		{
			FText Text;
			TEnumAsByte<ETextCommit::Type> CommitMethod;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMultiLineEditableTextCommittedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(MultiLineEditableText_eventOnMultiLineEditableTextCommittedEvent_Parms));
			UProperty* NewProp_CommitMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommitMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CommitMethod, MultiLineEditableText_eventOnMultiLineEditableTextCommittedEvent_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_ETextCommit());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, MultiLineEditableText_eventOnMultiLineEditableTextCommittedEvent_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature()
	{
		struct MultiLineEditableText_eventOnMultiLineEditableTextChangedEvent_Parms
		{
			FText Text;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMultiLineEditableTextChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(MultiLineEditableText_eventOnMultiLineEditableTextChangedEvent_Parms));
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, MultiLineEditableText_eventOnMultiLineEditableTextChangedEvent_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMultiLineEditableText_GetText()
	{
		struct MultiLineEditableText_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MultiLineEditableText_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, MultiLineEditableText_eventGetText_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetText (Multi-Line Editable Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMultiLineEditableText_SetText()
	{
		struct MultiLineEditableText_eventSetText_Parms
		{
			FText InText;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableText();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MultiLineEditableText_eventSetText_Parms));
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, MultiLineEditableText_eventSetText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetText (Multi-Line Editable Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMultiLineEditableText_NoRegister()
	{
		return UMultiLineEditableText::StaticClass();
	}
	UClass* Z_Construct_UClass_UMultiLineEditableText()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UMultiLineEditableText::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMultiLineEditableText_GetText());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UMultiLineEditableText_SetText());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnTextCommitted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextCommitted"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextCommitted, UMultiLineEditableText), 0x0000000010080000, Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature());
				UProperty* NewProp_OnTextChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextChanged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextChanged, UMultiLineEditableText), 0x0000000010080000, Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font_DEPRECATED, UMultiLineEditableText), 0x0000000020000000, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_WrapTextAt = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WrapTextAt"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WrapTextAt, UMultiLineEditableText), 0x0000040000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoWrapText, UMultiLineEditableText, bool);
				UProperty* NewProp_bAutoWrapText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoWrapText"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoWrapText, UMultiLineEditableText), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAutoWrapText, UMultiLineEditableText), sizeof(bool), true);
				UProperty* NewProp_Justification = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Justification"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Justification, UMultiLineEditableText), 0x0000000000000005, Z_Construct_UEnum_Slate_ETextJustify());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UMultiLineEditableText), 0x0000000000000005, Z_Construct_UScriptStruct_FTextBlockStyle());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, UMultiLineEditableText), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMultiLineEditableText_GetText()); // 3977322066
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature()); // 161966847
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature()); // 973965661
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMultiLineEditableText_SetText()); // 508129102
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Editable Text (Multi-Line)"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/MultiLineEditableText.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Editable text box widget"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("DisplayName"), TEXT("OnTextCommitted (Multi-Line Editable Text)"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ToolTip"), TEXT("Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus."));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("DisplayName"), TEXT("OnTextChanged (Multi-Line Editable Text)"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ToolTip"), TEXT("Called whenever the text is changed interactively by the user"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("ToolTip"), TEXT("Whether text wraps onto a new line when it's length exceeds this width; if this value is zero or negative, no wrapping occurs."));
				MetaData->SetValue(NewProp_bAutoWrapText, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_bAutoWrapText, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_bAutoWrapText, TEXT("ToolTip"), TEXT("Whether to wrap text automatically based on the widget's computed horizontal space."));
				MetaData->SetValue(NewProp_Justification, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Justification, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_Justification, TEXT("ToolTip"), TEXT("The justification of the text in the multilinebox"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableText.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT("true"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text content for this editable text box widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMultiLineEditableText(Z_Construct_UClass_UMultiLineEditableText, TEXT("UMultiLineEditableText"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMultiLineEditableText);
	UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature()
	{
		struct MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxCommittedEvent_Parms
		{
			FText Text;
			TEnumAsByte<ETextCommit::Type> CommitMethod;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxCommittedEvent_Parms));
			UProperty* NewProp_CommitMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommitMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CommitMethod, MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxCommittedEvent_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_ETextCommit());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxCommittedEvent_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature()
	{
		struct MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxChangedEvent_Parms
		{
			FText Text;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMultiLineEditableTextBoxChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00530000, 65535, sizeof(MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxChangedEvent_Parms));
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, MultiLineEditableTextBox_eventOnMultiLineEditableTextBoxChangedEvent_Parms), 0x0000000008000182);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_GetText()
	{
		struct MultiLineEditableTextBox_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MultiLineEditableTextBox_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, MultiLineEditableTextBox_eventGetText_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetText (Multi-Line Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_SetError()
	{
		struct MultiLineEditableTextBox_eventSetError_Parms
		{
			FText InError;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetError"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MultiLineEditableTextBox_eventSetError_Parms));
			UProperty* NewProp_InError = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InError"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InError, MultiLineEditableTextBox_eventSetError_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetError (Multi-Line Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMultiLineEditableTextBox_SetText()
	{
		struct MultiLineEditableTextBox_eventSetText_Parms
		{
			FText InText;
		};
		UObject* Outer=Z_Construct_UClass_UMultiLineEditableTextBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MultiLineEditableTextBox_eventSetText_Parms));
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, MultiLineEditableTextBox_eventSetText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetText (Multi-Line Text Box)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMultiLineEditableTextBox_NoRegister()
	{
		return UMultiLineEditableTextBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UMultiLineEditableTextBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UMultiLineEditableTextBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMultiLineEditableTextBox_GetText());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_UMultiLineEditableTextBox_SetError());
				OuterClass->LinkChild(Z_Construct_UFunction_UMultiLineEditableTextBox_SetText());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnTextCommitted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextCommitted"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextCommitted, UMultiLineEditableTextBox), 0x0000000010080000, Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature());
				UProperty* NewProp_OnTextChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnTextChanged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnTextChanged, UMultiLineEditableTextBox), 0x0000000010080000, Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature());
				UProperty* NewProp_ReadOnlyForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReadOnlyForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReadOnlyForegroundColor_DEPRECATED, UMultiLineEditableTextBox), 0x0000000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor_DEPRECATED, UMultiLineEditableTextBox), 0x0000000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor_DEPRECATED, UMultiLineEditableTextBox), 0x0000000020000000, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font_DEPRECATED, UMultiLineEditableTextBox), 0x0000000020000000, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_WrapTextAt = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WrapTextAt"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WrapTextAt, UMultiLineEditableTextBox), 0x0000040000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAutoWrapText, UMultiLineEditableTextBox, bool);
				UProperty* NewProp_bAutoWrapText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAutoWrapText"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAutoWrapText, UMultiLineEditableTextBox), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAutoWrapText, UMultiLineEditableTextBox), sizeof(bool), true);
				UProperty* NewProp_Justification = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Justification"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Justification, UMultiLineEditableTextBox), 0x0000000000000015, Z_Construct_UEnum_Slate_ETextJustify());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UMultiLineEditableTextBox), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_TextStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextStyle, UMultiLineEditableTextBox), 0x0000000000000005, Z_Construct_UScriptStruct_FTextBlockStyle());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UMultiLineEditableTextBox), 0x0000000000000005, Z_Construct_UScriptStruct_FEditableTextBoxStyle());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, UMultiLineEditableTextBox), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMultiLineEditableTextBox_GetText()); // 665876769
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature()); // 2012996893
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature()); // 3357225297
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMultiLineEditableTextBox_SetError()); // 511599755
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMultiLineEditableTextBox_SetText()); // 3456667462
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Text Box (Multi-Line)"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows a user to enter multiple lines of text"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("DisplayName"), TEXT("OnTextCommitted (Multi-Line Text Box)"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_OnTextCommitted, TEXT("ToolTip"), TEXT("Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus."));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("DisplayName"), TEXT("OnTextChanged (Multi-Line Text Box)"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_OnTextChanged, TEXT("ToolTip"), TEXT("Called whenever the text is changed interactively by the user"));
				MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_ReadOnlyForegroundColor, TEXT("ToolTip"), TEXT("Text color and opacity when read-only (overrides Style)"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("The color of the background/border around the editable text (overrides Style)"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("Text color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font color and opacity (overrides Style)"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("ToolTip"), TEXT("Whether text wraps onto a new line when it's length exceeds this width; if this value is zero or negative, no wrapping occurs."));
				MetaData->SetValue(NewProp_bAutoWrapText, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_bAutoWrapText, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_bAutoWrapText, TEXT("ToolTip"), TEXT("Whether to wrap text automatically based on the widget's computed horizontal space."));
				MetaData->SetValue(NewProp_Justification, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Justification, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_Justification, TEXT("ToolTip"), TEXT("The justification of the text in the multilinebox"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_TextStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_TextStyle, TEXT("DisplayName"), TEXT("Text Style"));
				MetaData->SetValue(NewProp_TextStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_TextStyle, TEXT("ToolTip"), TEXT("The text style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/MultiLineEditableTextBox.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT("true"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text content for this editable text box widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMultiLineEditableTextBox(Z_Construct_UClass_UMultiLineEditableTextBox, TEXT("UMultiLineEditableTextBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMultiLineEditableTextBox);
	UClass* Z_Construct_UClass_UNativeWidgetHost_NoRegister()
	{
		return UNativeWidgetHost::StaticClass();
	}
	UClass* Z_Construct_UClass_UNativeWidgetHost()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UNativeWidgetHost::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/NativeWidgetHost.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/NativeWidgetHost.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A NativeWidgetHost is a container widget that can contain one child slate widget.  This should\nbe used when all you need is to nest a native widget inside a UMG widget."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNativeWidgetHost(Z_Construct_UClass_UNativeWidgetHost, TEXT("UNativeWidgetHost"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNativeWidgetHost);
	UFunction* Z_Construct_UFunction_UPanelWidget_AddChild()
	{
		struct PanelWidget_eventAddChild_Parms
		{
			UWidget* Content;
			UPanelSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChild"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PanelWidget_eventAddChild_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, PanelWidget_eventAddChild_Parms), 0x0000000000000580, Z_Construct_UClass_UPanelSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, PanelWidget_eventAddChild_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Adds a new child widget to the container.  Returns the base slot type,\nrequires casting to turn it into the type specific to the container."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_ClearChildren()
	{
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearChildren"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Remove all child widgets from the panel widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_GetChildAt()
	{
		struct PanelWidget_eventGetChildAt_Parms
		{
			int32 Index;
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetChildAt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PanelWidget_eventGetChildAt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, PanelWidget_eventGetChildAt_Parms), 0x0000000000000580, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, PanelWidget_eventGetChildAt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the widget at an index.\n@param Index The index of the widget.\n@return The widget at the given index, or nothing if there is no widget there."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_GetChildIndex()
	{
		struct PanelWidget_eventGetChildIndex_Parms
		{
			UWidget* Content;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetChildIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PanelWidget_eventGetChildIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PanelWidget_eventGetChildIndex_Parms), 0x0000000000000580);
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, PanelWidget_eventGetChildIndex_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the index of a specific child widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_GetChildrenCount()
	{
		struct PanelWidget_eventGetChildrenCount_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetChildrenCount"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PanelWidget_eventGetChildrenCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PanelWidget_eventGetChildrenCount_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets number of child widgets in the container."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_HasAnyChildren()
	{
		struct PanelWidget_eventHasAnyChildren_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasAnyChildren"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PanelWidget_eventHasAnyChildren_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PanelWidget_eventHasAnyChildren_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PanelWidget_eventHasAnyChildren_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PanelWidget_eventHasAnyChildren_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if there are any child widgets in the panel"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_HasChild()
	{
		struct PanelWidget_eventHasChild_Parms
		{
			UWidget* Content;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasChild"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(PanelWidget_eventHasChild_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PanelWidget_eventHasChild_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PanelWidget_eventHasChild_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PanelWidget_eventHasChild_Parms), sizeof(bool), true);
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, PanelWidget_eventHasChild_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if panel contains this widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_RemoveChild()
	{
		struct PanelWidget_eventRemoveChild_Parms
		{
			UWidget* Content;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveChild"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PanelWidget_eventRemoveChild_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PanelWidget_eventRemoveChild_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PanelWidget_eventRemoveChild_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PanelWidget_eventRemoveChild_Parms), sizeof(bool), true);
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, PanelWidget_eventRemoveChild_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes a specific widget from the container.\n@return true if the widget was found and removed."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanelWidget_RemoveChildAt()
	{
		struct PanelWidget_eventRemoveChildAt_Parms
		{
			int32 Index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UPanelWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveChildAt"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PanelWidget_eventRemoveChildAt_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, PanelWidget_eventRemoveChildAt_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, PanelWidget_eventRemoveChildAt_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, PanelWidget_eventRemoveChildAt_Parms), sizeof(bool), true);
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, PanelWidget_eventRemoveChildAt_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes a child by it's index."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPanelWidget_NoRegister()
	{
		return UPanelWidget::StaticClass();
	}
	UClass* Z_Construct_UClass_UPanelWidget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UPanelWidget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;

				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_AddChild());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_ClearChildren());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_GetChildAt());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_GetChildIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_GetChildrenCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_HasAnyChildren());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_HasChild());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_RemoveChild());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanelWidget_RemoveChildAt());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Slots = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Slots"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Slots, UPanelWidget), 0x0000080000000000);
				UProperty* NewProp_Slots_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Slots, TEXT("Slots"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UPanelSlot_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanelWidget_AddChild()); // 1889507357
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanelWidget_ClearChildren()); // 1643245882
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanelWidget_GetChildAt()); // 1254489729
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanelWidget_GetChildIndex()); // 3593569177
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanelWidget_GetChildrenCount()); // 1162360216
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanelWidget_HasAnyChildren()); // 3332839124
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanelWidget_HasChild()); // 2629091577
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanelWidget_RemoveChild()); // 3237391221
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanelWidget_RemoveChildAt()); // 3513062200
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/PanelWidget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The base class for all UMG panel widgets.  Panel widgets layout a collection of child widgets."));
				MetaData->SetValue(NewProp_Slots, TEXT("ModuleRelativePath"), TEXT("Public/Components/PanelWidget.h"));
				MetaData->SetValue(NewProp_Slots, TEXT("ToolTip"), TEXT("The slots in the widget holding the child widgets of this panel."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPanelWidget(Z_Construct_UClass_UPanelWidget, TEXT("UPanelWidget"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPanelWidget);
	UFunction* Z_Construct_UFunction_UCanvasPanel_AddChildToCanvas()
	{
		struct CanvasPanel_eventAddChildToCanvas_Parms
		{
			UWidget* Content;
			UCanvasPanelSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCanvasPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToCanvas"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CanvasPanel_eventAddChildToCanvas_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, CanvasPanel_eventAddChildToCanvas_Parms), 0x0000000000000580, Z_Construct_UClass_UCanvasPanelSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, CanvasPanel_eventAddChildToCanvas_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Canvas Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCanvasPanel_NoRegister()
	{
		return UCanvasPanel::StaticClass();
	}
	UClass* Z_Construct_UClass_UCanvasPanel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UCanvasPanel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCanvasPanel_AddChildToCanvas());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCanvasPanel_AddChildToCanvas()); // 3827113521
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/CanvasPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CanvasPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The canvas panel is a designer friendly panel that allows widgets to be laid out at arbitrary\nlocations, anchored and z-ordered with other children of the canvas.  The canvas is a great widget\nfor manual layout, but bad when you want to procedurally just generate widgets and place them in a\ncontainer (unless you want absolute layout).\n\n\x25cf Many Children\n\x25cf Absolute Layout\n\x25cf Anchors"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCanvasPanel(Z_Construct_UClass_UCanvasPanel, TEXT("UCanvasPanel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCanvasPanel);
	UFunction* Z_Construct_UFunction_UContentWidget_GetContentSlot()
	{
		struct ContentWidget_eventGetContentSlot_Parms
		{
			UPanelSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UContentWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetContentSlot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ContentWidget_eventGetContentSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, ContentWidget_eventGetContentSlot_Parms), 0x0000000000000580, Z_Construct_UClass_UPanelSlot_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ContentWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UContentWidget_NoRegister()
	{
		return UContentWidget::StaticClass();
	}
	UClass* Z_Construct_UClass_UContentWidget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UContentWidget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;

				OuterClass->LinkChild(Z_Construct_UFunction_UContentWidget_GetContentSlot());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UContentWidget_GetContentSlot()); // 90908967
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ContentWidget.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ContentWidget.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UContentWidget(Z_Construct_UClass_UContentWidget, TEXT("UContentWidget"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UContentWidget);
	UFunction* Z_Construct_UFunction_UBorder_GetDynamicMaterial()
	{
		struct Border_eventGetDynamicMaterial_Parms
		{
			UMaterialInstanceDynamic* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDynamicMaterial"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventGetDynamicMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Border_eventGetDynamicMaterial_Parms), 0x0000000000000580, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetBrush()
	{
		struct Border_eventSetBrush_Parms
		{
			FSlateBrush InBrush;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrush"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(Border_eventSetBrush_Parms));
			UProperty* NewProp_InBrush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InBrush, Border_eventSetBrush_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetBrushColor()
	{
		struct Border_eventSetBrushColor_Parms
		{
			FLinearColor InBrushColor;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Border_eventSetBrushColor_Parms));
			UProperty* NewProp_InBrushColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBrushColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InBrushColor, Border_eventSetBrushColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetBrushFromAsset()
	{
		struct Border_eventSetBrushFromAsset_Parms
		{
			USlateBrushAsset* Asset;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromAsset"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetBrushFromAsset_Parms));
			UProperty* NewProp_Asset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Asset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Asset, Border_eventSetBrushFromAsset_Parms), 0x0000000000000080, Z_Construct_UClass_USlateBrushAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetBrushFromMaterial()
	{
		struct Border_eventSetBrushFromMaterial_Parms
		{
			UMaterialInterface* Material;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromMaterial"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetBrushFromMaterial_Parms));
			UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Material"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Material, Border_eventSetBrushFromMaterial_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetBrushFromTexture()
	{
		struct Border_eventSetBrushFromTexture_Parms
		{
			UTexture2D* Texture;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushFromTexture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetBrushFromTexture_Parms));
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Texture, Border_eventSetBrushFromTexture_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetContentColorAndOpacity()
	{
		struct Border_eventSetContentColorAndOpacity_Parms
		{
			FLinearColor InContentColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetContentColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Border_eventSetContentColorAndOpacity_Parms));
			UProperty* NewProp_InContentColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InContentColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InContentColorAndOpacity, Border_eventSetContentColorAndOpacity_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetHorizontalAlignment()
	{
		struct Border_eventSetHorizontalAlignment_Parms
		{
			TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetHorizontalAlignment_Parms));
			UProperty* NewProp_InHorizontalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InHorizontalAlignment, Border_eventSetHorizontalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetPadding()
	{
		struct Border_eventSetPadding_Parms
		{
			FMargin InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, Border_eventSetPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBorder_SetVerticalAlignment()
	{
		struct Border_eventSetVerticalAlignment_Parms
		{
			TEnumAsByte<EVerticalAlignment> InVerticalAlignment;
		};
		UObject* Outer=Z_Construct_UClass_UBorder();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Border_eventSetVerticalAlignment_Parms));
			UProperty* NewProp_InVerticalAlignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InVerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InVerticalAlignment, Border_eventSetVerticalAlignment_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBorder_NoRegister()
	{
		return UBorder::StaticClass();
	}
	UClass* Z_Construct_UClass_UBorder()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UBorder::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_GetDynamicMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetBrush());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetBrushColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetBrushFromAsset());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetBrushFromMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetBrushFromTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetContentColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetHorizontalAlignment());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetPadding());
				OuterClass->LinkChild(Z_Construct_UFunction_UBorder_SetVerticalAlignment());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Brush"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Brush_DEPRECATED, UBorder), 0x0000080020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_OnMouseDoubleClickEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseDoubleClickEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnMouseDoubleClickEvent, UBorder), 0x0000000000080001, Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				UProperty* NewProp_OnMouseMoveEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseMoveEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnMouseMoveEvent, UBorder), 0x0000000000080001, Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				UProperty* NewProp_OnMouseButtonUpEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseButtonUpEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnMouseButtonUpEvent, UBorder), 0x0000000000080001, Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				UProperty* NewProp_OnMouseButtonDownEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseButtonDownEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnMouseButtonDownEvent, UBorder), 0x0000000000080001, Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowEffectWhenDisabled, UBorder, bool);
				UProperty* NewProp_bShowEffectWhenDisabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowEffectWhenDisabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowEffectWhenDisabled, UBorder), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(bShowEffectWhenDisabled, UBorder), sizeof(bool), true);
				UProperty* NewProp_BrushColorDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrushColorDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(BrushColorDelegate, UBorder), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_BrushColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BrushColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BrushColor, UBorder), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_BackgroundDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(BackgroundDelegate, UBorder), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature());
				UProperty* NewProp_Background = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Background"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Background, UBorder), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateBrush());
				UProperty* NewProp_VerticalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VerticalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(VerticalAlignment, UBorder), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EVerticalAlignment());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UBorder), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding, UBorder), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_ContentColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ContentColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(ContentColorAndOpacityDelegate, UBorder), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_ContentColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ContentColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ContentColorAndOpacity, UBorder), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorder_GetDynamicMaterial()); // 2924944381
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorder_SetBrush()); // 4064099538
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorder_SetBrushColor()); // 2595925971
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorder_SetBrushFromAsset()); // 2856014200
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorder_SetBrushFromMaterial()); // 4089295903
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorder_SetBrushFromTexture()); // 2373166548
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorder_SetContentColorAndOpacity()); // 2067405504
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorder_SetHorizontalAlignment()); // 2135864850
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorder_SetPadding()); // 1409527214
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBorder_SetVerticalAlignment()); // 2428762595
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Border.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A border is a container widget that can contain one child widget, providing an opportunity\nto surround it with a background image and adjustable padding.\n\n\x25cf Single Child\n\x25cf Image"));
				MetaData->SetValue(NewProp_Brush, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_Brush, TEXT("ToolTip"), TEXT("Image to use for the border"));
				MetaData->SetValue(NewProp_OnMouseDoubleClickEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnMouseDoubleClickEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnMouseDoubleClickEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_OnMouseMoveEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnMouseMoveEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnMouseMoveEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_OnMouseButtonUpEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnMouseButtonUpEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnMouseButtonUpEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnMouseButtonDownEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_bShowEffectWhenDisabled, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_bShowEffectWhenDisabled, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_bShowEffectWhenDisabled, TEXT("ToolTip"), TEXT("Whether or not to show the disabled effect when this border is disabled"));
				MetaData->SetValue(NewProp_BrushColorDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_BrushColorDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the BrushColor."));
				MetaData->SetValue(NewProp_BrushColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_BrushColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_BrushColor, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_BrushColor, TEXT("ToolTip"), TEXT("Color and opacity of the actual border image"));
				MetaData->SetValue(NewProp_BackgroundDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_BackgroundDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the Brush."));
				MetaData->SetValue(NewProp_Background, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Background, TEXT("DisplayName"), TEXT("Brush"));
				MetaData->SetValue(NewProp_Background, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_Background, TEXT("ToolTip"), TEXT("Brush to drag as the background"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_VerticalAlignment, TEXT("ToolTip"), TEXT("The alignment of the content vertically."));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("The alignment of the content horizontally."));
				MetaData->SetValue(NewProp_Padding, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("The padding area between the slot and the content it contains."));
				MetaData->SetValue(NewProp_ContentColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_ContentColorAndOpacityDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the ContentColorAndOpacity."));
				MetaData->SetValue(NewProp_ContentColorAndOpacity, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_ContentColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/Border.h"));
				MetaData->SetValue(NewProp_ContentColorAndOpacity, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_ContentColorAndOpacity, TEXT("ToolTip"), TEXT("Color and opacity multiplier of content in the border"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBorder(Z_Construct_UClass_UBorder, TEXT("UBorder"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBorder);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonReleasedEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnButtonReleasedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonPressedEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnButtonPressedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnButtonClickedEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnButtonClickedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButton_IsPressed()
	{
		struct Button_eventIsPressed_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UButton();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Button_eventIsPressed_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, Button_eventIsPressed_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, Button_eventIsPressed_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, Button_eventIsPressed_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the user is actively pressing the button.  Do not use this for detecting 'Clicks', use the OnClicked event instead.\n\n@return true if the user is actively pressing the button otherwise false."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButton_SetBackgroundColor()
	{
		struct Button_eventSetBackgroundColor_Parms
		{
			FLinearColor InBackgroundColor;
		};
		UObject* Outer=Z_Construct_UClass_UButton();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBackgroundColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Button_eventSetBackgroundColor_Parms));
			UProperty* NewProp_InBackgroundColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InBackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InBackgroundColor, Button_eventSetBackgroundColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button|Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color multiplier for the button background"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UButton_SetColorAndOpacity()
	{
		struct Button_eventSetColorAndOpacity_Parms
		{
			FLinearColor InColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UButton();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Button_eventSetColorAndOpacity_Parms));
			UProperty* NewProp_InColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InColorAndOpacity, Button_eventSetColorAndOpacity_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Button|Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color multiplier for the button content"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UButton_NoRegister()
	{
		return UButton::StaticClass();
	}
	UClass* Z_Construct_UClass_UButton()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UButton::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UButton_IsPressed());
				OuterClass->LinkChild(Z_Construct_UFunction_UButton_SetBackgroundColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UButton_SetColorAndOpacity());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnReleased = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnReleased"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnReleased, UButton), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonReleasedEvent__DelegateSignature());
				UProperty* NewProp_OnPressed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnPressed"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnPressed, UButton), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonPressedEvent__DelegateSignature());
				UProperty* NewProp_OnClicked = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnClicked"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnClicked, UButton), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnButtonClickedEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IsFocusable, UButton, bool);
				UProperty* NewProp_IsFocusable = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IsFocusable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IsFocusable, UButton), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(IsFocusable, UButton), sizeof(bool), true);
				UProperty* NewProp_TouchMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TouchMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(TouchMethod, UButton), 0x0000040000000015, Z_Construct_UEnum_SlateCore_EButtonTouchMethod());
				UProperty* NewProp_ClickMethod = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClickMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ClickMethod, UButton), 0x0000040000000015, Z_Construct_UEnum_SlateCore_EButtonClickMethod());
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor, UButton), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, UButton), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UButton), 0x0000000000000005, Z_Construct_UScriptStruct_FButtonStyle());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UButton), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UButton_IsPressed()); // 1569283147
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UButton_SetBackgroundColor()); // 1301958786
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UButton_SetColorAndOpacity()); // 2931241140
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Button.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The button is a click-able primitive widget to enable basic interaction, you\ncan place any other widget inside a button to make a more complex and\ninteresting click-able element in your UI.\n\n\x25cf Single Child\n\x25cf Clickable"));
				MetaData->SetValue(NewProp_OnReleased, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnReleased, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_OnReleased, TEXT("ToolTip"), TEXT("Called when the button is released"));
				MetaData->SetValue(NewProp_OnPressed, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnPressed, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_OnPressed, TEXT("ToolTip"), TEXT("Called when the button is pressed"));
				MetaData->SetValue(NewProp_OnClicked, TEXT("Category"), TEXT("Button|Event"));
				MetaData->SetValue(NewProp_OnClicked, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_OnClicked, TEXT("ToolTip"), TEXT("Called when the button is clicked"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_IsFocusable, TEXT("ToolTip"), TEXT("Sometimes a button should only be mouse-clickable and never keyboard focusable."));
				MetaData->SetValue(NewProp_TouchMethod, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_TouchMethod, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_TouchMethod, TEXT("ToolTip"), TEXT("The type of touch action required by the user to trigger the buttons 'Click'"));
				MetaData->SetValue(NewProp_ClickMethod, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_ClickMethod, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_ClickMethod, TEXT("ToolTip"), TEXT("The type of mouse action required by the user to trigger the buttons 'Click'"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("The color multiplier for the button background"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("sRGB"), TEXT("true"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("The color multiplier for the button content"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The button style used at runtime"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/Button.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("The template style asset, used to seed the mutable instance of the style."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UButton(Z_Construct_UClass_UButton, TEXT("UButton"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UButton);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnCheckBoxComponentStateChanged__DelegateSignature()
	{
		struct _Script_UMG_eventOnCheckBoxComponentStateChanged_Parms
		{
			bool bIsChecked;
		};
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnCheckBoxComponentStateChanged__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventOnCheckBoxComponentStateChanged_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsChecked, _Script_UMG_eventOnCheckBoxComponentStateChanged_Parms, bool);
			UProperty* NewProp_bIsChecked = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsChecked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsChecked, _Script_UMG_eventOnCheckBoxComponentStateChanged_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsChecked, _Script_UMG_eventOnCheckBoxComponentStateChanged_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheckBox_GetCheckedState()
	{
		struct CheckBox_eventGetCheckedState_Parms
		{
			TEnumAsByte<ECheckBoxState> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCheckBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCheckedState"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CheckBox_eventGetCheckedState_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, CheckBox_eventGetCheckedState_Parms), 0x0000000000000580, Z_Construct_UEnum_SlateCore_ECheckBoxState());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return the full current checked state."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheckBox_IsChecked()
	{
		struct CheckBox_eventIsChecked_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCheckBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsChecked"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CheckBox_eventIsChecked_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, CheckBox_eventIsChecked_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, CheckBox_eventIsChecked_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, CheckBox_eventIsChecked_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if the checkbox is currently checked"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheckBox_IsPressed()
	{
		struct CheckBox_eventIsPressed_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCheckBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CheckBox_eventIsPressed_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, CheckBox_eventIsPressed_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, CheckBox_eventIsPressed_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, CheckBox_eventIsPressed_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if this button is currently pressed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheckBox_SetCheckedState()
	{
		struct CheckBox_eventSetCheckedState_Parms
		{
			TEnumAsByte<ECheckBoxState> InCheckedState;
		};
		UObject* Outer=Z_Construct_UClass_UCheckBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCheckedState"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CheckBox_eventSetCheckedState_Parms));
			UProperty* NewProp_InCheckedState = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InCheckedState"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InCheckedState, CheckBox_eventSetCheckedState_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_ECheckBoxState());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the checked state."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCheckBox_SetIsChecked()
	{
		struct CheckBox_eventSetIsChecked_Parms
		{
			bool InIsChecked;
		};
		UObject* Outer=Z_Construct_UClass_UCheckBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsChecked"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CheckBox_eventSetIsChecked_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InIsChecked, CheckBox_eventSetIsChecked_Parms, bool);
			UProperty* NewProp_InIsChecked = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InIsChecked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InIsChecked, CheckBox_eventSetIsChecked_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InIsChecked, CheckBox_eventSetIsChecked_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the checked state."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCheckBox_NoRegister()
	{
		return UCheckBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UCheckBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UCheckBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCheckBox_GetCheckedState());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheckBox_IsChecked());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheckBox_IsPressed());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheckBox_SetCheckedState());
				OuterClass->LinkChild(Z_Construct_UFunction_UCheckBox_SetIsChecked());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnCheckStateChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnCheckStateChanged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnCheckStateChanged, UCheckBox), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnCheckBoxComponentStateChanged__DelegateSignature());
				UProperty* NewProp_BorderBackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BorderBackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BorderBackgroundColor_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UScriptStruct_FSlateColor());
				UProperty* NewProp_Padding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Padding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Padding_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_HorizontalAlignment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HorizontalAlignment"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(HorizontalAlignment, UCheckBox), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EHorizontalAlignment());
				UProperty* NewProp_UndeterminedPressedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UndeterminedPressedImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(UndeterminedPressedImage_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_UndeterminedHoveredImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UndeterminedHoveredImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(UndeterminedHoveredImage_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_UndeterminedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UndeterminedImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(UndeterminedImage_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_CheckedPressedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckedPressedImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CheckedPressedImage_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_CheckedHoveredImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckedHoveredImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CheckedHoveredImage_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_CheckedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckedImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CheckedImage_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_UncheckedPressedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UncheckedPressedImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(UncheckedPressedImage_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_UncheckedHoveredImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UncheckedHoveredImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(UncheckedHoveredImage_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_UncheckedImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UncheckedImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(UncheckedImage_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UCheckBox), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UCheckBox), 0x0000000000000005, Z_Construct_UScriptStruct_FCheckBoxStyle());
				UProperty* NewProp_CheckedStateDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckedStateDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(CheckedStateDelegate, UCheckBox), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetCheckBoxState__DelegateSignature());
				UProperty* NewProp_CheckedState = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CheckedState"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CheckedState, UCheckBox), 0x0000000000000001, Z_Construct_UEnum_SlateCore_ECheckBoxState());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheckBox_GetCheckedState()); // 2385308065
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheckBox_IsChecked()); // 3908018372
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheckBox_IsPressed()); // 568933576
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheckBox_SetCheckedState()); // 1908764791
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UCheckBox_SetIsChecked()); // 4260714527
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/CheckBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The checkbox widget allows you to display a toggled state of 'unchecked', 'checked' and\n'indeterminable.  You can use the checkbox for a classic checkbox, or as a toggle button,\nor as radio buttons.\n\n\x25cf Single Child\n\x25cf Toggle"));
				MetaData->SetValue(NewProp_OnCheckStateChanged, TEXT("Category"), TEXT("CheckBox|Event"));
				MetaData->SetValue(NewProp_OnCheckStateChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_OnCheckStateChanged, TEXT("ToolTip"), TEXT("Called when the checked state has changed"));
				MetaData->SetValue(NewProp_BorderBackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_BorderBackgroundColor, TEXT("ToolTip"), TEXT("The color of the background border"));
				MetaData->SetValue(NewProp_Padding, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_Padding, TEXT("ToolTip"), TEXT("Spacing between the check box image and its content"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_HorizontalAlignment, TEXT("ToolTip"), TEXT("How the content of the toggle button should align within the given space"));
				MetaData->SetValue(NewProp_UndeterminedPressedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UndeterminedPressedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is in an ambiguous state and pressed"));
				MetaData->SetValue(NewProp_UndeterminedHoveredImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UndeterminedHoveredImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is checked and hovered"));
				MetaData->SetValue(NewProp_UndeterminedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UndeterminedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is in an ambiguous state and hovered"));
				MetaData->SetValue(NewProp_CheckedPressedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_CheckedPressedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is checked and pressed"));
				MetaData->SetValue(NewProp_CheckedHoveredImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_CheckedHoveredImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is checked and hovered"));
				MetaData->SetValue(NewProp_CheckedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_CheckedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is checked"));
				MetaData->SetValue(NewProp_UncheckedPressedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UncheckedPressedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is unchecked and pressed"));
				MetaData->SetValue(NewProp_UncheckedHoveredImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UncheckedHoveredImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is unchecked and hovered"));
				MetaData->SetValue(NewProp_UncheckedImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_UncheckedImage, TEXT("ToolTip"), TEXT("Image to use when the checkbox is unchecked"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("Style of the check box"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The checkbox bar style"));
				MetaData->SetValue(NewProp_CheckedStateDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_CheckedStateDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the IsChecked."));
				MetaData->SetValue(NewProp_CheckedState, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_CheckedState, TEXT("ModuleRelativePath"), TEXT("Public/Components/CheckBox.h"));
				MetaData->SetValue(NewProp_CheckedState, TEXT("ToolTip"), TEXT("Whether the check box is currently in a checked state"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCheckBox(Z_Construct_UClass_UCheckBox, TEXT("UCheckBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCheckBox);
	UFunction* Z_Construct_UFunction_UInvalidationBox_InvalidateCache()
	{
		UObject* Outer=Z_Construct_UClass_UInvalidationBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InvalidateCache"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Invalidation Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/InvalidationBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UInvalidationBox_NoRegister()
	{
		return UInvalidationBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UInvalidationBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UInvalidationBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UInvalidationBox_InvalidateCache());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(CacheRelativeTransforms, UInvalidationBox, bool);
				UProperty* NewProp_CacheRelativeTransforms = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CacheRelativeTransforms"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CacheRelativeTransforms, UInvalidationBox), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(CacheRelativeTransforms, UInvalidationBox), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UInvalidationBox_InvalidateCache()); // 1486728417
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/InvalidationBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/InvalidationBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Invalidate\n\x25cf Single Child\n\x25cf Caching / Performance"));
				MetaData->SetValue(NewProp_CacheRelativeTransforms, TEXT("Category"), TEXT("Caching"));
				MetaData->SetValue(NewProp_CacheRelativeTransforms, TEXT("ModuleRelativePath"), TEXT("Public/Components/InvalidationBox.h"));
				MetaData->SetValue(NewProp_CacheRelativeTransforms, TEXT("ToolTip"), TEXT("Caches the locations for child draw elements relative to the invalidation box,\nthis adds extra overhead to drawing them every frame.  However, in cases where\nthe position of the invalidation boxes changes every frame this can be a big savings."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInvalidationBox(Z_Construct_UClass_UInvalidationBox, TEXT("UInvalidationBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UInvalidationBox);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnMenuOpenChangedEvent__DelegateSignature()
	{
		struct _Script_UMG_eventOnMenuOpenChangedEvent_Parms
		{
			bool bIsOpen;
		};
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMenuOpenChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventOnMenuOpenChangedEvent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsOpen, _Script_UMG_eventOnMenuOpenChangedEvent_Parms, bool);
			UProperty* NewProp_bIsOpen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsOpen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsOpen, _Script_UMG_eventOnMenuOpenChangedEvent_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsOpen, _Script_UMG_eventOnMenuOpenChangedEvent_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_Close()
	{
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Close"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Closes the menu if it is currently open."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_GetMenuPosition()
	{
		struct MenuAnchor_eventGetMenuPosition_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMenuPosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(MenuAnchor_eventGetMenuPosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, MenuAnchor_eventGetMenuPosition_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The current menu position"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_HasOpenSubMenus()
	{
		struct MenuAnchor_eventHasOpenSubMenus_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HasOpenSubMenus"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MenuAnchor_eventHasOpenSubMenus_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MenuAnchor_eventHasOpenSubMenus_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MenuAnchor_eventHasOpenSubMenus_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MenuAnchor_eventHasOpenSubMenus_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return Whether this menu has open submenus"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_IsOpen()
	{
		struct MenuAnchor_eventIsOpen_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsOpen"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MenuAnchor_eventIsOpen_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MenuAnchor_eventIsOpen_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MenuAnchor_eventIsOpen_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MenuAnchor_eventIsOpen_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if the popup is open; false otherwise."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_Open()
	{
		struct MenuAnchor_eventOpen_Parms
		{
			bool bFocusMenu;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Open"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MenuAnchor_eventOpen_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFocusMenu, MenuAnchor_eventOpen_Parms, bool);
			UProperty* NewProp_bFocusMenu = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFocusMenu"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFocusMenu, MenuAnchor_eventOpen_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bFocusMenu, MenuAnchor_eventOpen_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Opens the menu if it is not already open"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_ShouldOpenDueToClick()
	{
		struct MenuAnchor_eventShouldOpenDueToClick_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShouldOpenDueToClick"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(MenuAnchor_eventShouldOpenDueToClick_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, MenuAnchor_eventShouldOpenDueToClick_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, MenuAnchor_eventShouldOpenDueToClick_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, MenuAnchor_eventShouldOpenDueToClick_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if we should open the menu due to a click. Sometimes we should not, if\nthe same MouseDownEvent that just closed the menu is about to re-open it because it\nhappens to land on the button."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UMenuAnchor_ToggleOpen()
	{
		struct MenuAnchor_eventToggleOpen_Parms
		{
			bool bFocusOnOpen;
		};
		UObject* Outer=Z_Construct_UClass_UMenuAnchor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleOpen"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(MenuAnchor_eventToggleOpen_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFocusOnOpen, MenuAnchor_eventToggleOpen_Parms, bool);
			UProperty* NewProp_bFocusOnOpen = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFocusOnOpen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFocusOnOpen, MenuAnchor_eventToggleOpen_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bFocusOnOpen, MenuAnchor_eventToggleOpen_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Menu Anchor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Toggles the menus open state.\n\n@param bFocusOnOpen  Should we focus the popup as soon as it opens?"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UMenuAnchor_NoRegister()
	{
		return UMenuAnchor::StaticClass();
	}
	UClass* Z_Construct_UClass_UMenuAnchor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UMenuAnchor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_Close());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_GetMenuPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_HasOpenSubMenus());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_IsOpen());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_Open());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_ShouldOpenDueToClick());
				OuterClass->LinkChild(Z_Construct_UFunction_UMenuAnchor_ToggleOpen());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnMenuOpenChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMenuOpenChanged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMenuOpenChanged, UMenuAnchor), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnMenuOpenChangedEvent__DelegateSignature());
				UProperty* NewProp_Placement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Placement"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Placement, UMenuAnchor), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EMenuPlacement());
				UProperty* NewProp_OnGetMenuContentEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnGetMenuContentEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnGetMenuContentEvent, UMenuAnchor), 0x0000000000080001, Z_Construct_UDelegateFunction_UWidget_GetWidget__DelegateSignature());
				UProperty* NewProp_MenuClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MenuClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(MenuClass, UMenuAnchor), 0x0004000000000015, Z_Construct_UClass_UUserWidget_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMenuAnchor_Close()); // 755961286
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMenuAnchor_GetMenuPosition()); // 3633706083
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMenuAnchor_HasOpenSubMenus()); // 343023948
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMenuAnchor_IsOpen()); // 453186884
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMenuAnchor_Open()); // 1183500190
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMenuAnchor_ShouldOpenDueToClick()); // 2257746911
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UMenuAnchor_ToggleOpen()); // 360887886
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/MenuAnchor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The Menu Anchor allows you to specify an location that a popup menu should be anchored to,\nand should be summoned from.\n\x25cf Single Child\n\x25cf Popup"));
				MetaData->SetValue(NewProp_OnMenuOpenChanged, TEXT("Category"), TEXT("Menu Anchor|Event"));
				MetaData->SetValue(NewProp_OnMenuOpenChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(NewProp_OnMenuOpenChanged, TEXT("ToolTip"), TEXT("Called when the opened state of the menu changes"));
				MetaData->SetValue(NewProp_Placement, TEXT("Category"), TEXT("Menu Anchor"));
				MetaData->SetValue(NewProp_Placement, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(NewProp_Placement, TEXT("ToolTip"), TEXT("The placement location of the summoned widget."));
				MetaData->SetValue(NewProp_OnGetMenuContentEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnGetMenuContentEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(NewProp_OnGetMenuContentEvent, TEXT("ToolTip"), TEXT("Called when the menu content is requested to allow a more customized handling over what to display"));
				MetaData->SetValue(NewProp_MenuClass, TEXT("Category"), TEXT("Menu Anchor"));
				MetaData->SetValue(NewProp_MenuClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/MenuAnchor.h"));
				MetaData->SetValue(NewProp_MenuClass, TEXT("ToolTip"), TEXT("The widget class to spawn when the menu is required.  Creates the widget freshly each time.\nIf you want to customize the creation of the popup, you should bind a function to OnGetMenuContentEvent\ninstead."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UMenuAnchor(Z_Construct_UClass_UMenuAnchor, TEXT("UMenuAnchor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UMenuAnchor);
	UClass* Z_Construct_UClass_UNamedSlot_NoRegister()
	{
		return UNamedSlot::StaticClass();
	}
	UClass* Z_Construct_UClass_UNamedSlot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UNamedSlot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/NamedSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/NamedSlot.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows you to expose an external slot for your user widget.  When others reuse your user control,\nthey can put whatever they want in this named slot."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UNamedSlot(Z_Construct_UClass_UNamedSlot, TEXT("UNamedSlot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UNamedSlot);
	UClass* Z_Construct_UClass_USafeZone_NoRegister()
	{
		return USafeZone::StaticClass();
	}
	UClass* Z_Construct_UClass_USafeZone()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = USafeZone::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/SafeZone.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/SafeZone.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USafeZone(Z_Construct_UClass_USafeZone, TEXT("USafeZone"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USafeZone);
	UClass* Z_Construct_UClass_UScaleBox_NoRegister()
	{
		return UScaleBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UScaleBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UScaleBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_UserSpecifiedScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UserSpecifiedScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(UserSpecifiedScale, UScaleBox), 0x0000000000000015);
				UProperty* NewProp_Stretch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Stretch"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Stretch, UScaleBox), 0x0000000000000015, Z_Construct_UEnum_Slate_EStretch());
				UProperty* NewProp_StretchDirection = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StretchDirection"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(StretchDirection, UScaleBox), 0x0000000000000015, Z_Construct_UEnum_Slate_EStretchDirection());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ScaleBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows you to place content with a desired size and have it scale to meet the constraints placed on this box's alloted area.  If\nyou needed to have a background image scale to fill an area but not become distorted with different aspect ratios, or if you need\nto auto fit some text to an area, this is the control for you.\n\n\x25cf Single Child\n\x25cf Aspect Ratio"));
				MetaData->SetValue(NewProp_UserSpecifiedScale, TEXT("Category"), TEXT("Stretching"));
				MetaData->SetValue(NewProp_UserSpecifiedScale, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
				MetaData->SetValue(NewProp_UserSpecifiedScale, TEXT("ToolTip"), TEXT("Optional scale that can be specified by the User. Isn't used if Stretch != EStretch::UserSpecified"));
				MetaData->SetValue(NewProp_Stretch, TEXT("Category"), TEXT("Stretching"));
				MetaData->SetValue(NewProp_Stretch, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
				MetaData->SetValue(NewProp_Stretch, TEXT("ToolTip"), TEXT("The stretching rule to apply when content is stretched"));
				MetaData->SetValue(NewProp_StretchDirection, TEXT("Category"), TEXT("Stretching"));
				MetaData->SetValue(NewProp_StretchDirection, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScaleBox.h"));
				MetaData->SetValue(NewProp_StretchDirection, TEXT("ToolTip"), TEXT("Controls in what direction content can be scaled"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScaleBox(Z_Construct_UClass_UScaleBox, TEXT("UScaleBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScaleBox);
	UFunction* Z_Construct_UFunction_USizeBox_ClearHeightOverride()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearHeightOverride"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearMaxDesiredHeight()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMaxDesiredHeight"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearMaxDesiredWidth()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMaxDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearMinDesiredHeight()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMinDesiredHeight"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearMinDesiredWidth()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMinDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_ClearWidthOverride()
	{
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearWidthOverride"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetHeightOverride()
	{
		struct SizeBox_eventSetHeightOverride_Parms
		{
			float InHeightOverride;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetHeightOverride"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetHeightOverride_Parms));
			UProperty* NewProp_InHeightOverride = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InHeightOverride"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InHeightOverride, SizeBox_eventSetHeightOverride_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, ignore the content's desired size and report the HeightOverride as the Box's desired height."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetMaxDesiredHeight()
	{
		struct SizeBox_eventSetMaxDesiredHeight_Parms
		{
			float InMaxDesiredHeight;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaxDesiredHeight"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetMaxDesiredHeight_Parms));
			UProperty* NewProp_InMaxDesiredHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMaxDesiredHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InMaxDesiredHeight, SizeBox_eventSetMaxDesiredHeight_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, will report the MaxDesiredHeight if smaller than the content's desired height."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetMaxDesiredWidth()
	{
		struct SizeBox_eventSetMaxDesiredWidth_Parms
		{
			float InMaxDesiredWidth;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaxDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetMaxDesiredWidth_Parms));
			UProperty* NewProp_InMaxDesiredWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMaxDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InMaxDesiredWidth, SizeBox_eventSetMaxDesiredWidth_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, will report the MaxDesiredWidth if smaller than the content's desired width."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetMinDesiredHeight()
	{
		struct SizeBox_eventSetMinDesiredHeight_Parms
		{
			float InMinDesiredHeight;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinDesiredHeight"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetMinDesiredHeight_Parms));
			UProperty* NewProp_InMinDesiredHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinDesiredHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InMinDesiredHeight, SizeBox_eventSetMinDesiredHeight_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, will report the MinDesiredHeight if larger than the content's desired height."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetMinDesiredWidth()
	{
		struct SizeBox_eventSetMinDesiredWidth_Parms
		{
			float InMinDesiredWidth;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetMinDesiredWidth_Parms));
			UProperty* NewProp_InMinDesiredWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InMinDesiredWidth, SizeBox_eventSetMinDesiredWidth_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, will report the MinDesiredWidth if larger than the content's desired width."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USizeBox_SetWidthOverride()
	{
		struct SizeBox_eventSetWidthOverride_Parms
		{
			float InWidthOverride;
		};
		UObject* Outer=Z_Construct_UClass_USizeBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetWidthOverride"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SizeBox_eventSetWidthOverride_Parms));
			UProperty* NewProp_InWidthOverride = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWidthOverride"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InWidthOverride, SizeBox_eventSetWidthOverride_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Layout|Size Box"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("When specified, ignore the content's desired size and report the WidthOverride as the Box's desired width."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USizeBox_NoRegister()
	{
		return USizeBox::StaticClass();
	}
	UClass* Z_Construct_UClass_USizeBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = USizeBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearHeightOverride());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearMaxDesiredHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearMaxDesiredWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearMinDesiredHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearMinDesiredWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_ClearWidthOverride());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetHeightOverride());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetMaxDesiredHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetMaxDesiredWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetMinDesiredHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetMinDesiredWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_USizeBox_SetWidthOverride());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxDesiredHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDesiredHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxDesiredHeight, USizeBox), 0x0000000000000015);
				UProperty* NewProp_MaxDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxDesiredWidth, USizeBox), 0x0000000000000015);
				UProperty* NewProp_MinDesiredHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredHeight, USizeBox), 0x0000000000000015);
				UProperty* NewProp_MinDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredWidth, USizeBox), 0x0000000000000015);
				UProperty* NewProp_HeightOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HeightOverride"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HeightOverride, USizeBox), 0x0000000000000015);
				UProperty* NewProp_WidthOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidthOverride"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WidthOverride, USizeBox), 0x0000000000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MaxDesiredHeight, USizeBox, uint8);
				UProperty* NewProp_bOverride_MaxDesiredHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MaxDesiredHeight"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MaxDesiredHeight, USizeBox), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_MaxDesiredHeight, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MaxDesiredWidth, USizeBox, uint8);
				UProperty* NewProp_bOverride_MaxDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MaxDesiredWidth"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MaxDesiredWidth, USizeBox), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_MaxDesiredWidth, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MinDesiredHeight, USizeBox, uint8);
				UProperty* NewProp_bOverride_MinDesiredHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MinDesiredHeight"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MinDesiredHeight, USizeBox), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_MinDesiredHeight, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MinDesiredWidth, USizeBox, uint8);
				UProperty* NewProp_bOverride_MinDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MinDesiredWidth"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MinDesiredWidth, USizeBox), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_MinDesiredWidth, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_HeightOverride, USizeBox, uint8);
				UProperty* NewProp_bOverride_HeightOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_HeightOverride"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_HeightOverride, USizeBox), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_HeightOverride, USizeBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_WidthOverride, USizeBox, uint8);
				UProperty* NewProp_bOverride_WidthOverride = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_WidthOverride"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_WidthOverride, USizeBox), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_WidthOverride, USizeBox), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_ClearHeightOverride()); // 359319216
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_ClearMaxDesiredHeight()); // 262225122
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_ClearMaxDesiredWidth()); // 3158004402
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_ClearMinDesiredHeight()); // 709173006
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_ClearMinDesiredWidth()); // 3970764409
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_ClearWidthOverride()); // 425413852
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_SetHeightOverride()); // 459055697
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_SetMaxDesiredHeight()); // 1644463419
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_SetMaxDesiredWidth()); // 3395368992
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_SetMinDesiredHeight()); // 1554661892
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_SetMinDesiredWidth()); // 2470405851
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USizeBox_SetWidthOverride()); // 288257623
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/SizeBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A widget that allows you to specify the size it reports to have and desire.  Not all widgets report a desired size\nthat you actually desire.  Wrapping them in a SizeBox lets you have the Size Box force them to be a particular size.\n\n\x25cf Single Child\n\x25cf Fixed Size"));
				MetaData->SetValue(NewProp_MaxDesiredHeight, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MaxDesiredHeight, TEXT("editcondition"), TEXT("bOverride_MaxDesiredHeight"));
				MetaData->SetValue(NewProp_MaxDesiredHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_MaxDesiredHeight, TEXT("ToolTip"), TEXT("When specified, will report the MaxDesiredHeight if smaller than the content's desired height."));
				MetaData->SetValue(NewProp_MaxDesiredWidth, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MaxDesiredWidth, TEXT("editcondition"), TEXT("bOverride_MaxDesiredWidth"));
				MetaData->SetValue(NewProp_MaxDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_MaxDesiredWidth, TEXT("ToolTip"), TEXT("When specified, will report the MaxDesiredWidth if smaller than the content's desired width."));
				MetaData->SetValue(NewProp_MinDesiredHeight, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MinDesiredHeight, TEXT("editcondition"), TEXT("bOverride_MinDesiredHeight"));
				MetaData->SetValue(NewProp_MinDesiredHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_MinDesiredHeight, TEXT("ToolTip"), TEXT("When specified, will report the MinDesiredHeight if larger than the content's desired height."));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("editcondition"), TEXT("bOverride_MinDesiredWidth"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ToolTip"), TEXT("When specified, will report the MinDesiredWidth if larger than the content's desired width."));
				MetaData->SetValue(NewProp_HeightOverride, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_HeightOverride, TEXT("editcondition"), TEXT("bOverride_HeightOverride"));
				MetaData->SetValue(NewProp_HeightOverride, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_HeightOverride, TEXT("ToolTip"), TEXT("When specified, ignore the content's desired size and report the HeightOverride as the Box's desired height."));
				MetaData->SetValue(NewProp_WidthOverride, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_WidthOverride, TEXT("editcondition"), TEXT("bOverride_WidthOverride"));
				MetaData->SetValue(NewProp_WidthOverride, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_WidthOverride, TEXT("ToolTip"), TEXT("When specified, ignore the content's desired size and report the WidthOverride as the Box's desired width."));
				MetaData->SetValue(NewProp_bOverride_MaxDesiredHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_MaxDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_MinDesiredHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_MinDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_HeightOverride, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
				MetaData->SetValue(NewProp_bOverride_WidthOverride, TEXT("ModuleRelativePath"), TEXT("Public/Components/SizeBox.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USizeBox(Z_Construct_UClass_USizeBox, TEXT("USizeBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USizeBox);
	UFunction* Z_Construct_UFunction_UViewport_GetViewLocation()
	{
		struct Viewport_eventGetViewLocation_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(Viewport_eventGetViewLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Viewport_eventGetViewLocation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Camera"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UViewport_GetViewportWorld()
	{
		struct Viewport_eventGetViewportWorld_Parms
		{
			UWorld* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewportWorld"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Viewport_eventGetViewportWorld_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Viewport_eventGetViewportWorld_Parms), 0x0000000000000580, Z_Construct_UClass_UWorld_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UViewport_GetViewRotation()
	{
		struct Viewport_eventGetViewRotation_Parms
		{
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewRotation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(Viewport_eventGetViewRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, Viewport_eventGetViewRotation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Camera"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UViewport_SetViewLocation()
	{
		struct Viewport_eventSetViewLocation_Parms
		{
			FVector Location;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetViewLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Viewport_eventSetViewLocation_Parms));
			UProperty* NewProp_Location = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Location"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Location, Viewport_eventSetViewLocation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Camera"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UViewport_SetViewRotation()
	{
		struct Viewport_eventSetViewRotation_Parms
		{
			FRotator Rotation;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetViewRotation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Viewport_eventSetViewRotation_Parms));
			UProperty* NewProp_Rotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Rotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Rotation, Viewport_eventSetViewRotation_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Camera"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UViewport_Spawn()
	{
		struct Viewport_eventSpawn_Parms
		{
			TSubclassOf<AActor>  ActorClass;
			AActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UViewport();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Spawn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Viewport_eventSpawn_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Viewport_eventSpawn_Parms), 0x0000000000000580, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_ActorClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ActorClass, Viewport_eventSpawn_Parms), 0x0004000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UViewport_NoRegister()
	{
		return UViewport::StaticClass();
	}
	UClass* Z_Construct_UClass_UViewport()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UContentWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UViewport::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_GetViewLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_GetViewportWorld());
				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_GetViewRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_SetViewLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_SetViewRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UViewport_Spawn());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor, UViewport), 0x0000000000000001, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UViewport_GetViewLocation()); // 2621896505
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UViewport_GetViewportWorld()); // 1512901998
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UViewport_GetViewRotation()); // 4132316991
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UViewport_SetViewLocation()); // 3199638513
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UViewport_SetViewRotation()); // 2367164891
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UViewport_Spawn()); // 2966662583
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Viewport.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Viewport.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UViewport(Z_Construct_UClass_UViewport, TEXT("UViewport"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UViewport);
	UFunction* Z_Construct_UFunction_UGridPanel_AddChildToGrid()
	{
		struct GridPanel_eventAddChildToGrid_Parms
		{
			UWidget* Content;
			UGridSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGridPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToGrid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GridPanel_eventAddChildToGrid_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, GridPanel_eventAddChildToGrid_Parms), 0x0000000000000580, Z_Construct_UClass_UGridSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, GridPanel_eventAddChildToGrid_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGridPanel_NoRegister()
	{
		return UGridPanel::StaticClass();
	}
	UClass* Z_Construct_UClass_UGridPanel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UGridPanel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGridPanel_AddChildToGrid());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RowFill = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RowFill"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(RowFill, UGridPanel), 0x0000000000000015);
				UProperty* NewProp_RowFill_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RowFill, TEXT("RowFill"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_ColumnFill = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColumnFill"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ColumnFill, UGridPanel), 0x0000000000000015);
				UProperty* NewProp_ColumnFill_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ColumnFill, TEXT("ColumnFill"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGridPanel_AddChildToGrid()); // 2264601683
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/GridPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A panel that evenly divides up available space between all of its children.\n\n\x25cf Many Children"));
				MetaData->SetValue(NewProp_RowFill, TEXT("Category"), TEXT("Fill Rules"));
				MetaData->SetValue(NewProp_RowFill, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridPanel.h"));
				MetaData->SetValue(NewProp_RowFill, TEXT("ToolTip"), TEXT("The row fill rules"));
				MetaData->SetValue(NewProp_ColumnFill, TEXT("Category"), TEXT("Fill Rules"));
				MetaData->SetValue(NewProp_ColumnFill, TEXT("ModuleRelativePath"), TEXT("Public/Components/GridPanel.h"));
				MetaData->SetValue(NewProp_ColumnFill, TEXT("ToolTip"), TEXT("The column fill rules"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGridPanel(Z_Construct_UClass_UGridPanel, TEXT("UGridPanel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGridPanel);
	UFunction* Z_Construct_UFunction_UHorizontalBox_AddChildToHorizontalBox()
	{
		struct HorizontalBox_eventAddChildToHorizontalBox_Parms
		{
			UWidget* Content;
			UHorizontalBoxSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UHorizontalBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToHorizontalBox"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(HorizontalBox_eventAddChildToHorizontalBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, HorizontalBox_eventAddChildToHorizontalBox_Parms), 0x0000000000000580, Z_Construct_UClass_UHorizontalBoxSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, HorizontalBox_eventAddChildToHorizontalBox_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UHorizontalBox_NoRegister()
	{
		return UHorizontalBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UHorizontalBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UHorizontalBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UHorizontalBox_AddChildToHorizontalBox());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UHorizontalBox_AddChildToHorizontalBox()); // 2926194011
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/HorizontalBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/HorizontalBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows widgets to be laid out in a flow horizontally.\n\n\x25cf Many Children\n\x25cf Flow Horizontal"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UHorizontalBox(Z_Construct_UClass_UHorizontalBox, TEXT("UHorizontalBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UHorizontalBox);
	UFunction* Z_Construct_UFunction_UOverlay_AddChildToOverlay()
	{
		struct Overlay_eventAddChildToOverlay_Parms
		{
			UWidget* Content;
			UOverlaySlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UOverlay();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToOverlay"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Overlay_eventAddChildToOverlay_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, Overlay_eventAddChildToOverlay_Parms), 0x0000000000000580, Z_Construct_UClass_UOverlaySlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, Overlay_eventAddChildToOverlay_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Overlay.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UOverlay_NoRegister()
	{
		return UOverlay::StaticClass();
	}
	UClass* Z_Construct_UClass_UOverlay()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UOverlay::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UOverlay_AddChildToOverlay());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UOverlay_AddChildToOverlay()); // 588780842
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Overlay.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Overlay.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows widgets to be stacked on top of each other, uses simple flow layout for content on each layer."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UOverlay(Z_Construct_UClass_UOverlay, TEXT("UOverlay"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UOverlay);
	UFunction* Z_Construct_UFunction_UScrollBox_GetScrollOffset()
	{
		struct ScrollBox_eventGetScrollOffset_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetScrollOffset"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ScrollBox_eventGetScrollOffset_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, ScrollBox_eventGetScrollOffset_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the scroll offset of the scrollbox in Slate Units."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScrollBox_ScrollToEnd()
	{
		UObject* Outer=Z_Construct_UClass_UScrollBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScrollToEnd"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Scrolls the ScrollBox to the bottom instantly during the next layout pass."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScrollBox_ScrollToStart()
	{
		UObject* Outer=Z_Construct_UClass_UScrollBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScrollToStart"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Scrolls the ScrollBox to the top instantly"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScrollBox_ScrollWidgetIntoView()
	{
		struct ScrollBox_eventScrollWidgetIntoView_Parms
		{
			UWidget* WidgetToFind;
			bool AnimateScroll;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScrollWidgetIntoView"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScrollBox_eventScrollWidgetIntoView_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(AnimateScroll, ScrollBox_eventScrollWidgetIntoView_Parms, bool);
			UProperty* NewProp_AnimateScroll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AnimateScroll"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AnimateScroll, ScrollBox_eventScrollWidgetIntoView_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(AnimateScroll, ScrollBox_eventScrollWidgetIntoView_Parms), sizeof(bool), true);
			UProperty* NewProp_WidgetToFind = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetToFind"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WidgetToFind, ScrollBox_eventScrollWidgetIntoView_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_AnimateScroll"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Scrolls the ScrollBox to the widget during the next layout pass."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UScrollBox_SetScrollOffset()
	{
		struct ScrollBox_eventSetScrollOffset_Parms
		{
			float NewScrollOffset;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetScrollOffset"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScrollBox_eventSetScrollOffset_Parms));
			UProperty* NewProp_NewScrollOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewScrollOffset"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewScrollOffset, ScrollBox_eventSetScrollOffset_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Updates the scroll offset of the scrollbox.\n@param NewScrollOffset is in Slate Units."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UScrollBox_NoRegister()
	{
		return UScrollBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UScrollBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UScrollBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBox_GetScrollOffset());
				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBox_ScrollToEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBox_ScrollToStart());
				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBox_ScrollWidgetIntoView());
				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBox_SetScrollOffset());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AlwaysShowScrollbar, UScrollBox, bool);
				UProperty* NewProp_AlwaysShowScrollbar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AlwaysShowScrollbar"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AlwaysShowScrollbar, UScrollBox), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(AlwaysShowScrollbar, UScrollBox), sizeof(bool), true);
				UProperty* NewProp_ScrollbarThickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScrollbarThickness"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScrollbarThickness, UScrollBox), 0x0000000000000015, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_ConsumeMouseWheel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConsumeMouseWheel"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ConsumeMouseWheel, UScrollBox), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EConsumeMouseWheel());
				UProperty* NewProp_ScrollBarVisibility = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScrollBarVisibility"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ScrollBarVisibility, UScrollBox), 0x0000000000000015, Z_Construct_UEnum_UMG_ESlateVisibility());
				UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Orientation, UScrollBox), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EOrientation());
				UProperty* NewProp_BarStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BarStyle"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BarStyle_DEPRECATED, UScrollBox), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UScrollBox), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetBarStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetBarStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetBarStyle, UScrollBox), 0x0000000000000005, Z_Construct_UScriptStruct_FScrollBarStyle());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UScrollBox), 0x0000000000000005, Z_Construct_UScriptStruct_FScrollBoxStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScrollBox_GetScrollOffset()); // 20174608
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScrollBox_ScrollToEnd()); // 2565533663
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScrollBox_ScrollToStart()); // 3011013145
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScrollBox_ScrollWidgetIntoView()); // 175237128
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScrollBox_SetScrollOffset()); // 4234036009
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ScrollBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("An arbitrary scrollable collection of widgets.  Great for presenting 10-100 widgets in a list.  Doesn't support virtualization."));
				MetaData->SetValue(NewProp_AlwaysShowScrollbar, TEXT("Category"), TEXT("Scroll"));
				MetaData->SetValue(NewProp_AlwaysShowScrollbar, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_ScrollbarThickness, TEXT("Category"), TEXT("Scroll"));
				MetaData->SetValue(NewProp_ScrollbarThickness, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_ConsumeMouseWheel, TEXT("Category"), TEXT("Scroll"));
				MetaData->SetValue(NewProp_ConsumeMouseWheel, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_ConsumeMouseWheel, TEXT("ToolTip"), TEXT("Enable to always consume mouse wheel event, even when scrolling is not possible"));
				MetaData->SetValue(NewProp_ScrollBarVisibility, TEXT("Category"), TEXT("Scroll"));
				MetaData->SetValue(NewProp_ScrollBarVisibility, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_ScrollBarVisibility, TEXT("ToolTip"), TEXT("Visibility"));
				MetaData->SetValue(NewProp_Orientation, TEXT("Category"), TEXT("Scroll"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ToolTip"), TEXT("The orientation of the scrolling and stacking in the box."));
				MetaData->SetValue(NewProp_BarStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_WidgetBarStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetBarStyle, TEXT("DisplayName"), TEXT("Bar Style"));
				MetaData->SetValue(NewProp_WidgetBarStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_WidgetBarStyle, TEXT("ToolTip"), TEXT("The bar style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The style"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScrollBox(Z_Construct_UClass_UScrollBox, TEXT("UScrollBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScrollBox);
	UFunction* Z_Construct_UFunction_UUniformGridPanel_AddChildToUniformGrid()
	{
		struct UniformGridPanel_eventAddChildToUniformGrid_Parms
		{
			UWidget* Content;
			UUniformGridSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToUniformGrid"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridPanel_eventAddChildToUniformGrid_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, UniformGridPanel_eventAddChildToUniformGrid_Parms), 0x0000000000000580, Z_Construct_UClass_UUniformGridSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, UniformGridPanel_eventAddChildToUniformGrid_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotHeight()
	{
		struct UniformGridPanel_eventSetMinDesiredSlotHeight_Parms
		{
			float InMinDesiredSlotHeight;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinDesiredSlotHeight"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridPanel_eventSetMinDesiredSlotHeight_Parms));
			UProperty* NewProp_InMinDesiredSlotHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinDesiredSlotHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InMinDesiredSlotHeight, UniformGridPanel_eventSetMinDesiredSlotHeight_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Child Layout"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotWidth()
	{
		struct UniformGridPanel_eventSetMinDesiredSlotWidth_Parms
		{
			float InMinDesiredSlotWidth;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinDesiredSlotWidth"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridPanel_eventSetMinDesiredSlotWidth_Parms));
			UProperty* NewProp_InMinDesiredSlotWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMinDesiredSlotWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InMinDesiredSlotWidth, UniformGridPanel_eventSetMinDesiredSlotWidth_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Child Layout"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUniformGridPanel_SetSlotPadding()
	{
		struct UniformGridPanel_eventSetSlotPadding_Parms
		{
			FMargin InSlotPadding;
		};
		UObject* Outer=Z_Construct_UClass_UUniformGridPanel();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSlotPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(UniformGridPanel_eventSetSlotPadding_Parms));
			UProperty* NewProp_InSlotPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSlotPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InSlotPadding, UniformGridPanel_eventSetSlotPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMargin());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Child Layout"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UUniformGridPanel_NoRegister()
	{
		return UUniformGridPanel::StaticClass();
	}
	UClass* Z_Construct_UClass_UUniformGridPanel()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UUniformGridPanel::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridPanel_AddChildToUniformGrid());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotWidth());
				OuterClass->LinkChild(Z_Construct_UFunction_UUniformGridPanel_SetSlotPadding());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MinDesiredSlotHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredSlotHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredSlotHeight, UUniformGridPanel), 0x0000000000000015);
				UProperty* NewProp_MinDesiredSlotWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredSlotWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredSlotWidth, UUniformGridPanel), 0x0000000000000015);
				UProperty* NewProp_SlotPadding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SlotPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SlotPadding, UUniformGridPanel), 0x0000000000000015, Z_Construct_UScriptStruct_FMargin());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUniformGridPanel_AddChildToUniformGrid()); // 4061630071
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotHeight()); // 2555207266
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUniformGridPanel_SetMinDesiredSlotWidth()); // 1707016573
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUniformGridPanel_SetSlotPadding()); // 1597104807
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/UniformGridPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A panel that evenly divides up available space between all of its children."));
				MetaData->SetValue(NewProp_MinDesiredSlotHeight, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MinDesiredSlotHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
				MetaData->SetValue(NewProp_MinDesiredSlotHeight, TEXT("ToolTip"), TEXT("The minimum desired height of the slots"));
				MetaData->SetValue(NewProp_MinDesiredSlotWidth, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_MinDesiredSlotWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
				MetaData->SetValue(NewProp_MinDesiredSlotWidth, TEXT("ToolTip"), TEXT("The minimum desired width of the slots"));
				MetaData->SetValue(NewProp_SlotPadding, TEXT("Category"), TEXT("Child Layout"));
				MetaData->SetValue(NewProp_SlotPadding, TEXT("ModuleRelativePath"), TEXT("Public/Components/UniformGridPanel.h"));
				MetaData->SetValue(NewProp_SlotPadding, TEXT("ToolTip"), TEXT("Padding given to each slot"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUniformGridPanel(Z_Construct_UClass_UUniformGridPanel, TEXT("UUniformGridPanel"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUniformGridPanel);
	UFunction* Z_Construct_UFunction_UVerticalBox_AddChildToVerticalBox()
	{
		struct VerticalBox_eventAddChildToVerticalBox_Parms
		{
			UWidget* Content;
			UVerticalBoxSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVerticalBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildToVerticalBox"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VerticalBox_eventAddChildToVerticalBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VerticalBox_eventAddChildToVerticalBox_Parms), 0x0000000000000580, Z_Construct_UClass_UVerticalBoxSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, VerticalBox_eventAddChildToVerticalBox_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVerticalBox_NoRegister()
	{
		return UVerticalBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UVerticalBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UVerticalBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UVerticalBox_AddChildToVerticalBox());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UVerticalBox_AddChildToVerticalBox()); // 2272175628
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/VerticalBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/VerticalBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A vertical box widget is a layout panel allowing child widgets to be automatically laid out\nvertically.\n\n\x25cf Many Children\n\x25cf Flows Vertical"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVerticalBox(Z_Construct_UClass_UVerticalBox, TEXT("UVerticalBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVerticalBox);
	UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetActiveWidgetIndex()
	{
		struct WidgetSwitcher_eventGetActiveWidgetIndex_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcher();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetActiveWidgetIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetSwitcher_eventGetActiveWidgetIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetSwitcher_eventGetActiveWidgetIndex_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switcher"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot index of the currently active widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetNumWidgets()
	{
		struct WidgetSwitcher_eventGetNumWidgets_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcher();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNumWidgets"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetSwitcher_eventGetNumWidgets_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetSwitcher_eventGetNumWidgets_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switcher"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the number of widgets that this switcher manages."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcher_GetWidgetAtIndex()
	{
		struct WidgetSwitcher_eventGetWidgetAtIndex_Parms
		{
			int32 Index;
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcher();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetWidgetAtIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetSwitcher_eventGetWidgetAtIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetSwitcher_eventGetWidgetAtIndex_Parms), 0x0000000000000580, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, WidgetSwitcher_eventGetWidgetAtIndex_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switcher"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get a widget at the provided index"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidget()
	{
		struct WidgetSwitcher_eventSetActiveWidget_Parms
		{
			UWidget* Widget;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcher();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetActiveWidget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetSwitcher_eventSetActiveWidget_Parms));
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetSwitcher_eventSetActiveWidget_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switcher"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Activates the widget and makes it the active index."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidgetIndex()
	{
		struct WidgetSwitcher_eventSetActiveWidgetIndex_Parms
		{
			int32 Index;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetSwitcher();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetActiveWidgetIndex"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetSwitcher_eventSetActiveWidgetIndex_Parms));
			UProperty* NewProp_Index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Index"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Index, WidgetSwitcher_eventSetActiveWidgetIndex_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Switcher"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Activates the widget at the specified index."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetSwitcher_NoRegister()
	{
		return UWidgetSwitcher::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetSwitcher()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidgetSwitcher::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcher_GetActiveWidgetIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcher_GetNumWidgets());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcher_GetWidgetAtIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidget());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidgetIndex());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ActiveWidgetIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveWidgetIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ActiveWidgetIndex, UWidgetSwitcher), 0x0000000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetSwitcher_GetActiveWidgetIndex()); // 980226554
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetSwitcher_GetNumWidgets()); // 1590063021
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetSwitcher_GetWidgetAtIndex()); // 3580014368
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidget()); // 2423572379
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetSwitcher_SetActiveWidgetIndex()); // 389245440
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WidgetSwitcher.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A widget switcher is like a tab control, but without tabs. At most one widget is visible at time."));
				MetaData->SetValue(NewProp_ActiveWidgetIndex, TEXT("Category"), TEXT("Switcher"));
				MetaData->SetValue(NewProp_ActiveWidgetIndex, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ActiveWidgetIndex, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetSwitcher.h"));
				MetaData->SetValue(NewProp_ActiveWidgetIndex, TEXT("ToolTip"), TEXT("The slot index to display"));
				MetaData->SetValue(NewProp_ActiveWidgetIndex, TEXT("UIMin"), TEXT("0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetSwitcher(Z_Construct_UClass_UWidgetSwitcher, TEXT("UWidgetSwitcher"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetSwitcher);
	UFunction* Z_Construct_UFunction_UWrapBox_AddChildWrapBox()
	{
		struct WrapBox_eventAddChildWrapBox_Parms
		{
			UWidget* Content;
			UWrapBoxSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddChildWrapBox"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WrapBox_eventAddChildWrapBox_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WrapBox_eventAddChildWrapBox_Parms), 0x0000000000000580, Z_Construct_UClass_UWrapBoxSlot_NoRegister());
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, WrapBox_eventAddChildWrapBox_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Panel"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWrapBox_SetInnerSlotPadding()
	{
		struct WrapBox_eventSetInnerSlotPadding_Parms
		{
			FVector2D InPadding;
		};
		UObject* Outer=Z_Construct_UClass_UWrapBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInnerSlotPadding"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(WrapBox_eventSetInnerSlotPadding_Parms));
			UProperty* NewProp_InPadding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InPadding, WrapBox_eventSetInnerSlotPadding_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Content Layout"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the inner slot padding goes between slots sharing borders"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWrapBox_NoRegister()
	{
		return UWrapBox::StaticClass();
	}
	UClass* Z_Construct_UClass_UWrapBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPanelWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UWrapBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBox_AddChildWrapBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UWrapBox_SetInnerSlotPadding());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_InnerSlotPadding = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InnerSlotPadding"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InnerSlotPadding, UWrapBox), 0x0000000000000015, Z_Construct_UScriptStruct_FVector2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWrapBox_AddChildWrapBox()); // 2455525380
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWrapBox_SetInnerSlotPadding()); // 3387588882
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WrapBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Arranges widgets left-to-right.  When the widgets exceed the Width it will place widgets on the next line.\n\n\x25cf Many Children\n\x25cf Flows\n\x25cf Wraps"));
				MetaData->SetValue(NewProp_InnerSlotPadding, TEXT("Category"), TEXT("Content Layout"));
				MetaData->SetValue(NewProp_InnerSlotPadding, TEXT("ModuleRelativePath"), TEXT("Public/Components/WrapBox.h"));
				MetaData->SetValue(NewProp_InnerSlotPadding, TEXT("ToolTip"), TEXT("The inner slot padding goes between slots sharing borders"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWrapBox(Z_Construct_UClass_UWrapBox, TEXT("UWrapBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWrapBox);
	UFunction* Z_Construct_UFunction_UProgressBar_SetFillColorAndOpacity()
	{
		struct ProgressBar_eventSetFillColorAndOpacity_Parms
		{
			FLinearColor InColor;
		};
		UObject* Outer=Z_Construct_UClass_UProgressBar();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFillColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(ProgressBar_eventSetFillColorAndOpacity_Parms));
			UProperty* NewProp_InColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InColor, ProgressBar_eventSetFillColorAndOpacity_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Progress"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the fill color of the progress bar."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UProgressBar_SetIsMarquee()
	{
		struct ProgressBar_eventSetIsMarquee_Parms
		{
			bool InbIsMarquee;
		};
		UObject* Outer=Z_Construct_UClass_UProgressBar();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIsMarquee"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ProgressBar_eventSetIsMarquee_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InbIsMarquee, ProgressBar_eventSetIsMarquee_Parms, bool);
			UProperty* NewProp_InbIsMarquee = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InbIsMarquee"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InbIsMarquee, ProgressBar_eventSetIsMarquee_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InbIsMarquee, ProgressBar_eventSetIsMarquee_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Progress"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the progress bar to show as a marquee."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UProgressBar_SetPercent()
	{
		struct ProgressBar_eventSetPercent_Parms
		{
			float InPercent;
		};
		UObject* Outer=Z_Construct_UClass_UProgressBar();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPercent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ProgressBar_eventSetPercent_Parms));
			UProperty* NewProp_InPercent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InPercent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InPercent, ProgressBar_eventSetPercent_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Progress"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the current value of the ProgressBar."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UProgressBar_NoRegister()
	{
		return UProgressBar::StaticClass();
	}
	UClass* Z_Construct_UClass_UProgressBar()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UProgressBar::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UProgressBar_SetFillColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UProgressBar_SetIsMarquee());
				OuterClass->LinkChild(Z_Construct_UFunction_UProgressBar_SetPercent());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FillColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FillColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(FillColorAndOpacityDelegate, UProgressBar), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_FillColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FillColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FillColorAndOpacity, UProgressBar), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_PercentDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PercentDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(PercentDelegate, UProgressBar), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsMarquee, UProgressBar, bool);
				UProperty* NewProp_bIsMarquee = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsMarquee"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsMarquee, UProgressBar), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bIsMarquee, UProgressBar), sizeof(bool), true);
				UProperty* NewProp_BarFillType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BarFillType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BarFillType, UProgressBar), 0x0000000000000015, Z_Construct_UEnum_Slate_EProgressBarFillType());
				UProperty* NewProp_Percent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Percent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Percent, UProgressBar), 0x0000000000000015);
				UProperty* NewProp_MarqueeImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MarqueeImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MarqueeImage_DEPRECATED, UProgressBar), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_FillImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FillImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FillImage_DEPRECATED, UProgressBar), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_BackgroundImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BackgroundImage_DEPRECATED, UProgressBar), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UProgressBar), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UProgressBar), 0x0000000000000005, Z_Construct_UScriptStruct_FProgressBarStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UProgressBar_SetFillColorAndOpacity()); // 349659013
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UProgressBar_SetIsMarquee()); // 993804650
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UProgressBar_SetPercent()); // 3791963306
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ProgressBar.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The progress bar widget is a simple bar that fills up that can be restyled to fit any number of uses.\n\n\x25cf No Children"));
				MetaData->SetValue(NewProp_FillColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_FillColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_FillColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_FillColorAndOpacity, TEXT("ToolTip"), TEXT("Fill Color and Opacity"));
				MetaData->SetValue(NewProp_PercentDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_PercentDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the text of the widget"));
				MetaData->SetValue(NewProp_bIsMarquee, TEXT("Category"), TEXT("Progress"));
				MetaData->SetValue(NewProp_bIsMarquee, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_BarFillType, TEXT("Category"), TEXT("Progress"));
				MetaData->SetValue(NewProp_BarFillType, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_BarFillType, TEXT("ToolTip"), TEXT("Defines if this progress bar fills Left to right or right to left"));
				MetaData->SetValue(NewProp_Percent, TEXT("Category"), TEXT("Progress"));
				MetaData->SetValue(NewProp_Percent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_Percent, TEXT("ToolTip"), TEXT("Used to determine the fill position of the progress bar ranging 0..1"));
				MetaData->SetValue(NewProp_Percent, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Percent, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_MarqueeImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_MarqueeImage, TEXT("ToolTip"), TEXT("The brush to use as the marquee image"));
				MetaData->SetValue(NewProp_FillImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_FillImage, TEXT("ToolTip"), TEXT("The brush to use as the fill image"));
				MetaData->SetValue(NewProp_BackgroundImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_BackgroundImage, TEXT("ToolTip"), TEXT("The brush to use as the background of the progress bar"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ToolTip"), TEXT("Style used for the progress bar"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ProgressBar.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The progress bar style"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UProgressBar(Z_Construct_UClass_UProgressBar, TEXT("UProgressBar"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UProgressBar);
	UClass* Z_Construct_UClass_URichTextBlock_NoRegister()
	{
		return URichTextBlock::StaticClass();
	}
	UClass* Z_Construct_UClass_URichTextBlock()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = URichTextBlock::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Decorators = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Decorators"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Decorators, URichTextBlock), 0x0000088000000009);
				UProperty* NewProp_Decorators_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Decorators, TEXT("Decorators"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0002000000080008, Z_Construct_UClass_URichTextBlockDecorator_NoRegister());
				UProperty* NewProp_LineHeightPercentage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LineHeightPercentage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LineHeightPercentage, URichTextBlock), 0x00000c0000000015);
				UProperty* NewProp_Margin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Margin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Margin, URichTextBlock), 0x00000c0000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_WrapTextAt = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WrapTextAt"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WrapTextAt, URichTextBlock), 0x00000c0000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AutoWrapText, URichTextBlock, bool);
				UProperty* NewProp_AutoWrapText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AutoWrapText"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AutoWrapText, URichTextBlock), 0x0000080000000015, CPP_BOOL_PROPERTY_BITMASK(AutoWrapText, URichTextBlock), sizeof(bool), true);
				UProperty* NewProp_Justification = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Justification"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Justification, URichTextBlock), 0x0000080000000015, Z_Construct_UEnum_Slate_ETextJustify());
				UProperty* NewProp_Color = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Color"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Color, URichTextBlock), 0x0000080000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font, URichTextBlock), 0x0000080000000015, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_TextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(TextDelegate, URichTextBlock), 0x0000080000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, URichTextBlock), 0x0000080000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/RichTextBlock.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The rich text block\n\n\x25cf Fancy Text\n\x25cf No Children"));
				MetaData->SetValue(NewProp_Decorators, TEXT("Category"), TEXT("Decorators"));
				MetaData->SetValue(NewProp_Decorators, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Decorators, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Decorators_Inner, TEXT("Category"), TEXT("Decorators"));
				MetaData->SetValue(NewProp_Decorators_Inner, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Decorators_Inner, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_LineHeightPercentage, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_LineHeightPercentage, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_LineHeightPercentage, TEXT("ToolTip"), TEXT("The amount to scale each lines height by."));
				MetaData->SetValue(NewProp_Margin, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Margin, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Margin, TEXT("ToolTip"), TEXT("The amount of blank space left around the edges of text area."));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("ToolTip"), TEXT("Whether text wraps onto a new line when it's length exceeds this width; if this value is zero or negative, no wrapping occurs."));
				MetaData->SetValue(NewProp_AutoWrapText, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_AutoWrapText, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_AutoWrapText, TEXT("ToolTip"), TEXT("True if we're wrapping text automatically based on the computed horizontal space for this widget"));
				MetaData->SetValue(NewProp_Justification, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Justification, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Justification, TEXT("ToolTip"), TEXT("How the text should be aligned with the margin."));
				MetaData->SetValue(NewProp_Color, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Color, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Color, TEXT("ToolTip"), TEXT("The default color for the text."));
				MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("The default font for the text."));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the text of the widget"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/RichTextBlock.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT("true"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text to display"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_URichTextBlock(Z_Construct_UClass_URichTextBlock, TEXT("URichTextBlock"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(URichTextBlock);
	UFunction* Z_Construct_UFunction_UScrollBar_SetState()
	{
		struct ScrollBar_eventSetState_Parms
		{
			float InOffsetFraction;
			float InThumbSizeFraction;
		};
		UObject* Outer=Z_Construct_UClass_UScrollBar();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetState"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ScrollBar_eventSetState_Parms));
			UProperty* NewProp_InThumbSizeFraction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InThumbSizeFraction"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InThumbSizeFraction, ScrollBar_eventSetState_Parms), 0x0000000000000080);
			UProperty* NewProp_InOffsetFraction = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InOffsetFraction"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InOffsetFraction, ScrollBar_eventSetState_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Scrolling"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the offset and size of the track's thumb.\nNote that the maximum offset is 1.0-ThumbSizeFraction.\nIf the user can view 1/3 of the items in a single page, the maximum offset will be ~0.667f\n\n@param InOffsetFraction     Offset of the thumbnail from the top as a fraction of the total available scroll space.\n@param InThumbSizeFraction  Size of thumbnail as a fraction of the total available scroll space."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UScrollBar_NoRegister()
	{
		return UScrollBar::StaticClass();
	}
	UClass* Z_Construct_UClass_UScrollBar()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UScrollBar::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UScrollBar_SetState());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Thickness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Thickness"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Thickness, UScrollBar), 0x0000000000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Orientation, UScrollBar), 0x0000000000000001, Z_Construct_UEnum_SlateCore_EOrientation());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAlwaysShowScrollbar, UScrollBar, bool);
				UProperty* NewProp_bAlwaysShowScrollbar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAlwaysShowScrollbar"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAlwaysShowScrollbar, UScrollBar), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bAlwaysShowScrollbar, UScrollBar), sizeof(bool), true);
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UScrollBar), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, UScrollBar), 0x0000000000000005, Z_Construct_UScriptStruct_FScrollBarStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UScrollBar_SetState()); // 3157466781
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ScrollBar.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_Thickness, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_Thickness, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_Thickness, TEXT("ToolTip"), TEXT("The thickness of the scrollbar thumb"));
				MetaData->SetValue(NewProp_Orientation, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_bAlwaysShowScrollbar, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_bAlwaysShowScrollbar, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/ScrollBar.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("Style of the scrollbar"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UScrollBar(Z_Construct_UClass_UScrollBar, TEXT("UScrollBar"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UScrollBar);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnFloatValueChangedEvent__DelegateSignature()
	{
		struct _Script_UMG_eventOnFloatValueChangedEvent_Parms
		{
			float Value;
		};
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnFloatValueChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_UMG_eventOnFloatValueChangedEvent_Parms));
			UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, _Script_UMG_eventOnFloatValueChangedEvent_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnMouseCaptureEndEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseCaptureEndEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_UMG_OnMouseCaptureBeginEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseCaptureBeginEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_GetValue()
	{
		struct Slider_eventGetValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(Slider_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, Slider_eventGetValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the current value of the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_SetIndentHandle()
	{
		struct Slider_eventSetIndentHandle_Parms
		{
			bool InValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetIndentHandle"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Slider_eventSetIndentHandle_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InValue, Slider_eventSetIndentHandle_Parms, bool);
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InValue, Slider_eventSetIndentHandle_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InValue, Slider_eventSetIndentHandle_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets if the slidable area should be indented to fit the handle"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_SetLocked()
	{
		struct Slider_eventSetLocked_Parms
		{
			bool InValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLocked"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Slider_eventSetLocked_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(InValue, Slider_eventSetLocked_Parms, bool);
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(InValue, Slider_eventSetLocked_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(InValue, Slider_eventSetLocked_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the handle to be interactive or fixed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USlider_SetValue()
	{
		struct Slider_eventSetValue_Parms
		{
			float InValue;
		};
		UObject* Outer=Z_Construct_UClass_USlider();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Slider_eventSetValue_Parms));
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InValue, Slider_eventSetValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the current value of the slider."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USlider_NoRegister()
	{
		return USlider::StaticClass();
	}
	UClass* Z_Construct_UClass_USlider()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = USlider::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_USlider_GetValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USlider_SetIndentHandle());
				OuterClass->LinkChild(Z_Construct_UFunction_USlider_SetLocked());
				OuterClass->LinkChild(Z_Construct_UFunction_USlider_SetValue());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnValueChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnValueChanged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnValueChanged, USlider), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnFloatValueChangedEvent__DelegateSignature());
				UProperty* NewProp_OnMouseCaptureEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseCaptureEnd"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMouseCaptureEnd, USlider), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnMouseCaptureEndEvent__DelegateSignature());
				UProperty* NewProp_OnMouseCaptureBegin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnMouseCaptureBegin"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnMouseCaptureBegin, USlider), 0x0000000010080000, Z_Construct_UDelegateFunction_UMG_OnMouseCaptureBeginEvent__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Locked, USlider, bool);
				UProperty* NewProp_Locked = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Locked"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Locked, USlider), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(Locked, USlider), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(IndentHandle, USlider, bool);
				UProperty* NewProp_IndentHandle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("IndentHandle"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IndentHandle, USlider), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(IndentHandle, USlider), sizeof(bool), true);
				UProperty* NewProp_SliderHandleColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SliderHandleColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SliderHandleColor, USlider), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_SliderBarColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SliderBarColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SliderBarColor, USlider), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_Orientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Orientation"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Orientation, USlider), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EOrientation());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, USlider), 0x0000000000000005, Z_Construct_UScriptStruct_FSliderStyle());
				UProperty* NewProp_ValueDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ValueDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(ValueDelegate, USlider), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature());
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, USlider), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USlider_GetValue()); // 203841357
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USlider_SetIndentHandle()); // 3197460032
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USlider_SetLocked()); // 3680946655
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USlider_SetValue()); // 1169684004
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Slider.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A simple widget that shows a sliding bar with a handle that allows you to control the value between 0..1.\n\n\x25cf No Children"));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("ToolTip"), TEXT("Called when the value is changed by slider or typing."));
				MetaData->SetValue(NewProp_OnMouseCaptureEnd, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnMouseCaptureEnd, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_OnMouseCaptureEnd, TEXT("ToolTip"), TEXT("Invoked when the mouse is released and a capture ends."));
				MetaData->SetValue(NewProp_OnMouseCaptureBegin, TEXT("Category"), TEXT("Widget Event"));
				MetaData->SetValue(NewProp_OnMouseCaptureBegin, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_OnMouseCaptureBegin, TEXT("ToolTip"), TEXT("Invoked when the mouse is pressed and a capture begins."));
				MetaData->SetValue(NewProp_Locked, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Locked, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_Locked, TEXT("ToolTip"), TEXT("Whether the handle is interactive or fixed."));
				MetaData->SetValue(NewProp_IndentHandle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_IndentHandle, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_IndentHandle, TEXT("ToolTip"), TEXT("Whether the slidable area should be indented to fit the handle."));
				MetaData->SetValue(NewProp_SliderHandleColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_SliderHandleColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_SliderHandleColor, TEXT("ToolTip"), TEXT("The color to draw the slider handle in."));
				MetaData->SetValue(NewProp_SliderBarColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_SliderBarColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_SliderBarColor, TEXT("ToolTip"), TEXT("The color to draw the slider bar in."));
				MetaData->SetValue(NewProp_Orientation, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_Orientation, TEXT("ToolTip"), TEXT("The slider's orientation."));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The progress bar style"));
				MetaData->SetValue(NewProp_ValueDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_ValueDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the value of the widget"));
				MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Value, TEXT("ClampMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Value, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Public/Components/Slider.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("The volume value to display."));
				MetaData->SetValue(NewProp_Value, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_Value, TEXT("UIMin"), TEXT("0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USlider(Z_Construct_UClass_USlider, TEXT("USlider"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USlider);
	UFunction* Z_Construct_UFunction_USpacer_SetSize()
	{
		struct Spacer_eventSetSize_Parms
		{
			FVector2D InSize;
		};
		UObject* Outer=Z_Construct_UClass_USpacer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(Spacer_eventSetSize_Parms));
			UProperty* NewProp_InSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InSize, Spacer_eventSetSize_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Spacer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the size of the spacer"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USpacer_NoRegister()
	{
		return USpacer::StaticClass();
	}
	UClass* Z_Construct_UClass_USpacer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = USpacer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_USpacer_SetSize());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Size"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Size, USpacer), 0x0000000000000015, Z_Construct_UScriptStruct_FVector2D());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpacer_SetSize()); // 4080166960
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Spacer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Spacer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A spacer widget; it does not have a visual representation, and just provides padding between other widgets.\n\n\x25cf No Children"));
				MetaData->SetValue(NewProp_Size, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Size, TEXT("ModuleRelativePath"), TEXT("Public/Components/Spacer.h"));
				MetaData->SetValue(NewProp_Size, TEXT("ToolTip"), TEXT("The size of the spacer"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpacer(Z_Construct_UClass_USpacer, TEXT("USpacer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpacer);
	UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnSpinBoxBeginSliderMovement__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature()
	{
		struct SpinBox_eventOnSpinBoxValueCommittedEvent_Parms
		{
			float InValue;
			TEnumAsByte<ETextCommit::Type> CommitMethod;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnSpinBoxValueCommittedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(SpinBox_eventOnSpinBoxValueCommittedEvent_Parms));
			UProperty* NewProp_CommitMethod = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CommitMethod"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(CommitMethod, SpinBox_eventOnSpinBoxValueCommittedEvent_Parms), 0x0000000000000080, Z_Construct_UEnum_SlateCore_ETextCommit());
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InValue, SpinBox_eventOnSpinBoxValueCommittedEvent_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature()
	{
		struct SpinBox_eventOnSpinBoxValueChangedEvent_Parms
		{
			float InValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnSpinBoxValueChangedEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(SpinBox_eventOnSpinBoxValueChangedEvent_Parms));
			UProperty* NewProp_InValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InValue, SpinBox_eventOnSpinBoxValueChangedEvent_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_ClearMaxSliderValue()
	{
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMaxSliderValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clear the maximum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_ClearMaxValue()
	{
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMaxValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clear the maximum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_ClearMinSliderValue()
	{
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMinSliderValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clear the minimum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_ClearMinValue()
	{
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearMinValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Clear the minimum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_GetMaxSliderValue()
	{
		struct SpinBox_eventGetMaxSliderValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMaxSliderValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SpinBox_eventGetMaxSliderValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpinBox_eventGetMaxSliderValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current maximum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_GetMaxValue()
	{
		struct SpinBox_eventGetMaxValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMaxValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SpinBox_eventGetMaxValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpinBox_eventGetMaxValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current maximum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_GetMinSliderValue()
	{
		struct SpinBox_eventGetMinSliderValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMinSliderValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SpinBox_eventGetMinSliderValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpinBox_eventGetMinSliderValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current minimum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_GetMinValue()
	{
		struct SpinBox_eventGetMinValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMinValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SpinBox_eventGetMinValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpinBox_eventGetMinValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current minimum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_GetValue()
	{
		struct SpinBox_eventGetValue_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(SpinBox_eventGetValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpinBox_eventGetValue_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current value of the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetForegroundColor()
	{
		struct SpinBox_eventSetForegroundColor_Parms
		{
			FSlateColor InForegroundColor;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetForegroundColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetForegroundColor_Parms));
			UProperty* NewProp_InForegroundColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InForegroundColor, SpinBox_eventSetForegroundColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FSlateColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetMaxSliderValue()
	{
		struct SpinBox_eventSetMaxSliderValue_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaxSliderValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetMaxSliderValue_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewValue, SpinBox_eventSetMaxSliderValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the maximum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetMaxValue()
	{
		struct SpinBox_eventSetMaxValue_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaxValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetMaxValue_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewValue, SpinBox_eventSetMaxValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the maximum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetMinSliderValue()
	{
		struct SpinBox_eventSetMinSliderValue_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinSliderValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetMinSliderValue_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewValue, SpinBox_eventSetMinSliderValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the minimum value that can be specified using the slider."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetMinValue()
	{
		struct SpinBox_eventSetMinValue_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMinValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetMinValue_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewValue, SpinBox_eventSetMinValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the minimum value that can be manually set in the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpinBox_SetValue()
	{
		struct SpinBox_eventSetValue_Parms
		{
			float NewValue;
		};
		UObject* Outer=Z_Construct_UClass_USpinBox();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpinBox_eventSetValue_Parms));
			UProperty* NewProp_NewValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NewValue, SpinBox_eventSetValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the value of the spin box."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USpinBox_NoRegister()
	{
		return USpinBox::StaticClass();
	}
	UClass* Z_Construct_UClass_USpinBox()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = USpinBox::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_ClearMaxSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_ClearMaxValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_ClearMinSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_ClearMinValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_GetMaxSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_GetMaxValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_GetMinSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_GetMinValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_GetValue());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetForegroundColor());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetMaxSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetMaxValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetMinSliderValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetMinValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USpinBox_SetValue());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MaxSliderValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxSliderValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxSliderValue, USpinBox), 0x0000080000000001);
				UProperty* NewProp_MinSliderValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinSliderValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinSliderValue, USpinBox), 0x0000080000000001);
				UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, USpinBox), 0x0000080000000001);
				UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinValue, USpinBox), 0x0000080000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MaxSliderValue, USpinBox, uint8);
				UProperty* NewProp_bOverride_MaxSliderValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MaxSliderValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MaxSliderValue, USpinBox), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_MaxSliderValue, USpinBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MinSliderValue, USpinBox, uint8);
				UProperty* NewProp_bOverride_MinSliderValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MinSliderValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MinSliderValue, USpinBox), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_MinSliderValue, USpinBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MaxValue, USpinBox, uint8);
				UProperty* NewProp_bOverride_MaxValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MaxValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MaxValue, USpinBox), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_MaxValue, USpinBox), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOverride_MinValue, USpinBox, uint8);
				UProperty* NewProp_bOverride_MinValue = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bOverride_MinValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOverride_MinValue, USpinBox), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bOverride_MinValue, USpinBox), sizeof(uint8), false);
				UProperty* NewProp_OnEndSliderMovement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnEndSliderMovement"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnEndSliderMovement, USpinBox), 0x0000000010080000, Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature());
				UProperty* NewProp_OnBeginSliderMovement = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnBeginSliderMovement"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnBeginSliderMovement, USpinBox), 0x0000000010080000, Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature());
				UProperty* NewProp_OnValueCommitted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnValueCommitted"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnValueCommitted, USpinBox), 0x0000000010080000, Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature());
				UProperty* NewProp_OnValueChanged = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnValueChanged"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnValueChanged, USpinBox), 0x0000000010080000, Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature());
				UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor, USpinBox), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateColor());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SelectAllTextOnCommit, USpinBox, bool);
				UProperty* NewProp_SelectAllTextOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectAllTextOnCommit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SelectAllTextOnCommit, USpinBox), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(SelectAllTextOnCommit, USpinBox), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ClearKeyboardFocusOnCommit, USpinBox, bool);
				UProperty* NewProp_ClearKeyboardFocusOnCommit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ClearKeyboardFocusOnCommit"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ClearKeyboardFocusOnCommit, USpinBox), 0x0000040000000015, CPP_BOOL_PROPERTY_BITMASK(ClearKeyboardFocusOnCommit, USpinBox), sizeof(bool), true);
				UProperty* NewProp_MinDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredWidth, USpinBox), 0x0000040000000015);
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font, USpinBox), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_SliderExponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SliderExponent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(SliderExponent, USpinBox), 0x0000000000000015);
				UProperty* NewProp_Delta = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Delta"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Delta, USpinBox), 0x0000000000000015);
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, USpinBox), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
				UProperty* NewProp_WidgetStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WidgetStyle, USpinBox), 0x0000000000000005, Z_Construct_UScriptStruct_FSpinBoxStyle());
				UProperty* NewProp_ValueDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ValueDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(ValueDelegate, USpinBox), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature());
				UProperty* NewProp_Value = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Value, USpinBox), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_ClearMaxSliderValue()); // 1207864891
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_ClearMaxValue()); // 2836128477
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_ClearMinSliderValue()); // 2943695471
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_ClearMinValue()); // 2283355045
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_GetMaxSliderValue()); // 3929546033
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_GetMaxValue()); // 817866895
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_GetMinSliderValue()); // 3674285247
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_GetMinValue()); // 157210303
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_GetValue()); // 3266362011
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature()); // 1063661798
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature()); // 3187149214
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature()); // 4017779405
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_SetForegroundColor()); // 3079149915
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_SetMaxSliderValue()); // 807428309
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_SetMaxValue()); // 1689337140
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_SetMinSliderValue()); // 3876661134
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_SetMinValue()); // 65081324
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USpinBox_SetValue()); // 2824838586
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/SpinBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A numerical entry box that allows for direct entry of the number or allows the user to click and slide the number."));
				MetaData->SetValue(NewProp_MaxSliderValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_MaxSliderValue, TEXT("DisplayName"), TEXT("Maximum Slider Value"));
				MetaData->SetValue(NewProp_MaxSliderValue, TEXT("editcondition"), TEXT("bOverride_MaxSliderValue"));
				MetaData->SetValue(NewProp_MaxSliderValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_MaxSliderValue, TEXT("ToolTip"), TEXT("The maximum allowable value that can be specified using the slider"));
				MetaData->SetValue(NewProp_MinSliderValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_MinSliderValue, TEXT("DisplayName"), TEXT("Minimum Slider Value"));
				MetaData->SetValue(NewProp_MinSliderValue, TEXT("editcondition"), TEXT("bOverride_MinSliderValue"));
				MetaData->SetValue(NewProp_MinSliderValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_MinSliderValue, TEXT("ToolTip"), TEXT("The minimum allowable value that can be specified using the slider"));
				MetaData->SetValue(NewProp_MaxValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_MaxValue, TEXT("DisplayName"), TEXT("Maximum Value"));
				MetaData->SetValue(NewProp_MaxValue, TEXT("editcondition"), TEXT("bOverride_MaxValue"));
				MetaData->SetValue(NewProp_MaxValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_MaxValue, TEXT("ToolTip"), TEXT("The maximum allowable value that can be manually entered into the spin box"));
				MetaData->SetValue(NewProp_MinValue, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_MinValue, TEXT("DisplayName"), TEXT("Minimum Value"));
				MetaData->SetValue(NewProp_MinValue, TEXT("editcondition"), TEXT("bOverride_MinValue"));
				MetaData->SetValue(NewProp_MinValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_MinValue, TEXT("ToolTip"), TEXT("The minimum allowable value that can be manually entered into the spin box"));
				MetaData->SetValue(NewProp_bOverride_MaxSliderValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_bOverride_MaxSliderValue, TEXT("ToolTip"), TEXT("Whether the optional MaxSliderValue attribute of the widget is set"));
				MetaData->SetValue(NewProp_bOverride_MinSliderValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_bOverride_MinSliderValue, TEXT("ToolTip"), TEXT("Whether the optional MinSliderValue attribute of the widget is set"));
				MetaData->SetValue(NewProp_bOverride_MaxValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_bOverride_MaxValue, TEXT("ToolTip"), TEXT("Whether the optional MaxValue attribute of the widget is set"));
				MetaData->SetValue(NewProp_bOverride_MinValue, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_bOverride_MinValue, TEXT("ToolTip"), TEXT("Whether the optional MinValue attribute of the widget is set"));
				MetaData->SetValue(NewProp_OnEndSliderMovement, TEXT("Category"), TEXT("SpinBox|Events"));
				MetaData->SetValue(NewProp_OnEndSliderMovement, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_OnEndSliderMovement, TEXT("ToolTip"), TEXT("Called right after the slider handle is released by the user"));
				MetaData->SetValue(NewProp_OnBeginSliderMovement, TEXT("Category"), TEXT("SpinBox|Events"));
				MetaData->SetValue(NewProp_OnBeginSliderMovement, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_OnBeginSliderMovement, TEXT("ToolTip"), TEXT("Called right before the slider begins to move"));
				MetaData->SetValue(NewProp_OnValueCommitted, TEXT("Category"), TEXT("SpinBox|Events"));
				MetaData->SetValue(NewProp_OnValueCommitted, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_OnValueCommitted, TEXT("ToolTip"), TEXT("Called when the value is committed. Occurs when the user presses Enter or the text box loses focus."));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("Category"), TEXT("SpinBox|Events"));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_OnValueChanged, TEXT("ToolTip"), TEXT("Called when the value is changed interactively by the user"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("Category"), TEXT("Input"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_SelectAllTextOnCommit, TEXT("ToolTip"), TEXT("Whether to select the text in the spin box when the value is committed"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("Category"), TEXT("Input"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_ClearKeyboardFocusOnCommit, TEXT("ToolTip"), TEXT("Whether to remove the keyboard focus from the spin box when the value is committed"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("Category"), TEXT("Display"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("DisplayName"), TEXT("Minimum Desired Width"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ToolTip"), TEXT("The minimum width of the spin box"));
				MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Display"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("Font color and opacity (overrides style)"));
				MetaData->SetValue(NewProp_SliderExponent, TEXT("Category"), TEXT("Slider"));
				MetaData->SetValue(NewProp_SliderExponent, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_SliderExponent, TEXT("ToolTip"), TEXT("The exponent by which to increase the delta as the mouse moves. 1 is constant (never increases the delta)."));
				MetaData->SetValue(NewProp_Delta, TEXT("Category"), TEXT("Slider"));
				MetaData->SetValue(NewProp_Delta, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_Delta, TEXT("ToolTip"), TEXT("The amount by which to change the spin box value as the slider moves."));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("Category"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("DisplayName"), TEXT("Style"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_WidgetStyle, TEXT("ToolTip"), TEXT("The Style"));
				MetaData->SetValue(NewProp_ValueDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_ValueDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the value of the widget"));
				MetaData->SetValue(NewProp_Value, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Value, TEXT("ModuleRelativePath"), TEXT("Public/Components/SpinBox.h"));
				MetaData->SetValue(NewProp_Value, TEXT("ToolTip"), TEXT("Value stored in this spin box"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpinBox(Z_Construct_UClass_USpinBox, TEXT("USpinBox"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpinBox);
	UFunction* Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature()
	{
		struct TableViewBase_eventOnGenerateRowUObject_Parms
		{
			UObject* Item;
			UWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTableViewBase();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnGenerateRowUObject__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00120000, 65535, sizeof(TableViewBase_eventOnGenerateRowUObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, TableViewBase_eventOnGenerateRowUObject_Parms), 0x0000000000000580, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Item = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Item"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Item, TableViewBase_eventOnGenerateRowUObject_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TableViewBase.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate for constructing a UWidget based on a UObject"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTableViewBase_NoRegister()
	{
		return UTableViewBase::StaticClass();
	}
	UClass* Z_Construct_UClass_UTableViewBase()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UTableViewBase::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900081;

				OuterClass->LinkChild(Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature()); // 294269504
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/TableViewBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/TableViewBase.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The base class for all wrapped table views"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTableViewBase(Z_Construct_UClass_UTableViewBase, TEXT("UTableViewBase"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTableViewBase);
	UClass* Z_Construct_UClass_UListView_NoRegister()
	{
		return UListView::StaticClass();
	}
	UClass* Z_Construct_UClass_UListView()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTableViewBase();
			Z_Construct_UPackage_UMG();
			OuterClass = UListView::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnGenerateRowEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnGenerateRowEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnGenerateRowEvent, UListView), 0x0000000000080001, Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature());
				UProperty* NewProp_SelectionMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SelectionMode, UListView), 0x0000000000000001, Z_Construct_UEnum_Slate_ESelectionMode());
				UProperty* NewProp_Items = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Items"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Items, UListView), 0x0000000000000005);
				UProperty* NewProp_Items_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Items, TEXT("Items"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_ItemHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ItemHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ItemHeight, UListView), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/ListView.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/ListView.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Allows thousands of items to be displayed in a list.  Generates widgets dynamically for each item."));
				MetaData->SetValue(NewProp_OnGenerateRowEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnGenerateRowEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnGenerateRowEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/ListView.h"));
				MetaData->SetValue(NewProp_OnGenerateRowEvent, TEXT("ToolTip"), TEXT("Called when a widget needs to be generated"));
				MetaData->SetValue(NewProp_SelectionMode, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_SelectionMode, TEXT("ModuleRelativePath"), TEXT("Public/Components/ListView.h"));
				MetaData->SetValue(NewProp_SelectionMode, TEXT("ToolTip"), TEXT("The selection method for the list"));
				MetaData->SetValue(NewProp_Items, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Items, TEXT("ModuleRelativePath"), TEXT("Public/Components/ListView.h"));
				MetaData->SetValue(NewProp_Items, TEXT("ToolTip"), TEXT("The list of items to generate widgets for"));
				MetaData->SetValue(NewProp_ItemHeight, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_ItemHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/ListView.h"));
				MetaData->SetValue(NewProp_ItemHeight, TEXT("ToolTip"), TEXT("The height of each widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UListView(Z_Construct_UClass_UListView, TEXT("UListView"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UListView);
	UFunction* Z_Construct_UFunction_UTileView_RequestListRefresh()
	{
		UObject* Outer=Z_Construct_UClass_UTileView();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RequestListRefresh"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Refreshes the list"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTileView_SetItemHeight()
	{
		struct TileView_eventSetItemHeight_Parms
		{
			float Height;
		};
		UObject* Outer=Z_Construct_UClass_UTileView();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetItemHeight"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TileView_eventSetItemHeight_Parms));
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Height, TileView_eventSetItemHeight_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set item height"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTileView_SetItemWidth()
	{
		struct TileView_eventSetItemWidth_Parms
		{
			float Width;
		};
		UObject* Outer=Z_Construct_UClass_UTileView();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetItemWidth"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TileView_eventSetItemWidth_Parms));
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Width, TileView_eventSetItemWidth_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set item width"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTileView_NoRegister()
	{
		return UTileView::StaticClass();
	}
	UClass* Z_Construct_UClass_UTileView()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UTableViewBase();
			Z_Construct_UPackage_UMG();
			OuterClass = UTileView::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTileView_RequestListRefresh());
				OuterClass->LinkChild(Z_Construct_UFunction_UTileView_SetItemHeight());
				OuterClass->LinkChild(Z_Construct_UFunction_UTileView_SetItemWidth());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OnGenerateTileEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnGenerateTileEvent"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(OnGenerateTileEvent, UTileView), 0x0000000000080001, Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature());
				UProperty* NewProp_SelectionMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SelectionMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SelectionMode, UTileView), 0x0000000000000001, Z_Construct_UEnum_Slate_ESelectionMode());
				UProperty* NewProp_Items = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Items"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Items, UTileView), 0x0000000000000005);
				UProperty* NewProp_Items_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Items, TEXT("Items"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
				UProperty* NewProp_ItemHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ItemHeight"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ItemHeight, UTileView), 0x0000000000000001);
				UProperty* NewProp_ItemWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ItemWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ItemWidth, UTileView), 0x0000000000000001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTileView_RequestListRefresh()); // 2118732464
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTileView_SetItemHeight()); // 3673927809
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTileView_SetItemWidth()); // 103756992
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/TileView.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A flow panel that presents the contents as a set of tiles all uniformly sized."));
				MetaData->SetValue(NewProp_OnGenerateTileEvent, TEXT("Category"), TEXT("Events"));
				MetaData->SetValue(NewProp_OnGenerateTileEvent, TEXT("IsBindableEvent"), TEXT("True"));
				MetaData->SetValue(NewProp_OnGenerateTileEvent, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
				MetaData->SetValue(NewProp_SelectionMode, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_SelectionMode, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
				MetaData->SetValue(NewProp_Items, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Items, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
				MetaData->SetValue(NewProp_ItemHeight, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ItemHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
				MetaData->SetValue(NewProp_ItemWidth, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ItemWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/TileView.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTileView(Z_Construct_UClass_UTileView, TEXT("UTileView"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTileView);
	UFunction* Z_Construct_UFunction_UTextBlock_GetText()
	{
		struct TextBlock_eventGetText_Parms
		{
			FText ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(TextBlock_eventGetText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(ReturnValue, TextBlock_eventGetText_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetText (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the widget text\n@return The widget text"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetColorAndOpacity()
	{
		struct TextBlock_eventSetColorAndOpacity_Parms
		{
			FSlateColor InColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TextBlock_eventSetColorAndOpacity_Parms));
			UProperty* NewProp_InColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InColorAndOpacity, TextBlock_eventSetColorAndOpacity_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FSlateColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color and opacity of the text in this text block\n\n@param InColorAndOpacity             The new text color and opacity"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetFont()
	{
		struct TextBlock_eventSetFont_Parms
		{
			FSlateFontInfo InFontInfo;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFont"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TextBlock_eventSetFont_Parms));
			UProperty* NewProp_InFontInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFontInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InFontInfo, TextBlock_eventSetFont_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FSlateFontInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Dynamically set the font info for this text block\n\n@param InFontInfo THe new font info"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetJustification()
	{
		struct TextBlock_eventSetJustification_Parms
		{
			TEnumAsByte<ETextJustify::Type> InJustification;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetJustification"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TextBlock_eventSetJustification_Parms));
			UProperty* NewProp_InJustification = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InJustification"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(InJustification, TextBlock_eventSetJustification_Parms), 0x0000000000000080, Z_Construct_UEnum_Slate_ETextJustify());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the text justification for this text block\n\n@param Justification new justification"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetOpacity()
	{
		struct TextBlock_eventSetOpacity_Parms
		{
			float InOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOpacity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TextBlock_eventSetOpacity_Parms));
			UProperty* NewProp_InOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InOpacity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InOpacity, TextBlock_eventSetOpacity_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the opacity of the text in this text block\n\n@param InOpacity              The new text opacity"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetShadowColorAndOpacity()
	{
		struct TextBlock_eventSetShadowColorAndOpacity_Parms
		{
			FLinearColor InShadowColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetShadowColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(TextBlock_eventSetShadowColorAndOpacity_Parms));
			UProperty* NewProp_InShadowColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InShadowColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InShadowColorAndOpacity, TextBlock_eventSetShadowColorAndOpacity_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the color and opacity of the text drop shadow\nNote: if opacity is zero no shadow will be drawn\n\n@param InShadowColorAndOpacity               The new drop shadow color and opacity"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetShadowOffset()
	{
		struct TextBlock_eventSetShadowOffset_Parms
		{
			FVector2D InShadowOffset;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetShadowOffset"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(TextBlock_eventSetShadowOffset_Parms));
			UProperty* NewProp_InShadowOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InShadowOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InShadowOffset, TextBlock_eventSetShadowOffset_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the offset that the text drop shadow should be drawn at\n\n@param InShadowOffset                The new offset"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTextBlock_SetText()
	{
		struct TextBlock_eventSetText_Parms
		{
			FText InText;
		};
		UObject* Outer=Z_Construct_UClass_UTextBlock();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TextBlock_eventSetText_Parms));
			UProperty* NewProp_InText = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InText"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(InText, TextBlock_eventSetText_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("SetText (Text)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Directly sets the widget text.\nWarning: This will wipe any binding created for the Text property!\n@param InText The text to assign to the widget"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTextBlock_NoRegister()
	{
		return UTextBlock::StaticClass();
	}
	UClass* Z_Construct_UClass_UTextBlock()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UTextBlock::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_GetText());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetFont());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetJustification());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetShadowColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetShadowOffset());
				OuterClass->LinkChild(Z_Construct_UFunction_UTextBlock_SetText());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LineHeightPercentage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LineHeightPercentage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LineHeightPercentage, UTextBlock), 0x0000040000000015);
				UProperty* NewProp_Margin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Margin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Margin, UTextBlock), 0x0000040000000015, Z_Construct_UScriptStruct_FMargin());
				UProperty* NewProp_MinDesiredWidth = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinDesiredWidth"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinDesiredWidth, UTextBlock), 0x0000040000000015);
				UProperty* NewProp_WrapTextAt = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WrapTextAt"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WrapTextAt, UTextBlock), 0x0000040000000015);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(AutoWrapText, UTextBlock, bool);
				UProperty* NewProp_AutoWrapText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AutoWrapText"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(AutoWrapText, UTextBlock), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(AutoWrapText, UTextBlock), sizeof(bool), true);
				UProperty* NewProp_Justification = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Justification"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Justification, UTextBlock), 0x0000000000000015, Z_Construct_UEnum_Slate_ETextJustify());
				UProperty* NewProp_ShadowColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(ShadowColorAndOpacityDelegate, UTextBlock), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_ShadowColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ShadowColorAndOpacity, UTextBlock), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_ShadowOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShadowOffset"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ShadowOffset, UTextBlock), 0x0000000000000015, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Font, UTextBlock), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateFontInfo());
				UProperty* NewProp_ColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(ColorAndOpacityDelegate, UTextBlock), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetSlateColor__DelegateSignature());
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, UTextBlock), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateColor());
				UProperty* NewProp_TextDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(TextDelegate, UTextBlock), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature());
				UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, UTextBlock), 0x0000000000000001);
				UProperty* NewProp_Style = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Style"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Style_DEPRECATED, UTextBlock), 0x0000000020000000, Z_Construct_UClass_USlateWidgetStyleAsset_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTextBlock_GetText()); // 2423675826
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTextBlock_SetColorAndOpacity()); // 2224057306
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTextBlock_SetFont()); // 635111543
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTextBlock_SetJustification()); // 4284960513
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTextBlock_SetOpacity()); // 2273746457
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTextBlock_SetShadowColorAndOpacity()); // 3600572075
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTextBlock_SetShadowOffset()); // 2955857627
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTextBlock_SetText()); // 629249633
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("Text"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/TextBlock.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A simple static text widget.\n\n\x25cf No Children\n\x25cf Text"));
				MetaData->SetValue(NewProp_LineHeightPercentage, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_LineHeightPercentage, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_LineHeightPercentage, TEXT("ToolTip"), TEXT("The amount to scale each lines height by."));
				MetaData->SetValue(NewProp_Margin, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Margin, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_Margin, TEXT("ToolTip"), TEXT("The amount of blank space left around the edges of text area."));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_MinDesiredWidth, TEXT("ToolTip"), TEXT("The minimum desired size for the text"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_WrapTextAt, TEXT("ToolTip"), TEXT("Whether text wraps onto a new line when it's length exceeds this width; if this value is zero or negative, no wrapping occurs."));
				MetaData->SetValue(NewProp_AutoWrapText, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_AutoWrapText, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_AutoWrapText, TEXT("ToolTip"), TEXT("True if we're wrapping text automatically based on the computed horizontal space for this widget"));
				MetaData->SetValue(NewProp_Justification, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Justification, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_Justification, TEXT("ToolTip"), TEXT("How the text should be aligned with the margin."));
				MetaData->SetValue(NewProp_ShadowColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_ShadowColorAndOpacityDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the ShadowColorAndOpacity."));
				MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("DisplayName"), TEXT("Shadow Color"));
				MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_ShadowColorAndOpacity, TEXT("ToolTip"), TEXT("The color of the shadow"));
				MetaData->SetValue(NewProp_ShadowOffset, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ShadowOffset, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_ShadowOffset, TEXT("ToolTip"), TEXT("The direction the shadow is cast"));
				MetaData->SetValue(NewProp_Font, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Font, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_Font, TEXT("ToolTip"), TEXT("The font to render the text with"));
				MetaData->SetValue(NewProp_ColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_ColorAndOpacityDelegate, TEXT("ToolTip"), TEXT("A bindable delegate for the ColorAndOpacity."));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("The color of the text"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_TextDelegate, TEXT("ToolTip"), TEXT("A bindable delegate to allow logic to drive the text of the widget"));
				MetaData->SetValue(NewProp_Text, TEXT("Category"), TEXT("Content"));
				MetaData->SetValue(NewProp_Text, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
				MetaData->SetValue(NewProp_Text, TEXT("MultiLine"), TEXT("true"));
				MetaData->SetValue(NewProp_Text, TEXT("ToolTip"), TEXT("The text to display"));
				MetaData->SetValue(NewProp_Style, TEXT("ModuleRelativePath"), TEXT("Public/Components/TextBlock.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTextBlock(Z_Construct_UClass_UTextBlock, TEXT("UTextBlock"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTextBlock);
	UFunction* Z_Construct_UFunction_UThrobber_SetAnimateHorizontally()
	{
		struct Throbber_eventSetAnimateHorizontally_Parms
		{
			bool bInAnimateHorizontally;
		};
		UObject* Outer=Z_Construct_UClass_UThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimateHorizontally"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Throbber_eventSetAnimateHorizontally_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAnimateHorizontally, Throbber_eventSetAnimateHorizontally_Parms, bool);
			UProperty* NewProp_bInAnimateHorizontally = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAnimateHorizontally"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAnimateHorizontally, Throbber_eventSetAnimateHorizontally_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAnimateHorizontally, Throbber_eventSetAnimateHorizontally_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets whether the pieces animate horizontally."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UThrobber_SetAnimateOpacity()
	{
		struct Throbber_eventSetAnimateOpacity_Parms
		{
			bool bInAnimateOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimateOpacity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Throbber_eventSetAnimateOpacity_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAnimateOpacity, Throbber_eventSetAnimateOpacity_Parms, bool);
			UProperty* NewProp_bInAnimateOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAnimateOpacity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAnimateOpacity, Throbber_eventSetAnimateOpacity_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAnimateOpacity, Throbber_eventSetAnimateOpacity_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets whether the pieces animate their opacity."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UThrobber_SetAnimateVertically()
	{
		struct Throbber_eventSetAnimateVertically_Parms
		{
			bool bInAnimateVertically;
		};
		UObject* Outer=Z_Construct_UClass_UThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimateVertically"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Throbber_eventSetAnimateVertically_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAnimateVertically, Throbber_eventSetAnimateVertically_Parms, bool);
			UProperty* NewProp_bInAnimateVertically = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAnimateVertically"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAnimateVertically, Throbber_eventSetAnimateVertically_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAnimateVertically, Throbber_eventSetAnimateVertically_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets whether the pieces animate vertically."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UThrobber_SetNumberOfPieces()
	{
		struct Throbber_eventSetNumberOfPieces_Parms
		{
			int32 InNumberOfPieces;
		};
		UObject* Outer=Z_Construct_UClass_UThrobber();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetNumberOfPieces"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(Throbber_eventSetNumberOfPieces_Parms));
			UProperty* NewProp_InNumberOfPieces = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InNumberOfPieces"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InNumberOfPieces, Throbber_eventSetNumberOfPieces_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets how many pieces there are"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UThrobber_NoRegister()
	{
		return UThrobber::StaticClass();
	}
	UClass* Z_Construct_UClass_UThrobber()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UThrobber::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UThrobber_SetAnimateHorizontally());
				OuterClass->LinkChild(Z_Construct_UFunction_UThrobber_SetAnimateOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UThrobber_SetAnimateVertically());
				OuterClass->LinkChild(Z_Construct_UFunction_UThrobber_SetNumberOfPieces());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Image = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Image"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Image, UThrobber), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateBrush());
				UProperty* NewProp_PieceImage = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PieceImage"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PieceImage_DEPRECATED, UThrobber), 0x0000000020000000, Z_Construct_UClass_USlateBrushAsset_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAnimateOpacity, UThrobber, bool);
				UProperty* NewProp_bAnimateOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAnimateOpacity"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAnimateOpacity, UThrobber), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bAnimateOpacity, UThrobber), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAnimateVertically, UThrobber, bool);
				UProperty* NewProp_bAnimateVertically = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAnimateVertically"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAnimateVertically, UThrobber), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bAnimateVertically, UThrobber), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAnimateHorizontally, UThrobber, bool);
				UProperty* NewProp_bAnimateHorizontally = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAnimateHorizontally"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAnimateHorizontally, UThrobber), 0x0000000000000015, CPP_BOOL_PROPERTY_BITMASK(bAnimateHorizontally, UThrobber), sizeof(bool), true);
				UProperty* NewProp_NumberOfPieces = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumberOfPieces"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumberOfPieces, UThrobber), 0x0000000000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UThrobber_SetAnimateHorizontally()); // 2999190499
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UThrobber_SetAnimateOpacity()); // 3913462083
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UThrobber_SetAnimateVertically()); // 3648883759
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UThrobber_SetNumberOfPieces()); // 3664063824
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/Throbber.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A Throbber widget that shows several zooming circles in a row."));
				MetaData->SetValue(NewProp_Image, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_Image, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_PieceImage, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_PieceImage, TEXT("ToolTip"), TEXT("Image to use for each segment of the throbber"));
				MetaData->SetValue(NewProp_bAnimateOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_bAnimateOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_bAnimateOpacity, TEXT("ToolTip"), TEXT("Should the pieces animate their opacity?"));
				MetaData->SetValue(NewProp_bAnimateVertically, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_bAnimateVertically, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_bAnimateVertically, TEXT("ToolTip"), TEXT("Should the pieces animate vertically?"));
				MetaData->SetValue(NewProp_bAnimateHorizontally, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_bAnimateHorizontally, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_bAnimateHorizontally, TEXT("ToolTip"), TEXT("Should the pieces animate horizontally?"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ClampMax"), TEXT("25"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ModuleRelativePath"), TEXT("Public/Components/Throbber.h"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("ToolTip"), TEXT("How many pieces there are"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("UIMax"), TEXT("25"));
				MetaData->SetValue(NewProp_NumberOfPieces, TEXT("UIMin"), TEXT("1"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UThrobber(Z_Construct_UClass_UThrobber, TEXT("UThrobber"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UThrobber);
	UFunction* Z_Construct_UDelegateFunction_UMG_OnConstructEvent__DelegateSignature()
	{
		UObject* Outer=Z_Construct_UPackage_UMG();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnConstructEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("TODO UMG If you want to host a widget that's full screen there may need to be a SWindow equivalent that you spawn it into."));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_UMG_EDesignPreviewSizeMode()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EDesignPreviewSizeMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EDesignPreviewSizeMode"), 0, Get_Z_Construct_UEnum_UMG_EDesignPreviewSizeMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EDesignPreviewSizeMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDesignPreviewSizeMode::FillScreen")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDesignPreviewSizeMode::Custom")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDesignPreviewSizeMode::CustomOnScreen")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDesignPreviewSizeMode::Desired")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDesignPreviewSizeMode::DesiredOnScreen")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EDesignPreviewSizeMode::EDesignPreviewSizeMode_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EDesignPreviewSizeMode_CRC() { return 2279336154U; }
	UEnum* Z_Construct_UEnum_UMG_EUMGSequencePlayMode()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EUMGSequencePlayMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EUMGSequencePlayMode"), 0, Get_Z_Construct_UEnum_UMG_EUMGSequencePlayMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EUMGSequencePlayMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUMGSequencePlayMode::Forward")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUMGSequencePlayMode::Reverse")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUMGSequencePlayMode::PingPong")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EUMGSequencePlayMode::EUMGSequencePlayMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("Forward.ToolTip"), TEXT("Animation plays and loops from the beginning to the end."));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnEnum, TEXT("PingPong.ToolTip"), TEXT("Animation plays from the begging to the end and then from the end to beginning."));
			MetaData->SetValue(ReturnEnum, TEXT("Reverse.ToolTip"), TEXT("Animation plays and loops from the end to the beginning."));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Describes playback modes for UMG sequences."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EUMGSequencePlayMode_CRC() { return 2153707561U; }
	UScriptStruct* Z_Construct_UScriptStruct_FNamedSlotBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FNamedSlotBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("NamedSlotBinding"), sizeof(FNamedSlotBinding), Get_Z_Construct_UScriptStruct_FNamedSlotBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NamedSlotBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FNamedSlotBinding>, EStructFlags(0x00000201));
			UProperty* NewProp_Content = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Content"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Content, FNamedSlotBinding), 0x0000000000000000, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(Name, FNamedSlotBinding), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("The state passed into OnPaint that we can expose as a single painting structure to blueprints to\nallow script code to override OnPaint behavior."));
			MetaData->SetValue(NewProp_Content, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FNamedSlotBinding_CRC() { return 1930716041U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPaintContext()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FPaintContext_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("PaintContext"), sizeof(FPaintContext), Get_Z_Construct_UScriptStruct_FPaintContext_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PaintContext"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPaintContext>, EStructFlags(0x00000201));
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("The state passed into OnPaint that we can expose as a single painting structure to blueprints to\nallow script code to override OnPaint behavior."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPaintContext_CRC() { return 1455491149U; }
	UFunction* Z_Construct_UFunction_UUserWidget_AddToPlayerScreen()
	{
		struct UserWidget_eventAddToPlayerScreen_Parms
		{
			int32 ZOrder;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddToPlayerScreen"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020409, 65535, sizeof(UserWidget_eventAddToPlayerScreen_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, UserWidget_eventAddToPlayerScreen_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, UserWidget_eventAddToPlayerScreen_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, UserWidget_eventAddToPlayerScreen_Parms), sizeof(bool), true);
			UProperty* NewProp_ZOrder = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ZOrder"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ZOrder, UserWidget_eventAddToPlayerScreen_Parms), 0x0000040000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("ZOrder"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ZOrder"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Adds the widget to the game's viewport in a section dedicated to the player.  This is valuable in a split screen\ngame where you need to only show a widget over a player's portion of the viewport.\n\n@param ZOrder The higher the number, the more on top this widget will be."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_AddToViewport()
	{
		struct UserWidget_eventAddToViewport_Parms
		{
			int32 ZOrder;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddToViewport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020409, 65535, sizeof(UserWidget_eventAddToViewport_Parms));
			UProperty* NewProp_ZOrder = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ZOrder"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ZOrder, UserWidget_eventAddToViewport_Parms), 0x0000040000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("ZOrder"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ZOrder"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Adds it to the game's viewport and fills the entire screen, unless SetDesiredSizeInViewport is called\nto explicitly set the size.\n\n@param ZOrder The higher the number, the more on top this widget will be."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_Construct()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Construct"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("Begin Play"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called after the underlying slate widget is constructed.  Depending on how the slate object is used\nthis event may be called multiple times due to adding and removing from the hierarchy."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_Destruct()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Destruct"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("End Play, Destroy"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when a widget is no longer referenced causing the slate resource to destroyed.  Just like\nConstruct this event can be called multiple times."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_GetIsVisible()
	{
		struct UserWidget_eventGetIsVisible_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIsVisible"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020409, 65535, sizeof(UserWidget_eventGetIsVisible_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, UserWidget_eventGetIsVisible_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, UserWidget_eventGetIsVisible_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, UserWidget_eventGetIsVisible_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use IsInViewport instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_GetOwningLocalPlayer()
	{
		struct UserWidget_eventGetOwningLocalPlayer_Parms
		{
			ULocalPlayer* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwningLocalPlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020409, 65535, sizeof(UserWidget_eventGetOwningLocalPlayer_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventGetOwningLocalPlayer_Parms), 0x0000000000000580, Z_Construct_UClass_ULocalPlayer_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Player"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the local player associated with this UI.\n@return The owning local player."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_GetOwningPlayer()
	{
		struct UserWidget_eventGetOwningPlayer_Parms
		{
			APlayerController* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwningPlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020409, 65535, sizeof(UserWidget_eventGetOwningPlayer_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventGetOwningPlayer_Parms), 0x0000000000000580, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Player"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the player controller associated with this UI.\n@return The player controller that owns the UI."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_GetOwningPlayerPawn()
	{
		struct UserWidget_eventGetOwningPlayerPawn_Parms
		{
			APawn* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwningPlayerPawn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020409, 65535, sizeof(UserWidget_eventGetOwningPlayerPawn_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventGetOwningPlayerPawn_Parms), 0x0000000000000580, Z_Construct_UClass_APawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Player"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the player pawn associated with this UI.\n@return Gets the owning player pawn that's owned by the player controller assigned to this widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_IsInteractable()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsInteractable"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48020808, 65535, sizeof(UserWidget_eventIsInteractable_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, UserWidget_eventIsInteractable_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, UserWidget_eventIsInteractable_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, UserWidget_eventIsInteractable_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface | Interaction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a value indicating if the widget is interactive."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_IsInViewport()
	{
		struct UserWidget_eventIsInViewport_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsInViewport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020409, 65535, sizeof(UserWidget_eventIsInViewport_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, UserWidget_eventIsInViewport_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, UserWidget_eventIsInViewport_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, UserWidget_eventIsInViewport_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return true if the widget was added to the viewport using AddToViewport."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnAnalogValueChanged()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnAnalogValueChanged"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(UserWidget_eventOnAnalogValueChanged_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnAnalogValueChanged_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InAnalogInputEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAnalogInputEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InAnalogInputEvent, UserWidget_eventOnAnalogValueChanged_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FAnalogInputEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnAnalogValueChanged_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when an analog value changes on a button that supports analog\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param  InAnalogInputEvent  Analog Event\n@return  Returns whether the event was handled, along with other possible actions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnAnimationFinished()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnAnimationFinished"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020C08, 65535, sizeof(UserWidget_eventOnAnimationFinished_Parms));
			UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Animation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Animation, UserWidget_eventOnAnimationFinished_Parms), 0x0000000000000082, Z_Construct_UClass_UWidgetAnimation_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when an animation has either played all the way through or is stopped\n\n@param Animation The animation that has finished playing"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnAnimationStarted()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnAnimationStarted"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020C08, 65535, sizeof(UserWidget_eventOnAnimationStarted_Parms));
			UProperty* NewProp_Animation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Animation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Animation, UserWidget_eventOnAnimationStarted_Parms), 0x0000000000000082, Z_Construct_UClass_UWidgetAnimation_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when an animation is started.\n\n@param Animation the animation that started"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnControllerAnalogValueChanged()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnControllerAnalogValueChanged"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(UserWidget_eventOnControllerAnalogValueChanged_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnControllerAnalogValueChanged_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_ControllerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControllerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ControllerEvent, UserWidget_eventOnControllerAnalogValueChanged_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FControllerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnControllerAnalogValueChanged_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gamepad Input"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use OnAnalogValueChanged() instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnControllerButtonPressed()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnControllerButtonPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(UserWidget_eventOnControllerButtonPressed_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnControllerButtonPressed_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_ControllerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControllerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ControllerEvent, UserWidget_eventOnControllerButtonPressed_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FControllerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnControllerButtonPressed_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gamepad Input"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use OnKeyDown() instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnControllerButtonReleased()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnControllerButtonReleased"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(UserWidget_eventOnControllerButtonReleased_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnControllerButtonReleased_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_ControllerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ControllerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ControllerEvent, UserWidget_eventOnControllerButtonReleased_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FControllerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnControllerButtonReleased_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gamepad Input"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use OnKeyUp() instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnDragCancelled()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnDragCancelled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnDragCancelled_Parms));
			UProperty* NewProp_Operation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Operation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Operation, UserWidget_eventOnDragCancelled_Parms), 0x0000000000000080, Z_Construct_UClass_UDragDropOperation_NoRegister());
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, UserWidget_eventOnDragCancelled_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when the user cancels the drag operation, typically when they simply release the mouse button after\nbeginning a drag operation, but failing to complete the drag.\n\n@param  PointerEvent  Last mouse event from when the drag was canceled.\n@param  Operation     The drag operation that was canceled."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnDragDetected()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnDragDetected"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnDragDetected_Parms));
			UProperty* NewProp_Operation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Operation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Operation, UserWidget_eventOnDragDetected_Parms), 0x0000000000000180, Z_Construct_UClass_UDragDropOperation_NoRegister());
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, UserWidget_eventOnDragDetected_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnDragDetected_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when Slate detects that a widget started to be dragged.\n\n@param  InMyGeometry  Widget geometry\n@param  PointerEvent  MouseMove that triggered the drag\n@param  Operation     The drag operation that was detected."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnDragEnter()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnDragEnter"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventOnDragEnter_Parms));
			UProperty* NewProp_Operation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Operation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Operation, UserWidget_eventOnDragEnter_Parms), 0x0000000000000080, Z_Construct_UClass_UDragDropOperation_NoRegister());
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, UserWidget_eventOnDragEnter_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnDragEnter_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called during drag and drop when the drag enters the widget.\n\n@param MyGeometry     The geometry of the widget receiving the event.\n@param PointerEvent   The mouse event from when the drag entered the widget.\n@param Operation      The drag operation that entered the widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnDragLeave()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnDragLeave"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventOnDragLeave_Parms));
			UProperty* NewProp_Operation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Operation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Operation, UserWidget_eventOnDragLeave_Parms), 0x0000000000000080, Z_Construct_UClass_UDragDropOperation_NoRegister());
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, UserWidget_eventOnDragLeave_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called during drag and drop when the drag leaves the widget.\n\n@param PointerEvent   The mouse event from when the drag left the widget.\n@param Operation      The drag operation that entered the widget."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnDragOver()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnDragOver"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventOnDragOver_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, UserWidget_eventOnDragOver_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, UserWidget_eventOnDragOver_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, UserWidget_eventOnDragOver_Parms), sizeof(bool), true);
			UProperty* NewProp_Operation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Operation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Operation, UserWidget_eventOnDragOver_Parms), 0x0000000000000080, Z_Construct_UClass_UDragDropOperation_NoRegister());
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, UserWidget_eventOnDragOver_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnDragOver_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called during drag and drop when the the mouse is being dragged over a widget.\n\n@param MyGeometry     The geometry of the widget receiving the event.\n@param PointerEvent   The mouse event from when the drag occurred over the widget.\n@param Operation      The drag operation over the widget.\n\n@return 'true' to indicate that you handled the drag over operation.  Returning 'false' will cause the operation to continue to bubble up."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnDrop()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnDrop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventOnDrop_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, UserWidget_eventOnDrop_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, UserWidget_eventOnDrop_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, UserWidget_eventOnDrop_Parms), sizeof(bool), true);
			UProperty* NewProp_Operation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Operation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Operation, UserWidget_eventOnDrop_Parms), 0x0000000000000080, Z_Construct_UClass_UDragDropOperation_NoRegister());
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, UserWidget_eventOnDrop_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnDrop_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when the user is dropping something onto a widget.  Ends the drag and drop operation, even if no widget handles this.\n\n@param MyGeometry     The geometry of the widget receiving the event.\n@param PointerEvent   The mouse event from when the drag occurred over the widget.\n@param Operation      The drag operation over the widget.\n\n@return 'true' to indicate you handled the drop operation."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnFocusLost()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnFocusLost"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventOnFocusLost_Parms));
			UProperty* NewProp_InFocusEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFocusEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InFocusEvent, UserWidget_eventOnFocusLost_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FFocusEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when this widget loses focus.  This event does not bubble.\n\n@param  InFocusEvent  FocusEvent"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnFocusReceived()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnFocusReceived"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventOnFocusReceived_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnFocusReceived_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InFocusEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFocusEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InFocusEvent, UserWidget_eventOnFocusReceived_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FFocusEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnFocusReceived_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when keyboard focus is given to this widget.  This event does not bubble.\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param InFocusEvent  FocusEvent\n@return  Returns whether the event was handled, along with other possible actions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnKeyChar()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnKeyChar"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventOnKeyChar_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnKeyChar_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InCharacterEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InCharacterEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InCharacterEvent, UserWidget_eventOnKeyChar_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FCharacterEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnKeyChar_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called after a character is entered while this widget has focus\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param  InCharacterEvent  Character event\n@return  Returns whether the event was handled, along with other possible actions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnKeyDown()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnKeyDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventOnKeyDown_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnKeyDown_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InKeyEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InKeyEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InKeyEvent, UserWidget_eventOnKeyDown_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKeyEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnKeyDown_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called after a key (keyboard, controller, ...) is pressed when this widget has focus (this event bubbles if not handled)\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param  InKeyEvent  Key event\n@return  Returns whether the event was handled, along with other possible actions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnKeyUp()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnKeyUp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventOnKeyUp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnKeyUp_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InKeyEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InKeyEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InKeyEvent, UserWidget_eventOnKeyUp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKeyEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnKeyUp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called after a key (keyboard, controller, ...) is released when this widget has focus\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param  InKeyEvent  Key event\n@return  Returns whether the event was handled, along with other possible actions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnMotionDetected()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMotionDetected"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventOnMotionDetected_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnMotionDetected_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InMotionEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMotionEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InMotionEvent, UserWidget_eventOnMotionDetected_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FMotionEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnMotionDetected_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Touch Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when motion is detected (controller or device)\ne.g. Someone tilts or shakes their controller.\n\n@param MyGeometry    The geometry of the widget receiving the event.\n@param MotionEvent   The motion event generated"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnMouseButtonDoubleClick()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseButtonDoubleClick"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnMouseButtonDoubleClick_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnMouseButtonDoubleClick_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InMouseEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMouseEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InMouseEvent, UserWidget_eventOnMouseButtonDoubleClick_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_InMyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InMyGeometry, UserWidget_eventOnMouseButtonDoubleClick_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Mouse"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when a mouse button is double clicked.  Override this in derived classes.\n\n@param  InMyGeometry  Widget geometry\n@param  InMouseEvent  Mouse button event\n@return  Returns whether the event was handled, along with other possible actions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnMouseButtonDown()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseButtonDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnMouseButtonDown_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnMouseButtonDown_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_MouseEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MouseEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MouseEvent, UserWidget_eventOnMouseButtonDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnMouseButtonDown_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Mouse"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The system calls this method to notify the widget that a mouse button was pressed within it. This event is bubbled.\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param MouseEvent Information about the input event\n@return Whether the event was handled along with possible requests for the system to take action."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnMouseButtonUp()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseButtonUp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnMouseButtonUp_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnMouseButtonUp_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_MouseEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MouseEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MouseEvent, UserWidget_eventOnMouseButtonUp_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnMouseButtonUp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Mouse"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The system calls this method to notify the widget that a mouse button was release within it. This event is bubbled.\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param MouseEvent Information about the input event\n@return Whether the event was handled along with possible requests for the system to take action."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnMouseEnter()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseEnter"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnMouseEnter_Parms));
			UProperty* NewProp_MouseEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MouseEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MouseEvent, UserWidget_eventOnMouseEnter_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnMouseEnter_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Mouse"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The system will use this event to notify a widget that the cursor has entered it. This event is NOT bubbled.\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param MouseEvent Information about the input event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnMouseLeave()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseLeave"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnMouseLeave_Parms));
			UProperty* NewProp_MouseEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MouseEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MouseEvent, UserWidget_eventOnMouseLeave_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Mouse"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The system will use this event to notify a widget that the cursor has left it. This event is NOT bubbled.\n\n@param MouseEvent Information about the input event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnMouseMove()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseMove"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnMouseMove_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnMouseMove_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_MouseEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MouseEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MouseEvent, UserWidget_eventOnMouseMove_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnMouseMove_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Mouse"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The system calls this method to notify the widget that a mouse moved within it. This event is bubbled.\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param MouseEvent Information about the input event\n@return Whether the event was handled along with possible requests for the system to take action."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnMouseWheel()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnMouseWheel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnMouseWheel_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnMouseWheel_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_MouseEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MouseEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MouseEvent, UserWidget_eventOnMouseWheel_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnMouseWheel_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Mouse"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when the mouse wheel is spun. This event is bubbled.\n\n@param  MouseEvent  Mouse event\n@return  Returns whether the event was handled, along with other possible actions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnPaint()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnPaint"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x48420808, 65535, sizeof(UserWidget_eventOnPaint_Parms));
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, UserWidget_eventOnPaint_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface | Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnPreviewKeyDown()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnPreviewKeyDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020800, 65535, sizeof(UserWidget_eventOnPreviewKeyDown_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnPreviewKeyDown_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InKeyEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InKeyEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InKeyEvent, UserWidget_eventOnPreviewKeyDown_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKeyEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnPreviewKeyDown_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called after a key (keyboard, controller, ...) is pressed when this widget or a child of this widget has focus\nIf a widget handles this event, OnKeyDown will *not* be passed to the focused widget.\n\nThis event is primarily to allow parent widgets to consume an event before a child widget processes\nit and it should be used only when there is no better design alternative.\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param  InKeyEvent  Key event\n@return  Returns whether the event was handled, along with other possible actions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnPreviewMouseButtonDown()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnPreviewMouseButtonDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnPreviewMouseButtonDown_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnPreviewMouseButtonDown_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_MouseEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MouseEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MouseEvent, UserWidget_eventOnPreviewMouseButtonDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnPreviewMouseButtonDown_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Mouse"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Just like OnMouseButtonDown, but tunnels instead of bubbling.\nIf this even is handled, OnMouseButtonDown will not be sent.\n\nUse this event sparingly as preview events generally make UIs more\ndifficult to reason about.\n\n@param MyGeometry The Geometry of the widget receiving the event\n@param MouseEvent Information about the input event\n@return Whether the event was handled along with possible requests for the system to take action."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnTouchEnded()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTouchEnded"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnTouchEnded_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnTouchEnded_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InTouchEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTouchEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InTouchEvent, UserWidget_eventOnTouchEnded_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnTouchEnded_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Touch Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when a touchpad touch is ended (finger lifted)\n\n@param MyGeometry    The geometry of the widget receiving the event.\n@param InTouchEvent  The touch event generated"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnTouchGesture()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTouchGesture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnTouchGesture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnTouchGesture_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_GestureEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GestureEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GestureEvent, UserWidget_eventOnTouchGesture_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnTouchGesture_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Touch Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when the user performs a gesture on trackpad. This event is bubbled.\n\n@param MyGeometry     The geometry of the widget receiving the event.\n@param  GestureEvent  gesture event\n@return  Returns whether the event was handled, along with other possible actions"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnTouchMoved()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTouchMoved"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnTouchMoved_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnTouchMoved_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InTouchEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTouchEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InTouchEvent, UserWidget_eventOnTouchMoved_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnTouchMoved_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Touch Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when a touchpad touch is moved  (finger moved)\n\n@param MyGeometry    The geometry of the widget receiving the event.\n@param InTouchEvent  The touch event generated"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_OnTouchStarted()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnTouchStarted"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08420808, 65535, sizeof(UserWidget_eventOnTouchStarted_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventOnTouchStarted_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_InTouchEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTouchEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InTouchEvent, UserWidget_eventOnTouchStarted_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventOnTouchStarted_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Touch Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when a touchpad touch is started (finger down)\n\n@param MyGeometry    The geometry of the widget receiving the event.\n@param InTouchEvent  The touch event generated"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_PauseAnimation()
	{
		struct UserWidget_eventPauseAnimation_Parms
		{
			const UWidgetAnimation* InAnimation;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PauseAnimation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020409, 65535, sizeof(UserWidget_eventPauseAnimation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, UserWidget_eventPauseAnimation_Parms), 0x0000000000000580);
			UProperty* NewProp_InAnimation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAnimation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InAnimation, UserWidget_eventPauseAnimation_Parms), 0x0000000000000082, Z_Construct_UClass_UWidgetAnimation_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pauses an already running animation in this widget\n\n@param The name of the animation to pause\n@return the time point the animation was at when it was paused.  Use this as the StartAtTime when you trigger PlayAnimation."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_PlayAnimation()
	{
		struct UserWidget_eventPlayAnimation_Parms
		{
			const UWidgetAnimation* InAnimation;
			float StartAtTime;
			int32 NumLoopsToPlay;
			TEnumAsByte<EUMGSequencePlayMode::Type> PlayMode;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlayAnimation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020409, 65535, sizeof(UserWidget_eventPlayAnimation_Parms));
			UProperty* NewProp_PlayMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(PlayMode, UserWidget_eventPlayAnimation_Parms), 0x0000000000000080, Z_Construct_UEnum_UMG_EUMGSequencePlayMode());
			UProperty* NewProp_NumLoopsToPlay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NumLoopsToPlay"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumLoopsToPlay, UserWidget_eventPlayAnimation_Parms), 0x0000000000000080);
			UProperty* NewProp_StartAtTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartAtTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StartAtTime, UserWidget_eventPlayAnimation_Parms), 0x0000000000000080);
			UProperty* NewProp_InAnimation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAnimation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InAnimation, UserWidget_eventPlayAnimation_Parms), 0x0000000000000082, Z_Construct_UClass_UWidgetAnimation_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_NumLoopsToPlay"), TEXT("1"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_PlayMode"), TEXT("Forward"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_StartAtTime"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays an animation in this widget a specified number of times\n\n@param InAnimation The animation to play\n@param StartAtTime The time in the animation from which to start playing. For looped animations, this will only affect the first playback of the animation.\n@param NumLoopsToPlay The number of times to loop this animation (0 to loop indefinitely)\n@param PlayMode Specifies the playback mode"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_PlaySound()
	{
		struct UserWidget_eventPlaySound_Parms
		{
			USoundBase* SoundToPlay;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PlaySound"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020409, 65535, sizeof(UserWidget_eventPlaySound_Parms));
			UProperty* NewProp_SoundToPlay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SoundToPlay"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SoundToPlay, UserWidget_eventPlaySound_Parms), 0x0000000000000080, Z_Construct_UClass_USoundBase_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use the UGameplayStatics::PlaySound2D instead."));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays a sound through the UI\n\n@param The sound to play"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_RemoveFromViewport()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveFromViewport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020409, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use RemoveFromParent instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes the widget from the viewport."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_SetAlignmentInViewport()
	{
		struct UserWidget_eventSetAlignmentInViewport_Parms
		{
			FVector2D Alignment;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAlignmentInViewport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820409, 65535, sizeof(UserWidget_eventSetAlignmentInViewport_Parms));
			UProperty* NewProp_Alignment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Alignment"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Alignment, UserWidget_eventSetAlignmentInViewport_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_SetAnchorsInViewport()
	{
		struct UserWidget_eventSetAnchorsInViewport_Parms
		{
			FAnchors Anchors;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnchorsInViewport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020409, 65535, sizeof(UserWidget_eventSetAnchorsInViewport_Parms));
			UProperty* NewProp_Anchors = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Anchors"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Anchors, UserWidget_eventSetAnchorsInViewport_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FAnchors());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_SetColorAndOpacity()
	{
		struct UserWidget_eventSetColorAndOpacity_Parms
		{
			FLinearColor InColorAndOpacity;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820409, 65535, sizeof(UserWidget_eventSetColorAndOpacity_Parms));
			UProperty* NewProp_InColorAndOpacity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InColorAndOpacity, UserWidget_eventSetColorAndOpacity_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the tint of the widget, this affects all child widgets.\n\n@param InColorAndOpacity     The tint to apply to all child widgets."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_SetDesiredSizeInViewport()
	{
		struct UserWidget_eventSetDesiredSizeInViewport_Parms
		{
			FVector2D Size;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDesiredSizeInViewport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820409, 65535, sizeof(UserWidget_eventSetDesiredSizeInViewport_Parms));
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Size"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Size, UserWidget_eventSetDesiredSizeInViewport_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_SetForegroundColor()
	{
		struct UserWidget_eventSetForegroundColor_Parms
		{
			FSlateColor InForegroundColor;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetForegroundColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020409, 65535, sizeof(UserWidget_eventSetForegroundColor_Parms));
			UProperty* NewProp_InForegroundColor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InForegroundColor, UserWidget_eventSetForegroundColor_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FSlateColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the foreground color of the widget, this is inherited by sub widgets.  Any color property\nthat is marked as inherit will use this color.\n\n@param InForegroundColor     The foreground color."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_SetOwningLocalPlayer()
	{
		struct UserWidget_eventSetOwningLocalPlayer_Parms
		{
			ULocalPlayer* LocalPlayer;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOwningLocalPlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020409, 65535, sizeof(UserWidget_eventSetOwningLocalPlayer_Parms));
			UProperty* NewProp_LocalPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocalPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LocalPlayer, UserWidget_eventSetOwningLocalPlayer_Parms), 0x0000000000000080, Z_Construct_UClass_ULocalPlayer_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Player"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the local player associated with this UI.\n@param LocalPlayer The local player you want to be the conceptual owner of this UI."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_SetPositionInViewport()
	{
		struct UserWidget_eventSetPositionInViewport_Parms
		{
			FVector2D Position;
			bool bRemoveDPIScale;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPositionInViewport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820409, 65535, sizeof(UserWidget_eventSetPositionInViewport_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRemoveDPIScale, UserWidget_eventSetPositionInViewport_Parms, bool);
			UProperty* NewProp_bRemoveDPIScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bRemoveDPIScale"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRemoveDPIScale, UserWidget_eventSetPositionInViewport_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bRemoveDPIScale, UserWidget_eventSetPositionInViewport_Parms), sizeof(bool), true);
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, UserWidget_eventSetPositionInViewport_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bRemoveDPIScale"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the widgets position in the viewport.\n@param Position The 2D position to set the widget to in the viewport.\n@param bRemoveDPIScale If you've already calculated inverse DPI, set this to false.\nOtherwise inverse DPI is applied to the position so that when the location is scaled\nby DPI, it ends up in the expected position."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_StopAnimation()
	{
		struct UserWidget_eventStopAnimation_Parms
		{
			const UWidgetAnimation* InAnimation;
		};
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StopAnimation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020409, 65535, sizeof(UserWidget_eventStopAnimation_Parms));
			UProperty* NewProp_InAnimation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAnimation"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InAnimation, UserWidget_eventStopAnimation_Parms), 0x0000000000000082, Z_Construct_UClass_UWidgetAnimation_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops an already running animation in this widget\n\n@param The name of the animation to stop"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UUserWidget_Tick()
	{
		UObject* Outer=Z_Construct_UClass_UUserWidget();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Tick"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08020808, 65535, sizeof(UserWidget_eventTick_Parms));
			UProperty* NewProp_InDeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InDeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(InDeltaTime, UserWidget_eventTick_Parms), 0x0000000000000080);
			UProperty* NewProp_MyGeometry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyGeometry"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MyGeometry, UserWidget_eventTick_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FGeometry());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("User Interface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Ticks this widget.  Override in derived classes, but always call the parent implementation.\n\n@param  MyGeometry The space allotted for this widget\n@param  InDeltaTime  Real time passed since last tick"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UUserWidget_NoRegister()
	{
		return UUserWidget::StaticClass();
	}
	UClass* Z_Construct_UClass_UUserWidget()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UWidget();
			Z_Construct_UPackage_UMG();
			OuterClass = UUserWidget::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20901081;

				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_AddToPlayerScreen());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_AddToViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_Construct());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_Destruct());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_GetIsVisible());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_GetOwningLocalPlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_GetOwningPlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_GetOwningPlayerPawn());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_IsInteractable());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_IsInViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnAnalogValueChanged());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnAnimationFinished());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnAnimationStarted());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnControllerAnalogValueChanged());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnControllerButtonPressed());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnControllerButtonReleased());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnDragCancelled());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnDragDetected());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnDragEnter());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnDragLeave());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnDragOver());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnDrop());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnFocusLost());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnFocusReceived());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnKeyChar());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnKeyDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnKeyUp());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnMotionDetected());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnMouseButtonDoubleClick());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnMouseButtonDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnMouseButtonUp());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnMouseEnter());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnMouseLeave());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnMouseMove());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnMouseWheel());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnPaint());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnPreviewKeyDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnPreviewMouseButtonDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnTouchEnded());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnTouchGesture());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnTouchMoved());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_OnTouchStarted());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_PauseAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_PlayAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_PlaySound());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_RemoveFromViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_SetAlignmentInViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_SetAnchorsInViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_SetColorAndOpacity());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_SetDesiredSizeInViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_SetForegroundColor());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_SetOwningLocalPlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_SetPositionInViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_StopAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_UUserWidget_Tick());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_PreviewBackground = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PreviewBackground"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PreviewBackground, UUserWidget), 0x0000000800010001, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_PaletteCategory = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PaletteCategory"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(PaletteCategory, UUserWidget), 0x0000000800000000);
				UProperty* NewProp_DesignSizeMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DesignSizeMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(DesignSizeMode, UUserWidget), 0x0000000800000000, Z_Construct_UEnum_UMG_EDesignPreviewSizeMode());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseDesiredSizeAtDesignTime_DEPRECATED, UUserWidget, bool);
				UProperty* NewProp_bUseDesiredSizeAtDesignTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseDesiredSizeAtDesignTime"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseDesiredSizeAtDesignTime_DEPRECATED, UUserWidget), 0x0000000820000000, CPP_BOOL_PROPERTY_BITMASK(bUseDesiredSizeAtDesignTime_DEPRECATED, UUserWidget), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseDesignTimeSize_DEPRECATED, UUserWidget, bool);
				UProperty* NewProp_bUseDesignTimeSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseDesignTimeSize"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseDesignTimeSize_DEPRECATED, UUserWidget), 0x0000000820000000, CPP_BOOL_PROPERTY_BITMASK(bUseDesignTimeSize_DEPRECATED, UUserWidget), sizeof(bool), true);
				UProperty* NewProp_DesignTimeSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DesignTimeSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DesignTimeSize, UUserWidget), 0x0000000800000000, Z_Construct_UScriptStruct_FVector2D());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_NamedSlotBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NamedSlotBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(NamedSlotBindings, UUserWidget), 0x0000000000000000);
				UProperty* NewProp_NamedSlotBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NamedSlotBindings, TEXT("NamedSlotBindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FNamedSlotBinding());
				UProperty* NewProp_StoppedSequencePlayers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StoppedSequencePlayers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(StoppedSequencePlayers, UUserWidget), 0x0000000000002000);
				UProperty* NewProp_StoppedSequencePlayers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_StoppedSequencePlayers, TEXT("StoppedSequencePlayers"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UUMGSequencePlayer_NoRegister());
				UProperty* NewProp_ActiveSequencePlayers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveSequencePlayers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ActiveSequencePlayers, UUserWidget), 0x0000000000002000);
				UProperty* NewProp_ActiveSequencePlayers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ActiveSequencePlayers, TEXT("ActiveSequencePlayers"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UUMGSequencePlayer_NoRegister());
				UProperty* NewProp_WidgetTree = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetTree"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WidgetTree, UUserWidget), 0x0000000000002000, Z_Construct_UClass_UWidgetTree_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsKeyboardFocus, UUserWidget, bool);
				UProperty* NewProp_bSupportsKeyboardFocus = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSupportsKeyboardFocus"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsKeyboardFocus, UUserWidget), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bSupportsKeyboardFocus, UUserWidget), sizeof(bool), true);
				UProperty* NewProp_ForegroundColorDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForegroundColorDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(ForegroundColorDelegate, UUserWidget), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetSlateColor__DelegateSignature());
				UProperty* NewProp_ForegroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForegroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ForegroundColor, UUserWidget), 0x0000000000000015, Z_Construct_UScriptStruct_FSlateColor());
				UProperty* NewProp_ColorAndOpacityDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacityDelegate"), RF_Public|RF_Transient|RF_Native) UDelegateProperty(CPP_PROPERTY_BASE(ColorAndOpacityDelegate, UUserWidget), 0x0000000000080000, Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature());
				UProperty* NewProp_ColorAndOpacity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ColorAndOpacity"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ColorAndOpacity, UUserWidget), 0x0000000000000015, Z_Construct_UScriptStruct_FLinearColor());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_AddToPlayerScreen()); // 3385438730
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_AddToViewport()); // 2582573047
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_Construct()); // 2072065393
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_Destruct()); // 1104185494
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_GetIsVisible()); // 1686364882
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_GetOwningLocalPlayer()); // 2003157921
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_GetOwningPlayer()); // 2026168604
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_GetOwningPlayerPawn()); // 41080299
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_IsInteractable()); // 3123926474
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_IsInViewport()); // 1368844916
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnAnalogValueChanged()); // 279506089
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnAnimationFinished()); // 2254018427
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnAnimationStarted()); // 1122544974
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnControllerAnalogValueChanged()); // 2491561360
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnControllerButtonPressed()); // 2432689238
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnControllerButtonReleased()); // 1850666593
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnDragCancelled()); // 290644159
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnDragDetected()); // 3332372819
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnDragEnter()); // 2258781576
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnDragLeave()); // 95833978
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnDragOver()); // 2101083931
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnDrop()); // 864572694
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnFocusLost()); // 3903386627
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnFocusReceived()); // 461902663
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnKeyChar()); // 1068165517
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnKeyDown()); // 2046557183
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnKeyUp()); // 348850712
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnMotionDetected()); // 4096301964
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnMouseButtonDoubleClick()); // 3289091598
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnMouseButtonDown()); // 1071528168
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnMouseButtonUp()); // 2279807705
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnMouseEnter()); // 88729342
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnMouseLeave()); // 1195659886
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnMouseMove()); // 570071371
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnMouseWheel()); // 50024468
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnPaint()); // 2814584383
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnPreviewKeyDown()); // 1954827268
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnPreviewMouseButtonDown()); // 1504397699
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnTouchEnded()); // 3742956308
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnTouchGesture()); // 3252971126
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnTouchMoved()); // 3642718366
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_OnTouchStarted()); // 4132377619
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_PauseAnimation()); // 2090197726
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_PlayAnimation()); // 4256251726
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_PlaySound()); // 3518422547
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_RemoveFromViewport()); // 2814838119
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_SetAlignmentInViewport()); // 1002056455
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_SetAnchorsInViewport()); // 1693805212
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_SetColorAndOpacity()); // 1639006230
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_SetDesiredSizeInViewport()); // 224907083
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_SetForegroundColor()); // 1868579219
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_SetOwningLocalPlayer()); // 867256029
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_SetPositionInViewport()); // 2091613154
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_StopAnimation()); // 3579226415
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UUserWidget_Tick()); // 4021448791
				OuterClass->Interfaces.Add(FImplementedInterface(Z_Construct_UClass_UNamedSlotInterface_NoRegister(), VTABLE_OFFSET(UUserWidget, INamedSlotInterface), false ));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("Category"), TEXT("User Controls"));
				MetaData->SetValue(OuterClass, TEXT("DontUseGenericSpawnObject"), TEXT("True"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/UserWidget.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The user widget is extensible by users through the WidgetBlueprint."));
				MetaData->SetValue(NewProp_PreviewBackground, TEXT("Category"), TEXT("Designer"));
				MetaData->SetValue(NewProp_PreviewBackground, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_PreviewBackground, TEXT("ToolTip"), TEXT("A preview background that you can use when designing the UI to get a sense of scale on the screen.  Use\na texture with a screenshot of your game in it, for example if you were designing a HUD."));
				MetaData->SetValue(NewProp_PaletteCategory, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_PaletteCategory, TEXT("ToolTip"), TEXT("The category this widget appears in the palette."));
				MetaData->SetValue(NewProp_DesignSizeMode, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_bUseDesiredSizeAtDesignTime, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_bUseDesiredSizeAtDesignTime, TEXT("ToolTip"), TEXT("A flag that determines if the widget's desired size is used for previewing the widget in the designer."));
				MetaData->SetValue(NewProp_bUseDesignTimeSize, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_bUseDesignTimeSize, TEXT("ToolTip"), TEXT("A flag that determines if the design time size is used for previewing the widget in the designer."));
				MetaData->SetValue(NewProp_DesignTimeSize, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_DesignTimeSize, TEXT("ToolTip"), TEXT("Stores the design time desired size of the user widget"));
				MetaData->SetValue(NewProp_NamedSlotBindings, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_NamedSlotBindings, TEXT("ToolTip"), TEXT("Stores the widgets being assigned to named slots"));
				MetaData->SetValue(NewProp_StoppedSequencePlayers, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_StoppedSequencePlayers, TEXT("ToolTip"), TEXT("List of sequence players to cache and clean up when safe"));
				MetaData->SetValue(NewProp_ActiveSequencePlayers, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_ActiveSequencePlayers, TEXT("ToolTip"), TEXT("All the sequence players currently playing"));
				MetaData->SetValue(NewProp_WidgetTree, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_WidgetTree, TEXT("ToolTip"), TEXT("The widget tree contained inside this user widget initialized by the blueprint"));
				MetaData->SetValue(NewProp_bSupportsKeyboardFocus, TEXT("Category"), TEXT("Interaction"));
				MetaData->SetValue(NewProp_bSupportsKeyboardFocus, TEXT("DisplayName"), TEXT("Is Focusable"));
				MetaData->SetValue(NewProp_bSupportsKeyboardFocus, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_bSupportsKeyboardFocus, TEXT("ToolTip"), TEXT("Setting this flag to true, allows this widget to accept focus when clicked, or when navigated to."));
				MetaData->SetValue(NewProp_ForegroundColorDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_ForegroundColor, TEXT("ToolTip"), TEXT("The foreground color of the widget, this is inherited by sub widgets.  Any color property\nthat is marked as inherit will use this color."));
				MetaData->SetValue(NewProp_ColorAndOpacityDelegate, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/UserWidget.h"));
				MetaData->SetValue(NewProp_ColorAndOpacity, TEXT("ToolTip"), TEXT("The color and opacity of this widget.  Tints all child widgets."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UUserWidget(Z_Construct_UClass_UUserWidget, TEXT("UUserWidget"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UUserWidget);
	UScriptStruct* Z_Construct_UScriptStruct_FWidgetAnimationBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FWidgetAnimationBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("WidgetAnimationBinding"), sizeof(FWidgetAnimationBinding), Get_Z_Construct_UScriptStruct_FWidgetAnimationBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WidgetAnimationBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWidgetAnimationBinding>, EStructFlags(0x00000001));
			UProperty* NewProp_AnimationGuid = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AnimationGuid"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AnimationGuid, FWidgetAnimationBinding), 0x0000000000000000, Z_Construct_UScriptStruct_FGuid());
			UProperty* NewProp_SlotWidgetName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SlotWidgetName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(SlotWidgetName, FWidgetAnimationBinding), 0x0000000000000000);
			UProperty* NewProp_WidgetName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WidgetName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(WidgetName, FWidgetAnimationBinding), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimationBinding.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A single object bound to a UMG sequence."));
			MetaData->SetValue(NewProp_AnimationGuid, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimationBinding.h"));
			MetaData->SetValue(NewProp_SlotWidgetName, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimationBinding.h"));
			MetaData->SetValue(NewProp_WidgetName, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimationBinding.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWidgetAnimationBinding_CRC() { return 808813768U; }
	UFunction* Z_Construct_UFunction_UWidgetAnimation_GetEndTime()
	{
		struct WidgetAnimation_eventGetEndTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetAnimation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEndTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020403, 65535, sizeof(WidgetAnimation_eventGetEndTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetAnimation_eventGetEndTime_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the end time of this animation.\n\n@return End time in seconds.\n@see GetStartTime"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetAnimation_GetStartTime()
	{
		struct WidgetAnimation_eventGetStartTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetAnimation();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetStartTime"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020403, 65535, sizeof(WidgetAnimation_eventGetStartTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetAnimation_eventGetStartTime_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the start time of this animation.\n\n@return Start time in seconds.\n@see GetEndTime"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetAnimation_NoRegister()
	{
		return UWidgetAnimation::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetAnimation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMovieSceneSequence();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidgetAnimation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetAnimation_GetEndTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetAnimation_GetStartTime());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AnimationBindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationBindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AnimationBindings, UWidgetAnimation), 0x0000000000000000);
				UProperty* NewProp_AnimationBindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AnimationBindings, TEXT("AnimationBindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FWidgetAnimationBinding());
				UProperty* NewProp_MovieScene = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MovieScene"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MovieScene, UWidgetAnimation), 0x0000000000000000, Z_Construct_UClass_UMovieScene_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetAnimation_GetEndTime()); // 4076994699
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetAnimation_GetStartTime()); // 3830024096
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Animation/WidgetAnimation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
				MetaData->SetValue(NewProp_AnimationBindings, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
				MetaData->SetValue(NewProp_MovieScene, TEXT("ModuleRelativePath"), TEXT("Public/Animation/WidgetAnimation.h"));
				MetaData->SetValue(NewProp_MovieScene, TEXT("ToolTip"), TEXT("Pointer to the movie scene that controls this animation."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetAnimation(Z_Construct_UClass_UWidgetAnimation, TEXT("UWidgetAnimation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetAnimation);
	UEnum* Z_Construct_UEnum_UMG_EBindingKind()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EBindingKind_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EBindingKind"), 0, Get_Z_Construct_UEnum_UMG_EBindingKind_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBindingKind"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EBindingKind::Function")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EBindingKind::Property")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EBindingKind::EBindingKind_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EBindingKind_CRC() { return 2997590355U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDelegateRuntimeBinding()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FDelegateRuntimeBinding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("DelegateRuntimeBinding"), sizeof(FDelegateRuntimeBinding), Get_Z_Construct_UScriptStruct_FDelegateRuntimeBinding_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DelegateRuntimeBinding"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDelegateRuntimeBinding>, EStructFlags(0x00000001));
			UProperty* NewProp_Kind = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Kind"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Kind, FDelegateRuntimeBinding), 0x0000000000000000, Z_Construct_UEnum_UMG_EBindingKind());
			UProperty* NewProp_SourcePath = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SourcePath"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SourcePath, FDelegateRuntimeBinding), 0x0000000000000000, Z_Construct_UScriptStruct_FDynamicPropertyPath());
			UProperty* NewProp_FunctionName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FunctionName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FunctionName, FDelegateRuntimeBinding), 0x0000000000000000);
			UProperty* NewProp_PropertyName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PropertyName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(PropertyName, FDelegateRuntimeBinding), 0x0000000000000000);
			UProperty* NewProp_ObjectName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ObjectName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ObjectName, FDelegateRuntimeBinding), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_Kind, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_Kind, TEXT("ToolTip"), TEXT("The kind of binding we're performing, are we binding to a property or a function."));
			MetaData->SetValue(NewProp_SourcePath, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_FunctionName, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_FunctionName, TEXT("ToolTip"), TEXT("The function or property we're binding to on the source object."));
			MetaData->SetValue(NewProp_PropertyName, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_PropertyName, TEXT("ToolTip"), TEXT("The property on the widget that will have a binding placed on it."));
			MetaData->SetValue(NewProp_ObjectName, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
			MetaData->SetValue(NewProp_ObjectName, TEXT("ToolTip"), TEXT("The widget that will be bound to the live data."));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDelegateRuntimeBinding_CRC() { return 2078532636U; }
	UClass* Z_Construct_UClass_UWidgetBlueprintGeneratedClass_NoRegister()
	{
		return UWidgetBlueprintGeneratedClass::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetBlueprintGeneratedClass()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintGeneratedClass();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidgetBlueprintGeneratedClass::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NamedSlots = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NamedSlots"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(NamedSlots, UWidgetBlueprintGeneratedClass), 0x0000000000000000);
				UProperty* NewProp_NamedSlots_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NamedSlots, TEXT("NamedSlots"), RF_Public|RF_Transient|RF_Native) UNameProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_Animations = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Animations"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Animations, UWidgetBlueprintGeneratedClass), 0x0000000000000000);
				UProperty* NewProp_Animations_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Animations, TEXT("Animations"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UWidgetAnimation_NoRegister());
				UProperty* NewProp_Bindings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Bindings"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Bindings, UWidgetBlueprintGeneratedClass), 0x0000000000000000);
				UProperty* NewProp_Bindings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Bindings, TEXT("Bindings"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FDelegateRuntimeBinding());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_DesignerWidgetTree = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DesignerWidgetTree"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DesignerWidgetTree, UWidgetBlueprintGeneratedClass), 0x0000000800002000, Z_Construct_UClass_UWidgetTree_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_WidgetTree = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetTree"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WidgetTree, UWidgetBlueprintGeneratedClass), 0x0000000000000000, Z_Construct_UClass_UWidgetTree_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The widget blueprint generated class allows us to create blueprint-able widgets for UMG at runtime.\nAll WBPGC's are of UUserWidget classes, and they perform special post initialization using this class\nto give themselves many of the same capabilities as AActor blueprints, like dynamic delegate binding for\nwidgets."));
				MetaData->SetValue(NewProp_NamedSlots, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_Animations, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_Bindings, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_DesignerWidgetTree, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_DesignerWidgetTree, TEXT("ToolTip"), TEXT("A tree of the widget templates to be created.  This is only used by the designer to inject a new\ntree into a previously compiled class."));
				MetaData->SetValue(NewProp_WidgetTree, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintGeneratedClass.h"));
				MetaData->SetValue(NewProp_WidgetTree, TEXT("ToolTip"), TEXT("A tree of the widget templates to be created"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetBlueprintGeneratedClass(Z_Construct_UClass_UWidgetBlueprintGeneratedClass, TEXT("UWidgetBlueprintGeneratedClass"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetBlueprintGeneratedClass);
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CancelDragDrop()
	{
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CancelDragDrop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Cancels any current drag drop operation."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureJoystick()
	{
		struct WidgetBlueprintLibrary_eventCaptureJoystick_Parms
		{
			FEventReply Reply;
			UWidget* CapturingWidget;
			bool bInAllJoysticks;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CaptureJoystick"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventCaptureJoystick_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventCaptureJoystick_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAllJoysticks, WidgetBlueprintLibrary_eventCaptureJoystick_Parms, bool);
			UProperty* NewProp_bInAllJoysticks = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAllJoysticks"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAllJoysticks, WidgetBlueprintLibrary_eventCaptureJoystick_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAllJoysticks, WidgetBlueprintLibrary_eventCaptureJoystick_Parms), sizeof(bool), true);
			UProperty* NewProp_CapturingWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapturingWidget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CapturingWidget, WidgetBlueprintLibrary_eventCaptureJoystick_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventCaptureJoystick_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bInAllJoysticks"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use SetUserFocus() instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureMouse()
	{
		struct WidgetBlueprintLibrary_eventCaptureMouse_Parms
		{
			FEventReply Reply;
			UWidget* CapturingWidget;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CaptureMouse"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventCaptureMouse_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventCaptureMouse_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_CapturingWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapturingWidget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CapturingWidget, WidgetBlueprintLibrary_eventCaptureMouse_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventCaptureMouse_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ClearUserFocus()
	{
		struct WidgetBlueprintLibrary_eventClearUserFocus_Parms
		{
			FEventReply Reply;
			bool bInAllUsers;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearUserFocus"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventClearUserFocus_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventClearUserFocus_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAllUsers, WidgetBlueprintLibrary_eventClearUserFocus_Parms, bool);
			UProperty* NewProp_bInAllUsers = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAllUsers"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAllUsers, WidgetBlueprintLibrary_eventClearUserFocus_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAllUsers, WidgetBlueprintLibrary_eventClearUserFocus_Parms), sizeof(bool), true);
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventClearUserFocus_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bInAllUsers"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Create()
	{
		struct WidgetBlueprintLibrary_eventCreate_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UUserWidget>  WidgetType;
			APlayerController* OwningPlayer;
			UUserWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Create"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetBlueprintLibrary_eventCreate_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventCreate_Parms), 0x0000000000000580, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_OwningPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OwningPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OwningPlayer, WidgetBlueprintLibrary_eventCreate_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			UProperty* NewProp_WidgetType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetType"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(WidgetType, WidgetBlueprintLibrary_eventCreate_Parms), 0x0004000000000080, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetBlueprintLibrary_eventCreate_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Create Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a widget"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_CreateDragDropOperation()
	{
		struct WidgetBlueprintLibrary_eventCreateDragDropOperation_Parms
		{
			TSubclassOf<UDragDropOperation>  OperationClass;
			UDragDropOperation* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CreateDragDropOperation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(WidgetBlueprintLibrary_eventCreateDragDropOperation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventCreateDragDropOperation_Parms), 0x0000000000000580, Z_Construct_UClass_UDragDropOperation_NoRegister());
			UProperty* NewProp_OperationClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OperationClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(OperationClass, WidgetBlueprintLibrary_eventCreateDragDropOperation_Parms), 0x0004000000000080, Z_Construct_UClass_UDragDropOperation_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintInternalUseOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a new drag and drop operation that can be returned from a drag begin to inform the UI what i\nbeing dragged and dropped and what it looks like."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDrag()
	{
		struct WidgetBlueprintLibrary_eventDetectDrag_Parms
		{
			FEventReply Reply;
			UWidget* WidgetDetectingDrag;
			FKey DragKey;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DetectDrag"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventDetectDrag_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventDetectDrag_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_DragKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DragKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DragKey, WidgetBlueprintLibrary_eventDetectDrag_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_WidgetDetectingDrag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetDetectingDrag"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WidgetDetectingDrag, WidgetBlueprintLibrary_eventDetectDrag_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventDetectDrag_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WidgetDetectingDrag"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WidgetDetectingDrag"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Ask Slate to detect if a user starts dragging in this widget later.  Slate internally tracks the movement\nand if it surpasses the drag threshold, Slate will send an OnDragDetected event to the widget.\n\n@param WidgetDetectingDrag  Detect dragging in this widget\n@param DragKey                      This button should be pressed to detect the drag"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDragIfPressed()
	{
		struct WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms
		{
			FPointerEvent PointerEvent;
			UWidget* WidgetDetectingDrag;
			FKey DragKey;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DetectDragIfPressed"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_DragKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DragKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DragKey, WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKey());
			UProperty* NewProp_WidgetDetectingDrag = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetDetectingDrag"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WidgetDetectingDrag, WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_PointerEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PointerEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointerEvent, WidgetBlueprintLibrary_eventDetectDragIfPressed_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WidgetDetectingDrag"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WidgetDetectingDrag"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Given the pointer event, emit the DetectDrag reply if the provided key was pressed.\nIf the DragKey is a touch key, that will also automatically work.\n@param PointerEvent  The pointer device event coming in.\n@param WidgetDetectingDrag  Detect dragging in this widget.\n@param DragKey                      This button should be pressed to detect the drag, won't emit the DetectDrag FEventReply unless this is pressed."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DismissAllMenus()
	{
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DismissAllMenus"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Menu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Closes any popup menu"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawBox()
	{
		struct WidgetBlueprintLibrary_eventDrawBox_Parms
		{
			FPaintContext Context;
			FVector2D Position;
			FVector2D Size;
			USlateBrushAsset* Brush;
			FLinearColor Tint;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawBox"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventDrawBox_Parms));
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tint, WidgetBlueprintLibrary_eventDrawBox_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventDrawBox_Parms), 0x0000000000000080, Z_Construct_UClass_USlateBrushAsset_NoRegister());
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Size"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Size, WidgetBlueprintLibrary_eventDrawBox_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, WidgetBlueprintLibrary_eventDrawBox_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, WidgetBlueprintLibrary_eventDrawBox_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tint"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a box"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLine()
	{
		struct WidgetBlueprintLibrary_eventDrawLine_Parms
		{
			FPaintContext Context;
			FVector2D PositionA;
			FVector2D PositionB;
			FLinearColor Tint;
			bool bAntiAlias;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawLine"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventDrawLine_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAntiAlias, WidgetBlueprintLibrary_eventDrawLine_Parms, bool);
			UProperty* NewProp_bAntiAlias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAntiAlias"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAntiAlias, WidgetBlueprintLibrary_eventDrawLine_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bAntiAlias, WidgetBlueprintLibrary_eventDrawLine_Parms), sizeof(bool), true);
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tint, WidgetBlueprintLibrary_eventDrawLine_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_PositionB = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PositionB"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PositionB, WidgetBlueprintLibrary_eventDrawLine_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_PositionA = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PositionA"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PositionA, WidgetBlueprintLibrary_eventDrawLine_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, WidgetBlueprintLibrary_eventDrawLine_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("4"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAntiAlias"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tint"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws a line.\n\n@param PositionA             Starting position of the line in local space.\n@param PositionB             Ending position of the line in local space.\n@param Thickness             How many pixels thick this line should be.\n@param Tint                  Color to render the line."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLines()
	{
		struct WidgetBlueprintLibrary_eventDrawLines_Parms
		{
			FPaintContext Context;
			TArray<FVector2D> Points;
			FLinearColor Tint;
			bool bAntiAlias;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawLines"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventDrawLines_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAntiAlias, WidgetBlueprintLibrary_eventDrawLines_Parms, bool);
			UProperty* NewProp_bAntiAlias = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bAntiAlias"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAntiAlias, WidgetBlueprintLibrary_eventDrawLines_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(bAntiAlias, WidgetBlueprintLibrary_eventDrawLines_Parms), sizeof(bool), true);
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tint, WidgetBlueprintLibrary_eventDrawLines_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Points = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Points"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Points, WidgetBlueprintLibrary_eventDrawLines_Parms), 0x0000000008000182);
			UProperty* NewProp_Points_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Points, TEXT("Points"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, WidgetBlueprintLibrary_eventDrawLines_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("3"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bAntiAlias"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tint"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws several line segments.\n\n@param Points                Line pairs, each line needs to be 2 separate points in the array.\n@param Thickness             How many pixels thick this line should be.\n@param Tint                  Color to render the line."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawText()
	{
		struct WidgetBlueprintLibrary_eventDrawText_Parms
		{
			FPaintContext Context;
			FString InString;
			FVector2D Position;
			FLinearColor Tint;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawText"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventDrawText_Parms));
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tint, WidgetBlueprintLibrary_eventDrawText_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, WidgetBlueprintLibrary_eventDrawText_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_InString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(InString, WidgetBlueprintLibrary_eventDrawText_Parms), 0x0000000000000080);
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, WidgetBlueprintLibrary_eventDrawText_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tint"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use Draw Text instead"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw String"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws text.\n\n@param InString              The string to draw.\n@param Position              The starting position where the text is drawn in local space.\n@param Tint                  Color to render the line."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawTextFormatted()
	{
		struct WidgetBlueprintLibrary_eventDrawTextFormatted_Parms
		{
			FPaintContext Context;
			FText Text;
			FVector2D Position;
			UFont* Font;
			int32 FontSize;
			FName FontTypeFace;
			FLinearColor Tint;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DrawTextFormatted"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(WidgetBlueprintLibrary_eventDrawTextFormatted_Parms));
			UProperty* NewProp_Tint = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Tint"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Tint, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_FontTypeFace = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FontTypeFace"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(FontTypeFace, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0000000000000080);
			UProperty* NewProp_FontSize = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FontSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(FontSize, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0000000000000080);
			UProperty* NewProp_Font = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Font"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Font, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0000000000000080, Z_Construct_UClass_UFont_NoRegister());
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Text = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Text"), RF_Public|RF_Transient|RF_Native) UTextProperty(CPP_PROPERTY_BASE(Text, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0000000008000182);
			UProperty* NewProp_Context = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Context"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Context, WidgetBlueprintLibrary_eventDrawTextFormatted_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FPaintContext());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Painting"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_FontSize"), TEXT("16"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_FontTypeFace"), TEXT("Regular"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Tint"), TEXT("(R=1.000000,G=1.000000,B=1.000000,A=1.000000)"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Draw Text"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Draws text.\n\n@param Text                  The string to draw.\n@param Position              The starting position where the text is drawn in local space.\n@param Tint                  Color to render the line."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_EndDragDrop()
	{
		struct WidgetBlueprintLibrary_eventEndDragDrop_Parms
		{
			FEventReply Reply;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EndDragDrop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventEndDragDrop_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventEndDragDrop_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventEndDragDrop_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("An event should return FReply::Handled().EndDragDrop() to request that the current drag/drop operation be terminated."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsOfClass()
	{
		struct WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms
		{
			UObject* WorldContextObject;
			TArray<UUserWidget*> FoundWidgets;
			TSubclassOf<UUserWidget>  WidgetClass;
			bool TopLevelOnly;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAllWidgetsOfClass"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422409, 65535, sizeof(WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms, bool);
			UProperty* NewProp_TopLevelOnly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TopLevelOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms), sizeof(bool), true);
			UProperty* NewProp_WidgetClass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WidgetClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(WidgetClass, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms), 0x0004000000000080, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_FoundWidgets = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FoundWidgets"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FoundWidgets, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms), 0x0000000000000180);
			UProperty* NewProp_FoundWidgets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FoundWidgets, TEXT("FoundWidgets"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetBlueprintLibrary_eventGetAllWidgetsOfClass_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_TopLevelOnly"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find all widgets of a certain class.\n@param FoundWidgets The widgets that were found matching the filter.\n@param WidgetClass The widget class to filter by.\n@param TopLevelOnly Only the widgets that are direct children of the viewport will be returned."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsWithInterface()
	{
		struct WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms
		{
			UObject* WorldContextObject;
			TSubclassOf<UInterface>  Interface;
			TArray<UUserWidget*> FoundWidgets;
			bool TopLevelOnly;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAllWidgetsWithInterface"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422409, 65535, sizeof(WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms, bool);
			UProperty* NewProp_TopLevelOnly = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TopLevelOnly"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(TopLevelOnly, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms), sizeof(bool), true);
			UProperty* NewProp_FoundWidgets = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FoundWidgets"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(FoundWidgets, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms), 0x0000000000000180);
			UProperty* NewProp_FoundWidgets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_FoundWidgets, TEXT("FoundWidgets"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UUserWidget_NoRegister());
			UProperty* NewProp_Interface = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Interface"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(Interface, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms), 0x0004000000000080, UInterface::StaticClass());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetBlueprintLibrary_eventGetAllWidgetsWithInterface_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Find all widgets in the world with the specified interface.\nThis is a slow operation, use with caution e.g. do not use every frame.\n@param Interface The interface to find. Must be specified or result array will be empty.\n@param FoundWidgets Output array of widgets that implement the specified interface.\n@param TopLevelOnly Only the widgets that are direct children of the viewport will be returned."));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResource()
	{
		struct WidgetBlueprintLibrary_eventGetBrushResource_Parms
		{
			FSlateBrush Brush;
			UObject* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBrushResource"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetBrushResource_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetBrushResource_Parms), 0x0000000000000580, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventGetBrushResource_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the resource object on a brush.  This could be a UTexture2D or a UMaterialInterface."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsMaterial()
	{
		struct WidgetBlueprintLibrary_eventGetBrushResourceAsMaterial_Parms
		{
			FSlateBrush Brush;
			UMaterialInterface* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBrushResourceAsMaterial"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetBrushResourceAsMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetBrushResourceAsMaterial_Parms), 0x0000000000000580, Z_Construct_UClass_UMaterialInterface_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventGetBrushResourceAsMaterial_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the brush resource as a material."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsTexture2D()
	{
		struct WidgetBlueprintLibrary_eventGetBrushResourceAsTexture2D_Parms
		{
			FSlateBrush Brush;
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBrushResourceAsTexture2D"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetBrushResourceAsTexture2D_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetBrushResourceAsTexture2D_Parms), 0x0000000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventGetBrushResourceAsTexture2D_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the brush resource as a texture 2D."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDragDroppingContent()
	{
		struct WidgetBlueprintLibrary_eventGetDragDroppingContent_Parms
		{
			UDragDropOperation* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDragDroppingContent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022409, 65535, sizeof(WidgetBlueprintLibrary_eventGetDragDroppingContent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetDragDroppingContent_Parms), 0x0000000000000580, Z_Construct_UClass_UDragDropOperation_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the drag and drop operation that is currently occurring if any, otherwise nothing."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDynamicMaterial()
	{
		struct WidgetBlueprintLibrary_eventGetDynamicMaterial_Parms
		{
			FSlateBrush Brush;
			UMaterialInstanceDynamic* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDynamicMaterial"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetDynamicMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetDynamicMaterial_Parms), 0x0000000000000580, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventGetDynamicMaterial_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the material that allows changes to parameters at runtime.  The brush must already have a material assigned to it,\nif it does it will automatically be converted to a MID.\n\n@return A material that supports dynamic input from the game."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromCharacterEvent()
	{
		struct WidgetBlueprintLibrary_eventGetInputEventFromCharacterEvent_Parms
		{
			FCharacterEvent Event;
			FInputEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInputEventFromCharacterEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetInputEventFromCharacterEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetInputEventFromCharacterEvent_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FInputEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetInputEventFromCharacterEvent_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FCharacterEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromControllerEvent()
	{
		struct WidgetBlueprintLibrary_eventGetInputEventFromControllerEvent_Parms
		{
			FControllerEvent Event;
			FInputEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInputEventFromControllerEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetInputEventFromControllerEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetInputEventFromControllerEvent_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FInputEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetInputEventFromControllerEvent_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FControllerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromKeyEvent()
	{
		struct WidgetBlueprintLibrary_eventGetInputEventFromKeyEvent_Parms
		{
			FKeyEvent Event;
			FInputEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInputEventFromKeyEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetInputEventFromKeyEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetInputEventFromKeyEvent_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FInputEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetInputEventFromKeyEvent_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FKeyEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromNavigationEvent()
	{
		struct WidgetBlueprintLibrary_eventGetInputEventFromNavigationEvent_Parms
		{
			FNavigationEvent Event;
			FInputEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInputEventFromNavigationEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetInputEventFromNavigationEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetInputEventFromNavigationEvent_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FInputEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetInputEventFromNavigationEvent_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FNavigationEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromPointerEvent()
	{
		struct WidgetBlueprintLibrary_eventGetInputEventFromPointerEvent_Parms
		{
			FPointerEvent Event;
			FInputEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInputEventFromPointerEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetInputEventFromPointerEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetInputEventFromPointerEvent_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FInputEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetInputEventFromPointerEvent_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FPointerEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_GetKeyEventFromAnalogInputEvent()
	{
		struct WidgetBlueprintLibrary_eventGetKeyEventFromAnalogInputEvent_Parms
		{
			FAnalogInputEvent Event;
			FKeyEvent ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetKeyEventFromAnalogInputEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventGetKeyEventFromAnalogInputEvent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventGetKeyEventFromAnalogInputEvent_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FKeyEvent());
			UProperty* NewProp_Event = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Event"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Event, WidgetBlueprintLibrary_eventGetKeyEventFromAnalogInputEvent_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FAnalogInputEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Handled()
	{
		struct WidgetBlueprintLibrary_eventHandled_Parms
		{
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Handled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventHandled_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventHandled_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The event reply to use when you choose to handle an event.  This will prevent the event\nfrom continuing to bubble up / down the widget hierarchy."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_IsDragDropping()
	{
		struct WidgetBlueprintLibrary_eventIsDragDropping_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsDragDropping"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022409, 65535, sizeof(WidgetBlueprintLibrary_eventIsDragDropping_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetBlueprintLibrary_eventIsDragDropping_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetBlueprintLibrary_eventIsDragDropping_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetBlueprintLibrary_eventIsDragDropping_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Drag and Drop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns true if a drag/drop event is occurring that a widget can handle."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_LockMouse()
	{
		struct WidgetBlueprintLibrary_eventLockMouse_Parms
		{
			FEventReply Reply;
			UWidget* CapturingWidget;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LockMouse"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventLockMouse_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventLockMouse_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_CapturingWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapturingWidget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CapturingWidget, WidgetBlueprintLibrary_eventLockMouse_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventLockMouse_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromAsset()
	{
		struct WidgetBlueprintLibrary_eventMakeBrushFromAsset_Parms
		{
			USlateBrushAsset* BrushAsset;
			FSlateBrush ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeBrushFromAsset"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventMakeBrushFromAsset_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventMakeBrushFromAsset_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BrushAsset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BrushAsset"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BrushAsset, WidgetBlueprintLibrary_eventMakeBrushFromAsset_Parms), 0x0000000000000080, Z_Construct_UClass_USlateBrushAsset_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a Slate Brush from a Slate Brush Asset\n\n@return A new slate brush using the asset's brush."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromMaterial()
	{
		struct WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms
		{
			UMaterialInterface* Material;
			int32 Width;
			int32 Height;
			FSlateBrush ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeBrushFromMaterial"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Height, WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms), 0x0000000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Width, WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms), 0x0000000000000080);
			UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Material"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Material, WidgetBlueprintLibrary_eventMakeBrushFromMaterial_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Height"), TEXT("32"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Width"), TEXT("32"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a Slate Brush from a Material.  Materials don't have an implicit size, so providing a widget and height\nis required to hint slate with how large the image wants to be by default.\n\n@return A new slate brush using the material."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromTexture()
	{
		struct WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms
		{
			UTexture2D* Texture;
			int32 Width;
			int32 Height;
			FSlateBrush ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("MakeBrushFromTexture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Height, WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms), 0x0000000000000080);
			UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Width, WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms), 0x0000000000000080);
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Texture, WidgetBlueprintLibrary_eventMakeBrushFromTexture_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Height"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_Width"), TEXT("0"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a Slate Brush from a Texture2D\n\n@param Width  When less than or equal to zero, the Width of the brush will default to the Width of the Texture\n@param Height  When less than or equal to zero, the Height of the brush will default to the Height of the Texture\n\n@return A new slate brush using the texture."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_NoResourceBrush()
	{
		struct WidgetBlueprintLibrary_eventNoResourceBrush_Parms
		{
			FSlateBrush ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NoResourceBrush"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventNoResourceBrush_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventNoResourceBrush_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Creates a Slate Brush that wont draw anything, the \"Null Brush\".\n\n@return A new slate brush that wont draw anything."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseJoystickCapture()
	{
		struct WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms
		{
			FEventReply Reply;
			bool bInAllJoysticks;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReleaseJoystickCapture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAllJoysticks, WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms, bool);
			UProperty* NewProp_bInAllJoysticks = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAllJoysticks"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAllJoysticks, WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAllJoysticks, WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms), sizeof(bool), true);
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventReleaseJoystickCapture_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bInAllJoysticks"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Use ClearUserFocus() instead"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseMouseCapture()
	{
		struct WidgetBlueprintLibrary_eventReleaseMouseCapture_Parms
		{
			FEventReply Reply;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReleaseMouseCapture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventReleaseMouseCapture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventReleaseMouseCapture_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventReleaseMouseCapture_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToMaterial()
	{
		struct WidgetBlueprintLibrary_eventSetBrushResourceToMaterial_Parms
		{
			FSlateBrush Brush;
			UMaterialInterface* Material;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushResourceToMaterial"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(WidgetBlueprintLibrary_eventSetBrushResourceToMaterial_Parms));
			UProperty* NewProp_Material = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Material"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Material, WidgetBlueprintLibrary_eventSetBrushResourceToMaterial_Parms), 0x0000000000000080, Z_Construct_UClass_UMaterialInterface_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventSetBrushResourceToMaterial_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the resource on a brush to be a Material."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToTexture()
	{
		struct WidgetBlueprintLibrary_eventSetBrushResourceToTexture_Parms
		{
			FSlateBrush Brush;
			UTexture2D* Texture;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBrushResourceToTexture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(WidgetBlueprintLibrary_eventSetBrushResourceToTexture_Parms));
			UProperty* NewProp_Texture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Texture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Texture, WidgetBlueprintLibrary_eventSetBrushResourceToTexture_Parms), 0x0000000000000080, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_Brush = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Brush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Brush, WidgetBlueprintLibrary_eventSetBrushResourceToTexture_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Brush"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the resource on a brush to be a UTexture2D."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetFocusToGameViewport()
	{
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFocusToGameViewport"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Focus"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUI()
	{
		struct WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms
		{
			APlayerController* Target;
			UWidget* InWidgetToFocus;
			bool bLockMouseToViewport;
			bool bHideCursorDuringCapture;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInputMode_GameAndUI"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHideCursorDuringCapture, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms, bool);
			UProperty* NewProp_bHideCursorDuringCapture = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bHideCursorDuringCapture"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHideCursorDuringCapture, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bHideCursorDuringCapture, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms, bool);
			UProperty* NewProp_bLockMouseToViewport = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bLockMouseToViewport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), sizeof(bool), true);
			UProperty* NewProp_InWidgetToFocus = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWidgetToFocus"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InWidgetToFocus, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Target, WidgetBlueprintLibrary_eventSetInputMode_GameAndUI_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bHideCursorDuringCapture"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bLockMouseToViewport"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Setup an input mode that allows only the UI to respond to user input, and if the UI doesn't handle it player input / player controller gets a chance."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameOnly()
	{
		struct WidgetBlueprintLibrary_eventSetInputMode_GameOnly_Parms
		{
			APlayerController* Target;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInputMode_GameOnly"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetBlueprintLibrary_eventSetInputMode_GameOnly_Parms));
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Target, WidgetBlueprintLibrary_eventSetInputMode_GameOnly_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Setup an input mode that allows only player input / player controller to respond to user input."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnly()
	{
		struct WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms
		{
			APlayerController* Target;
			UWidget* InWidgetToFocus;
			bool bLockMouseToViewport;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInputMode_UIOnly"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms, bool);
			UProperty* NewProp_bLockMouseToViewport = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bLockMouseToViewport"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bLockMouseToViewport, WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms), sizeof(bool), true);
			UProperty* NewProp_InWidgetToFocus = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWidgetToFocus"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(InWidgetToFocus, WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Target"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Target, WidgetBlueprintLibrary_eventSetInputMode_UIOnly_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bLockMouseToViewport"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Setup an input mode that allows only the UI to respond to user input."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetMousePosition()
	{
		struct WidgetBlueprintLibrary_eventSetMousePosition_Parms
		{
			FEventReply Reply;
			FVector2D NewMousePosition;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMousePosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(WidgetBlueprintLibrary_eventSetMousePosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventSetMousePosition_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_NewMousePosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewMousePosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(NewMousePosition, WidgetBlueprintLibrary_eventSetMousePosition_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventSetMousePosition_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_SetUserFocus()
	{
		struct WidgetBlueprintLibrary_eventSetUserFocus_Parms
		{
			FEventReply Reply;
			UWidget* FocusWidget;
			bool bInAllUsers;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetUserFocus"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventSetUserFocus_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventSetUserFocus_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAllUsers, WidgetBlueprintLibrary_eventSetUserFocus_Parms, bool);
			UProperty* NewProp_bInAllUsers = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAllUsers"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAllUsers, WidgetBlueprintLibrary_eventSetUserFocus_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAllUsers, WidgetBlueprintLibrary_eventSetUserFocus_Parms), sizeof(bool), true);
			UProperty* NewProp_FocusWidget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FocusWidget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FocusWidget, WidgetBlueprintLibrary_eventSetUserFocus_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventSetUserFocus_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bInAllUsers"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("CapturingWidget"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_Unhandled()
	{
		struct WidgetBlueprintLibrary_eventUnhandled_Parms
		{
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Unhandled"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetBlueprintLibrary_eventUnhandled_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventUnhandled_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The event reply to use when you choose not to handle an event."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetBlueprintLibrary_UnlockMouse()
	{
		struct WidgetBlueprintLibrary_eventUnlockMouse_Parms
		{
			FEventReply Reply;
			FEventReply ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetBlueprintLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UnlockMouse"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(WidgetBlueprintLibrary_eventUnlockMouse_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetBlueprintLibrary_eventUnlockMouse_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FEventReply());
			UProperty* NewProp_Reply = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Reply"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Reply, WidgetBlueprintLibrary_eventUnlockMouse_Parms), 0x0000000008000180, Z_Construct_UScriptStruct_FEventReply());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Widget|Event Reply"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetBlueprintLibrary_NoRegister()
	{
		return UWidgetBlueprintLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetBlueprintLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidgetBlueprintLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_CancelDragDrop());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureJoystick());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureMouse());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_ClearUserFocus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_Create());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_CreateDragDropOperation());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDrag());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDragIfPressed());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DismissAllMenus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawBox());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLine());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLines());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawText());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawTextFormatted());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_EndDragDrop());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsOfClass());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsWithInterface());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResource());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsTexture2D());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDragDroppingContent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDynamicMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromCharacterEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromControllerEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromKeyEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromNavigationEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromPointerEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetKeyEventFromAnalogInputEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_Handled());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_IsDragDropping());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_LockMouse());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromAsset());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_NoResourceBrush());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseJoystickCapture());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseMouseCapture());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToMaterial());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetFocusToGameViewport());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUI());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameOnly());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnly());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetMousePosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetUserFocus());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_Unhandled());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetBlueprintLibrary_UnlockMouse());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_CancelDragDrop()); // 1531555126
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureJoystick()); // 1359148742
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_CaptureMouse()); // 2153692403
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_ClearUserFocus()); // 2324414466
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_Create()); // 2686494887
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_CreateDragDropOperation()); // 1924813327
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDrag()); // 2992108069
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_DetectDragIfPressed()); // 476910944
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_DismissAllMenus()); // 1790889608
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawBox()); // 1242612788
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLine()); // 1150960231
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawLines()); // 3236731674
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawText()); // 1559906395
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_DrawTextFormatted()); // 3395736673
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_EndDragDrop()); // 1411544771
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsOfClass()); // 2424081793
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetAllWidgetsWithInterface()); // 2155329807
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResource()); // 251313941
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsMaterial()); // 2290934064
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetBrushResourceAsTexture2D()); // 118822841
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDragDroppingContent()); // 1876964177
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetDynamicMaterial()); // 1967271302
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromCharacterEvent()); // 3170585109
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromControllerEvent()); // 4122081501
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromKeyEvent()); // 3758392753
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromNavigationEvent()); // 1653346367
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetInputEventFromPointerEvent()); // 2760000286
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_GetKeyEventFromAnalogInputEvent()); // 1341316485
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_Handled()); // 2884140714
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_IsDragDropping()); // 3412578319
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_LockMouse()); // 2557427248
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromAsset()); // 4029391517
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromMaterial()); // 3554696489
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_MakeBrushFromTexture()); // 2501481690
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_NoResourceBrush()); // 1611024472
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseJoystickCapture()); // 215107312
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_ReleaseMouseCapture()); // 1332485046
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToMaterial()); // 948489273
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetBrushResourceToTexture()); // 1614320988
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetFocusToGameViewport()); // 4196136773
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameAndUI()); // 3278994589
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_GameOnly()); // 1005923776
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetInputMode_UIOnly()); // 3497780580
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetMousePosition()); // 1753732160
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_SetUserFocus()); // 2065938142
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_Unhandled()); // 46315722
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetBlueprintLibrary_UnlockMouse()); // 3298608981
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/WidgetBlueprintLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetBlueprintLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetBlueprintLibrary(Z_Construct_UClass_UWidgetBlueprintLibrary, TEXT("UWidgetBlueprintLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetBlueprintLibrary);
	UEnum* Z_Construct_UEnum_UMG_EWidgetBlendMode()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EWidgetBlendMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EWidgetBlendMode"), 0, Get_Z_Construct_UEnum_UMG_EWidgetBlendMode_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EWidgetBlendMode"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetBlendMode::Opaque")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetBlendMode::Masked")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetBlendMode::Transparent")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetBlendMode::EWidgetBlendMode_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EWidgetBlendMode_CRC() { return 827012990U; }
	UEnum* Z_Construct_UEnum_UMG_EWidgetSpace()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UEnum_UMG_EWidgetSpace_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EWidgetSpace"), 0, Get_Z_Construct_UEnum_UMG_EWidgetSpace_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EWidgetSpace"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetSpace::World")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetSpace::Screen")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EWidgetSpace::EWidgetSpace_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Screen.ToolTip"), TEXT("The widget is rendered in the screen, completely outside of the world, never occluded."));
			MetaData->SetValue(ReturnEnum, TEXT("World.ToolTip"), TEXT("The widget is rendered in the world as mesh, it can be occluded like any other mesh in the world."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_UMG_EWidgetSpace_CRC() { return 3358194966U; }
	UFunction* Z_Construct_UFunction_UWidgetComponent_GetDrawSize()
	{
		struct WidgetComponent_eventGetDrawSize_Parms
		{
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDrawSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(WidgetComponent_eventGetDrawSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetComponent_eventGetDrawSize_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The draw size of the quad in the world"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_GetMaxInteractionDistance()
	{
		struct WidgetComponent_eventGetMaxInteractionDistance_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMaxInteractionDistance"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetComponent_eventGetMaxInteractionDistance_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetComponent_eventGetMaxInteractionDistance_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The max distance from which a player can interact with this widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_GetOwnerPlayer()
	{
		struct WidgetComponent_eventGetOwnerPlayer_Parms
		{
			ULocalPlayer* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetOwnerPlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetComponent_eventGetOwnerPlayer_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetComponent_eventGetOwnerPlayer_Parms), 0x0000000000000580, Z_Construct_UClass_ULocalPlayer_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the local player that owns this widget component."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_GetUserWidgetObject()
	{
		struct WidgetComponent_eventGetUserWidgetObject_Parms
		{
			UUserWidget* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetUserWidgetObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(WidgetComponent_eventGetUserWidgetObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetComponent_eventGetUserWidgetObject_Parms), 0x0000000000000580, Z_Construct_UClass_UUserWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("@return The user widget object displayed by this component"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_SetDrawSize()
	{
		struct WidgetComponent_eventSetDrawSize_Parms
		{
			FVector2D Size;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDrawSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(WidgetComponent_eventSetDrawSize_Parms));
			UProperty* NewProp_Size = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Size"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Size, WidgetComponent_eventSetDrawSize_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the draw size of the quad in the world"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_SetMaxInteractionDistance()
	{
		struct WidgetComponent_eventSetMaxInteractionDistance_Parms
		{
			float Distance;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMaxInteractionDistance"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetComponent_eventSetMaxInteractionDistance_Parms));
			UProperty* NewProp_Distance = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Distance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Distance, WidgetComponent_eventSetMaxInteractionDistance_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the max distance from which a player can interact with this widget"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_SetOwnerPlayer()
	{
		struct WidgetComponent_eventSetOwnerPlayer_Parms
		{
			ULocalPlayer* LocalPlayer;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetOwnerPlayer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetComponent_eventSetOwnerPlayer_Parms));
			UProperty* NewProp_LocalPlayer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocalPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LocalPlayer, WidgetComponent_eventSetOwnerPlayer_Parms), 0x0000000000000080, Z_Construct_UClass_ULocalPlayer_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the local player that owns this widget component.  Setting the owning player controls\nwhich player's viewport the widget appears on in a split screen scenario.  Additionally it\nforwards the owning player to the actual UserWidget that is spawned."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetComponent_SetWidget()
	{
		struct WidgetComponent_eventSetWidget_Parms
		{
			UUserWidget* Widget;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetWidget"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(WidgetComponent_eventSetWidget_Parms));
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetComponent_eventSetWidget_Parms), 0x0000000000000080, Z_Construct_UClass_UUserWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("UserInterface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the widget to use directly."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetComponent_NoRegister()
	{
		return UWidgetComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPrimitiveComponent();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidgetComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B01080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_GetDrawSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_GetMaxInteractionDistance());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_GetOwnerPlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_GetUserWidgetObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_SetDrawSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_SetMaxInteractionDistance());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_SetOwnerPlayer());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetComponent_SetWidget());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAddedToScreen, UWidgetComponent, bool);
				UProperty* NewProp_bAddedToScreen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAddedToScreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAddedToScreen, UWidgetComponent), 0x0000080000202000, CPP_BOOL_PROPERTY_BITMASK(bAddedToScreen, UWidgetComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseLegacyRotation, UWidgetComponent, bool);
				UProperty* NewProp_bUseLegacyRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseLegacyRotation"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseLegacyRotation, UWidgetComponent), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bUseLegacyRotation, UWidgetComponent), sizeof(bool), true);
				UProperty* NewProp_MaterialInstance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaterialInstance"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MaterialInstance, UWidgetComponent), 0x0000080000202000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
				UProperty* NewProp_RenderTarget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RenderTarget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RenderTarget, UWidgetComponent), 0x0000080000202000, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
				UProperty* NewProp_MaskedMaterial_OneSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaskedMaterial_OneSided"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MaskedMaterial_OneSided, UWidgetComponent), 0x0000080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_MaskedMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaskedMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MaskedMaterial, UWidgetComponent), 0x0000080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_OpaqueMaterial_OneSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpaqueMaterial_OneSided"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OpaqueMaterial_OneSided, UWidgetComponent), 0x0000080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_OpaqueMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OpaqueMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OpaqueMaterial, UWidgetComponent), 0x0000080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_TranslucentMaterial_OneSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentMaterial_OneSided"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TranslucentMaterial_OneSided, UWidgetComponent), 0x0000080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_TranslucentMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TranslucentMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TranslucentMaterial, UWidgetComponent), 0x0000080000000000, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_BodySetup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BodySetup"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BodySetup, UWidgetComponent), 0x0000080000202000, Z_Construct_UClass_UBodySetup_NoRegister());
				UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Widget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Widget, UWidgetComponent), 0x0000080000202000, Z_Construct_UClass_UUserWidget_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(TickWhenOffscreen, UWidgetComponent, bool);
				UProperty* NewProp_TickWhenOffscreen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TickWhenOffscreen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TickWhenOffscreen, UWidgetComponent), 0x0000080000000001, CPP_BOOL_PROPERTY_BITMASK(TickWhenOffscreen, UWidgetComponent), sizeof(bool), true);
				UProperty* NewProp_ParabolaDistortion = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParabolaDistortion"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ParabolaDistortion, UWidgetComponent), 0x0000080000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTwoSided, UWidgetComponent, bool);
				UProperty* NewProp_bIsTwoSided = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsTwoSided"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTwoSided, UWidgetComponent), 0x0000080000000001, CPP_BOOL_PROPERTY_BITMASK(bIsTwoSided, UWidgetComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsOpaque_DEPRECATED, UWidgetComponent, bool);
				UProperty* NewProp_bIsOpaque = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsOpaque"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsOpaque_DEPRECATED, UWidgetComponent), 0x0000080020000000, CPP_BOOL_PROPERTY_BITMASK(bIsOpaque_DEPRECATED, UWidgetComponent), sizeof(bool), true);
				UProperty* NewProp_BlendMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlendMode"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(BlendMode, UWidgetComponent), 0x0000080000000001, Z_Construct_UEnum_UMG_EWidgetBlendMode());
				UProperty* NewProp_BackgroundColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BackgroundColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundColor, UWidgetComponent), 0x0000080000000001, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_OwnerPlayer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OwnerPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OwnerPlayer, UWidgetComponent), 0x0000080000000000, Z_Construct_UClass_ULocalPlayer_NoRegister());
				UProperty* NewProp_MaxInteractionDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxInteractionDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxInteractionDistance, UWidgetComponent), 0x0000080000000001);
				UProperty* NewProp_Pivot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Pivot"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Pivot, UWidgetComponent), 0x0000080000000001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_DrawSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DrawSize"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DrawSize, UWidgetComponent), 0x0000080000000001, Z_Construct_UScriptStruct_FIntPoint());
				UProperty* NewProp_WidgetClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WidgetClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(WidgetClass, UWidgetComponent), 0x0004080000000001, Z_Construct_UClass_UUserWidget_NoRegister());
				UProperty* NewProp_Space = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Space"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Space, UWidgetComponent), 0x0000080000000001, Z_Construct_UEnum_UMG_EWidgetSpace());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetComponent_GetDrawSize()); // 1575466374
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetComponent_GetMaxInteractionDistance()); // 2520216643
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetComponent_GetOwnerPlayer()); // 245656648
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetComponent_GetUserWidgetObject()); // 2149583035
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetComponent_SetDrawSize()); // 794344710
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetComponent_SetMaxInteractionDistance()); // 531943371
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetComponent_SetOwnerPlayer()); // 508851974
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetComponent_SetWidget()); // 2919336396
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("DevelopmentStatus"), TEXT("Experimental"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Activation Components|Activation Sockets Base Lighting LOD Mesh Mobility Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/WidgetComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Beware! This feature is experimental and may be substantially changed or removed in future releases.\nA 3D instance of a Widget Blueprint that can be interacted with in the world."));
				MetaData->SetValue(NewProp_bAddedToScreen, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_bUseLegacyRotation, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_MaterialInstance, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_MaterialInstance, TEXT("ToolTip"), TEXT("The dynamic instance of the material that the render target is attached to"));
				MetaData->SetValue(NewProp_RenderTarget, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_RenderTarget, TEXT("ToolTip"), TEXT("The target to which the user widget is rendered"));
				MetaData->SetValue(NewProp_MaskedMaterial_OneSided, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_MaskedMaterial_OneSided, TEXT("ToolTip"), TEXT("The material instance for masked, one-sided widget components."));
				MetaData->SetValue(NewProp_MaskedMaterial, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_MaskedMaterial, TEXT("ToolTip"), TEXT("The material instance for masked widget components."));
				MetaData->SetValue(NewProp_OpaqueMaterial_OneSided, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_OpaqueMaterial_OneSided, TEXT("ToolTip"), TEXT("The material instance for opaque, one-sided widget components"));
				MetaData->SetValue(NewProp_OpaqueMaterial, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_OpaqueMaterial, TEXT("ToolTip"), TEXT("The material instance for opaque widget components"));
				MetaData->SetValue(NewProp_TranslucentMaterial_OneSided, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_TranslucentMaterial_OneSided, TEXT("ToolTip"), TEXT("The material instance for translucent, one-sided widget components"));
				MetaData->SetValue(NewProp_TranslucentMaterial, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_TranslucentMaterial, TEXT("ToolTip"), TEXT("The material instance for translucent widget components"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ToolTip"), TEXT("The body setup of the displayed quad"));
				MetaData->SetValue(NewProp_Widget, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_Widget, TEXT("ToolTip"), TEXT("The User Widget object displayed and managed by this component"));
				MetaData->SetValue(NewProp_TickWhenOffscreen, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_TickWhenOffscreen, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_TickWhenOffscreen, TEXT("ToolTip"), TEXT("Should the component tick the widget when it's off screen?"));
				MetaData->SetValue(NewProp_ParabolaDistortion, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_ParabolaDistortion, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_ParabolaDistortion, TEXT("ToolTip"), TEXT("When enabled, distorts the UI along a parabola shape giving the UI the appearance\nthat it's on a curved surface in front of the users face.  This only works for UI\nrendered to a render target."));
				MetaData->SetValue(NewProp_bIsTwoSided, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_bIsTwoSided, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_bIsTwoSided, TEXT("ToolTip"), TEXT("Is the component visible from behind?"));
				MetaData->SetValue(NewProp_bIsOpaque, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_BlendMode, TEXT("ToolTip"), TEXT("The blend mode for the widget."));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("Category"), TEXT("Rendering"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_BackgroundColor, TEXT("ToolTip"), TEXT("The background color of the component"));
				MetaData->SetValue(NewProp_OwnerPlayer, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_OwnerPlayer, TEXT("ToolTip"), TEXT("The owner player for a widget component, if this widget is drawn on the screen, this controls\nwhat player's screen it appears on for split screen, if not set, users player 0."));
				MetaData->SetValue(NewProp_MaxInteractionDistance, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_MaxInteractionDistance, TEXT("ClampMax"), TEXT("100000.0"));
				MetaData->SetValue(NewProp_MaxInteractionDistance, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_MaxInteractionDistance, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_MaxInteractionDistance, TEXT("ToolTip"), TEXT("The maximum distance from which a player can interact with this widget"));
				MetaData->SetValue(NewProp_MaxInteractionDistance, TEXT("UIMax"), TEXT("5000.0"));
				MetaData->SetValue(NewProp_Pivot, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_Pivot, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_Pivot, TEXT("ToolTip"), TEXT("The Alignment/Pivot point that the widget is placed at relative to the position."));
				MetaData->SetValue(NewProp_DrawSize, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_DrawSize, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_DrawSize, TEXT("ToolTip"), TEXT("The size of the displayed quad."));
				MetaData->SetValue(NewProp_WidgetClass, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_WidgetClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_WidgetClass, TEXT("ToolTip"), TEXT("The class of User Widget to create and display an instance of"));
				MetaData->SetValue(NewProp_Space, TEXT("Category"), TEXT("UserInterface"));
				MetaData->SetValue(NewProp_Space, TEXT("ModuleRelativePath"), TEXT("Public/Components/WidgetComponent.h"));
				MetaData->SetValue(NewProp_Space, TEXT("ToolTip"), TEXT("The coordinate space in which to render the widget"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetComponent(Z_Construct_UClass_UWidgetComponent, TEXT("UWidgetComponent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetComponent);
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetMousePositionScaledByDPI()
	{
		struct WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms
		{
			APlayerController* Player;
			float LocationX;
			float LocationY;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMousePositionScaledByDPI"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14422409, 65535, sizeof(WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms), sizeof(bool), true);
			UProperty* NewProp_LocationY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationY"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LocationY, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms), 0x0000000000000180);
			UProperty* NewProp_LocationX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LocationX"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LocationX, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms), 0x0000000000000180);
			UProperty* NewProp_Player = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Player"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Player, WidgetLayoutLibrary_eventGetMousePositionScaledByDPI_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the mouse position of the player controller, scaled by the DPI.  If you're trying to go from raw mouse screenspace coordinates\nto fullscreen widget space, you'll need to transform the mouse into DPI Scaled space.  This function performs that scaling.\n\nMousePositionScaledByDPI = MousePosition * (1 / ViewportScale)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportScale()
	{
		struct WidgetLayoutLibrary_eventGetViewportScale_Parms
		{
			UObject* WorldContextObject;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewportScale"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022409, 65535, sizeof(WidgetLayoutLibrary_eventGetViewportScale_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventGetViewportScale_Parms), 0x0000000000000580);
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetLayoutLibrary_eventGetViewportScale_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the current DPI Scale being applied to the viewport and all the Widgets."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportSize()
	{
		struct WidgetLayoutLibrary_eventGetViewportSize_Parms
		{
			UObject* WorldContextObject;
			FVector2D ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetViewportSize"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14822409, 65535, sizeof(WidgetLayoutLibrary_eventGetViewportSize_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventGetViewportSize_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetLayoutLibrary_eventGetViewportSize_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the size of the game viewport."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_ProjectWorldLocationToWidgetPosition()
	{
		struct WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms
		{
			APlayerController* PlayerController;
			FVector WorldLocation;
			FVector2D ScreenPosition;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProjectWorldLocationToWidgetPosition"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22409, 65535, sizeof(WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms), sizeof(bool), true);
			UProperty* NewProp_ScreenPosition = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScreenPosition"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScreenPosition, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms), 0x0000000000000180, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_WorldLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WorldLocation, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_PlayerController = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PlayerController"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PlayerController, WidgetLayoutLibrary_eventProjectWorldLocationToWidgetPosition_Parms), 0x0000000000000080, Z_Construct_UClass_APlayerController_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the projected world to screen position for a player, then converts it into a widget\nposition, which takes into account any quality scaling.\n@param PlayerController The player controller to project the position in the world to their screen.\n@param WorldLocation The world location to project from.\n@param ScreenPosition The position in the viewport with quality scale removed and DPI scale remove.\n@return true if the position projects onto the screen."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_RemoveAllWidgets()
	{
		struct WidgetLayoutLibrary_eventRemoveAllWidgets_Parms
		{
			UObject* WorldContextObject;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveAllWidgets"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022409, 65535, sizeof(WidgetLayoutLibrary_eventRemoveAllWidgets_Parms));
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, WidgetLayoutLibrary_eventRemoveAllWidgets_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Viewport"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Removes all widgets from the viewport."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsCanvasSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsCanvasSlot_Parms
		{
			UWidget* Widget;
			UCanvasPanelSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsCanvasSlot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsCanvasSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsCanvasSlot_Parms), 0x0000000000000580, Z_Construct_UClass_UCanvasPanelSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsCanvasSlot_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Canvas Slot, allowing you to manipulate layout information.\n@param Widget The child widget of a canvas panel."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsGridSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsGridSlot_Parms
		{
			UWidget* Widget;
			UGridSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsGridSlot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsGridSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsGridSlot_Parms), 0x0000000000000580, Z_Construct_UClass_UGridSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsGridSlot_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Grid Slot, allowing you to manipulate layout information.\n@param Widget The child widget of a grid panel."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsHorizontalBoxSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsHorizontalBoxSlot_Parms
		{
			UWidget* Widget;
			UHorizontalBoxSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsHorizontalBoxSlot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsHorizontalBoxSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsHorizontalBoxSlot_Parms), 0x0000000000000580, Z_Construct_UClass_UHorizontalBoxSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsHorizontalBoxSlot_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Horizontal Box Slot, allowing you to manipulate its information.\n@param Widget The child widget of a Horizontal Box."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsOverlaySlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsOverlaySlot_Parms
		{
			UWidget* Widget;
			UOverlaySlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsOverlaySlot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsOverlaySlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsOverlaySlot_Parms), 0x0000000000000580, Z_Construct_UClass_UOverlaySlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsOverlaySlot_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Overlay Slot, allowing you to manipulate layout information.\n@param Widget The child widget of a overlay panel."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsUniformGridSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsUniformGridSlot_Parms
		{
			UWidget* Widget;
			UUniformGridSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsUniformGridSlot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsUniformGridSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsUniformGridSlot_Parms), 0x0000000000000580, Z_Construct_UClass_UUniformGridSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsUniformGridSlot_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Uniform Grid Slot, allowing you to manipulate layout information.\n@param Widget The child widget of a uniform grid panel."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsVerticalBoxSlot()
	{
		struct WidgetLayoutLibrary_eventSlotAsVerticalBoxSlot_Parms
		{
			UWidget* Widget;
			UVerticalBoxSlot* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UWidgetLayoutLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SlotAsVerticalBoxSlot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(WidgetLayoutLibrary_eventSlotAsVerticalBoxSlot_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, WidgetLayoutLibrary_eventSlotAsVerticalBoxSlot_Parms), 0x0000000000000580, Z_Construct_UClass_UVerticalBoxSlot_NoRegister());
			UProperty* NewProp_Widget = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Widget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Widget, WidgetLayoutLibrary_eventSlotAsVerticalBoxSlot_Parms), 0x0000000000000080, Z_Construct_UClass_UWidget_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Slot"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets the slot object on the child widget as a Vertical Box Slot, allowing you to manipulate its information.\n@param Widget The child widget of a Vertical Box."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UWidgetLayoutLibrary_NoRegister()
	{
		return UWidgetLayoutLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetLayoutLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidgetLayoutLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_GetMousePositionScaledByDPI());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportSize());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_ProjectWorldLocationToWidgetPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_RemoveAllWidgets());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsCanvasSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsGridSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsHorizontalBoxSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsOverlaySlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsUniformGridSlot());
				OuterClass->LinkChild(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsVerticalBoxSlot());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_GetMousePositionScaledByDPI()); // 2685578891
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportScale()); // 666514282
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_GetViewportSize()); // 2384097984
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_ProjectWorldLocationToWidgetPosition()); // 2408664681
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_RemoveAllWidgets()); // 699898242
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsCanvasSlot()); // 3667990395
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsGridSlot()); // 828542816
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsHorizontalBoxSlot()); // 292902717
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsOverlaySlot()); // 4129355806
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsUniformGridSlot()); // 533910022
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UWidgetLayoutLibrary_SlotAsVerticalBoxSlot()); // 3890970974
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/WidgetLayoutLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetLayoutLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetLayoutLibrary(Z_Construct_UClass_UWidgetLayoutLibrary, TEXT("UWidgetLayoutLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetLayoutLibrary);
	UScriptStruct* Z_Construct_UScriptStruct_FWidgetNavigationData()
	{
		UPackage* Outer=Z_Construct_UPackage_UMG();
		extern uint32 Get_Z_Construct_UScriptStruct_FWidgetNavigationData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReload(Outer, TEXT("WidgetNavigationData"), sizeof(FWidgetNavigationData), Get_Z_Construct_UScriptStruct_FWidgetNavigationData_CRC());
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WidgetNavigationData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWidgetNavigationData>, EStructFlags(0x00000201));
			UProperty* NewProp_WidgetToFocus = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WidgetToFocus"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(WidgetToFocus, FWidgetNavigationData), 0x0000000000000015);
			UProperty* NewProp_Rule = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Rule"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Rule, FWidgetNavigationData), 0x0000000000000015, Z_Construct_UEnum_SlateCore_EUINavigationRule());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
			MetaData->SetValue(NewProp_WidgetToFocus, TEXT("Category"), TEXT("Navigation"));
			MetaData->SetValue(NewProp_WidgetToFocus, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
			MetaData->SetValue(NewProp_Rule, TEXT("Category"), TEXT("Navigation"));
			MetaData->SetValue(NewProp_Rule, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWidgetNavigationData_CRC() { return 432609344U; }
	UClass* Z_Construct_UClass_UWidgetNavigation_NoRegister()
	{
		return UWidgetNavigation::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetNavigation()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidgetNavigation::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Previous = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Previous"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Previous, UWidgetNavigation), 0x0000000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
				UProperty* NewProp_Next = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Next"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Next, UWidgetNavigation), 0x0000000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
				UProperty* NewProp_Right = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Right"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Right, UWidgetNavigation), 0x0000000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
				UProperty* NewProp_Left = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Left"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Left, UWidgetNavigation), 0x0000000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
				UProperty* NewProp_Down = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Down"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Down, UWidgetNavigation), 0x0000000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
				UProperty* NewProp_Up = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Up"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Up, UWidgetNavigation), 0x0000000000000015, Z_Construct_UScriptStruct_FWidgetNavigationData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Previous, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Previous, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Previous, TEXT("ToolTip"), TEXT("Happens when the user presses Shift+Tab."));
				MetaData->SetValue(NewProp_Next, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Next, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Next, TEXT("ToolTip"), TEXT("Happens when the user presses Tab."));
				MetaData->SetValue(NewProp_Right, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Right, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Right, TEXT("ToolTip"), TEXT("Happens when the user presses right arrow, joystick, d-pad."));
				MetaData->SetValue(NewProp_Left, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Left, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Left, TEXT("ToolTip"), TEXT("Happens when the user presses left arrow, joystick, d-pad."));
				MetaData->SetValue(NewProp_Down, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Down, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Down, TEXT("ToolTip"), TEXT("Happens when the user presses down arrow, joystick, d-pad."));
				MetaData->SetValue(NewProp_Up, TEXT("Category"), TEXT("Navigation"));
				MetaData->SetValue(NewProp_Up, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetNavigation.h"));
				MetaData->SetValue(NewProp_Up, TEXT("ToolTip"), TEXT("Happens when the user presses up arrow, joystick, d-pad."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetNavigation(Z_Construct_UClass_UWidgetNavigation, TEXT("UWidgetNavigation"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetNavigation);
	UClass* Z_Construct_UClass_UWidgetTree_NoRegister()
	{
		return UWidgetTree::StaticClass();
	}
	UClass* Z_Construct_UClass_UWidgetTree()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_UMG();
			OuterClass = UWidgetTree::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AllWidgets = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AllWidgets"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(AllWidgets, UWidgetTree), 0x0000080000000000);
				UProperty* NewProp_AllWidgets_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AllWidgets, TEXT("AllWidgets"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UWidget_NoRegister());
				UProperty* NewProp_RootWidget = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RootWidget"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RootWidget, UWidgetTree), 0x0000000000000000, Z_Construct_UClass_UWidget_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Blueprint/WidgetTree.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetTree.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The widget tree manages the collection of widgets in a blueprint widget."));
				MetaData->SetValue(NewProp_AllWidgets, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetTree.h"));
				MetaData->SetValue(NewProp_RootWidget, TEXT("ModuleRelativePath"), TEXT("Public/Blueprint/WidgetTree.h"));
				MetaData->SetValue(NewProp_RootWidget, TEXT("ToolTip"), TEXT("The root widget of the tree"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UWidgetTree(Z_Construct_UClass_UWidgetTree, TEXT("UWidgetTree"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UWidgetTree);
	UPackage* Z_Construct_UPackage_UMG()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/UMG")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x2E429668;
			Guid.B = 0x6139A0A1;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_UMG_DownloadImageDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnDragDropMulticast__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetBool__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetFloat__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetInt32__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetText__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetSlateColor__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetLinearColor__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetSlateBrush__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetSlateVisibility__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetMouseCursor__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetCheckBoxState__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GetWidget__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForString__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_GenerateWidgetForObject__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_OnReply__DelegateSignature();
			Z_Construct_UDelegateFunction_UWidget_OnPointerEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnConstructEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnButtonClickedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnButtonPressedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnButtonReleasedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnCheckBoxComponentStateChanged__DelegateSignature();
			Z_Construct_UDelegateFunction_UComboBoxString_OnSelectionChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UComboBoxString_OnOpeningEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UEditableText_OnEditableTextChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UEditableText_OnEditableTextCommittedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UEditableTextBox_OnEditableTextBoxCommittedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnExpandableAreaExpansionChanged__DelegateSignature();
			Z_Construct_UDelegateFunction_UTableViewBase_OnGenerateRowUObject__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnMenuOpenChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMultiLineEditableText_OnMultiLineEditableTextCommittedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMultiLineEditableTextBox_OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnMouseCaptureBeginEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnMouseCaptureEndEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_UMG_OnFloatValueChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueChangedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxValueCommittedEvent__DelegateSignature();
			Z_Construct_UDelegateFunction_USpinBox_OnSpinBoxBeginSliderMovement__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
